== Introduction ==

Context Driven Development (CDD) takes a new approach to object orientation by separating ''state'' and ''behaviour''.
That allows you to work in different context without breaking encapsulation.
It's also the foundation that makes it possible to improve the way state is built and validated.
The problem is solved by using ''code generation''.
By using code generation, the amount of code you need to write is reduced to a minimum which allows you to
focus more on ''what'' to do instead of ''how'' resulting in cleaner and more concise code.

== Basic concepts ==
If we take a look at the [[CDD_-_Getting_started|Getting started]] example, it has the following structure in the IDE:

[[File:project-directory-structure.png]]

A lot of classes have been generated in directory ''java-gen'', but don't worry (be happy!) they are here to make your development experience more pleasant!

If you are using a version control system you should put both ''java'' and ''java-gen'' under version control.


Let's explain some of the basic concepts of CDD by looking at the main actors: ''PersonStateTemplate'', ''Person'' and ''Main'':

<pre>
package com.myproject.state;

public class PersonStateTemplate {
    int age;
    String givenName;
    String surname;
}
</pre>

<pre>
package com.myproject.behaviour;

import com.myproject.state.PersonState;

public class Person extends PersonFactory {
    public Person(PersonState state) {
        super(state);
    }

    // (factory)
    public Person asPerson() {
        return new Person(state);
    }

    public PersistablePerson asPersistable() {
        return new PersistablePerson(state);
    }

    public boolean isAdult() {
        return state.getAge() >= 18;
    }
}
</pre>

<pre>
package com.myproject.behaviour;

public class Main {

    public static void main(String[] args) {
        Person person = Person.age(15).givenName("Ingmar").surname("Bergman").asPerson();
        System.out.println("Is adult: " + person.isAdult());

        person.asPersistable().save();
    }
}
</pre>

output:
<pre>
Is adult: false
The state was saved: {age=15, givenName='Ingmar', surname='Bergman'}
</pre>


Let's take a closer look at the statement that creates an instance of ''Person'' (in the ''Main'' class):
<pre>
        Person person = Person.age(15).givenName("Ingmar").surname("Bergman").asPerson();
</pre>

In CDD you start by building state and ends with choosing a behaviour representation (encapsulation).
Before encapsulation takes place it's also possible to validate the state, more on that later.
In this example all attributes are mandatory and therefore included in the [http://natureofcode.blogspot.se/2011/09/chained-creator-pattern.html| method chain]: ''age(15).givenName("Ingmar").surname("Bergman")''.
The attributes are defined in ''PersonStateTemplate'', and the method chain, the toString() and others are based on this definition.

