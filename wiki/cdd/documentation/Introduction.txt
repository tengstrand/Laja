__NOTOC__
= Introduction =

Context Driven Development (CDD) is a new approach to object orientation, which allows for a clean separation of ''state'' and ''behaviour''; enabling us to switch an object's context without breaking its encapsulation.
The secret sauce that makes this possible is ''code generation''.
Having all of the CDD foundation classes generated automatically frees developers to just focus on ''what'' the system does instead of ''how'' it does it - resulting in less code, cleaner code and more robust code.

=== Why CDD? ===

CDD is about dividing classes/objects into smaller pieces, giving each piece a clear responsiblility and increased composability.
Let's have a look at an ordinary Java class:

<source>
public class Person {
    private int age;
    private String name;

    public Person(int age, String name) {
        this.age = age;
        this.name = name;
    }

    public boolean isTeenager() {
        return age >= 13 && age <= 19;
    }

    // Implement these...
    public int hashCode() { ... }
    public boolean equals(Object o) { ... }
    public String toString() { ... }
}
</source>


An instance ''person'' can be created by calling the constructor:

<source>
Person person = new Person(25, "James");
</source>


What is happening here is that we merge data (''age'' and ''name'') with the function ''isTeenager'' to form an object. This process is called ''encapsulation'' and can be illustrated by this picture:

[[File:CDD-new-instance.png|400px]]

The problem with this approach is that the class/object has too many responsibilities:
# Build state.
# Manage identity (hashCode / equals).
# Merge state and behaviour.

By intertwining state and behaviour we get rigid and inflexible systems. 
The problem can be solved by dividing objects into three roles: ''state, behaviour'' and ''creator''. This will free objects to deliver behavior based on state, e.g.:
<source>
@Behaviour
public class Person extends PersonBehaviour {

    public Person(PersonState state) {
        super(state);
    }

    public boolean isTeenager() {
        return state.age >= 13 && state.age <= 19;
    }
}
</source>


If we also create a ''state'' and a ''creator'' class (more on that later) we can create an instance like this:

<source>
Person person = createPerson().age(25).name("James").asPerson();
</source>


This is very readable and has some other advantages too!


[[Code generation|Next >]]
