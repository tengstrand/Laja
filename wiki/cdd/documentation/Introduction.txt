__NOTOC__
=== <span style="color:#FF0000">Under construction!</span> ===
Will be released later in 2012.

= Introduction =

Context Driven Development (CDD) is a new approach to object orientation, which allows for a clean separation of ''state'' and ''behaviour''; enabling us to switch an object's context without breaking its encapsulation.
The secret sauce that makes this possible is ''code generation''.
Having all of the CDD foundation classes generated automatically frees developers to just focus on ''what'' the system does instead of ''how'' it does it - resulting in less code, cleaner code and more robust code.

=== Overview ===

CDD is aiming to solve a number of problems related to object orientation of today.
The inflexibility at the object level and the absence of the concept ''context'' are just two examples.
Here comes a list of the most important ingredients of CDD:

* The state is defined in a declarative way so that every attribute has its own properties, like if it's optional or if it's part of the identity. The ''hashCode'', ''equals'' and ''toString'' is then generated based on that information making the code more robust and easier to maintain.
* One behaviour representation per context can be created allowing us to have different representations that focus on one task at a time. This follows the [http://en.wikipedia.org/wiki/Single_responsibility_principle single responsibility principle].
* Facilitates integration of different parts of the codebase. The amount of code needed to be written when [[Static context|switching context]] is reduced to a minimum.
* Every behaviour class has only one constructor containing the state. This is made possible by the clean separation between ''building state'' and ''encapsulation'' which also enables validation and context switching without breaking encapsulation.
* The state is built in a readable, flexible and robust way using the patterns [http://natureofcode.blogspot.se/2011/09/chained-creator-pattern.html chained creator] and/or the [http://en.wikipedia.org/wiki/Builder_pattern builder pattern] instead of a number of constructors and/or hand written builders.


[[Code generation|Next >]]
