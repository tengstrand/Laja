In traditional object oriented languages the ''state'' and ''behaviour'' are merged to form classes that can be instantiated to objects, like this:

<source>
public class Person {
    private int age;
    private String name;

    public Person(int age, String name) {
        this.age = age;
        this.name = name;
    }

    public boolean isTeenager() {
        return age >= 13 && age <= 19;
    }

    @Override
    public int hashCode() {
        int result = ssn;
        result = 31 * result + (name != null ? name.hashCode() : 0);

        return result;
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) return true;
        if (that == null || getClass() != that.getClass()) return false;

        PersonState state = (PersonState)that;

        if (ssn != state.ssn) return false;
        if (name != null ? !name.equals(state.name) : state.name != null) return false;

        return true;
    }

    @Override
    public String toString() {
        return "Person{" +
                "age=" + age +
                ", name='" + name + '\'' +
                '}';
    }
}

Person person = new Person(56, "Ingemar Stenmark");
System.out.println(person);
System.out.println("Is teenager: " + person.isTeenager());
</source>

...if executed, we get:

<source>
Person{age=56, name='Ingemar Stenmark'}
Is teenager: false
</source>


The ''state'' is here represented by the attributes ''age'' and ''name'', and the ''behaviour'' is represented by the method ''isTeenager'',
which can be illustrated by this diagram:


[[File:Traditional-object.png|400px]]


The merging of state and behavior makes it harder to reuse code and to work in different contexts.
Object oriented languages with support for [http://en.wikipedia.org/wiki/Trait_%28computer_programming%29 traits] are able to compose classes in a powerful way, but once instantiated the objects become static.

=== Flexible objects ===

CDD wants to bring the same level of flexibility to objects as we get for classes.
The separation of ''creator'', ''state'' and ''behaviour'' enables powerful ways to build, validate and compose objects.
Let's see how the previous example would look like in CDD (generated code has been removed):

<source>
public class PersonState implements ImmutableState {
    public final int age;
    public final String name;
}

public class PersonCreator implements PersonCreatorMaker {
    private final PersonMutableState state;

    public Person asPerson() {
        return new Person(state.asImmutable());
    }
}

public class Person extends PersonBehaviour {
    public Person(PersonState state) {
        super(state);
    }

    public boolean isTeenager() {
        return state.age >= 13 && state.age <= 19;
    }
}

Person person = createPerson.age(56).name("Ingemar Stenmark").asPerson();
System.out.println(person);
System.out.println("Is teenager: " + person.isTeenager());
</source>


...when executed, we get:

<source>
Person{age=56, name='Ingemar Stenmark'}
Is teenager: false
</source>


The cool thing with CDD is that we can have many behaviour representations (one per context), not just ''Person'' but
also for example ''PersonRowInFile'' and ''PersistablePerson'':


[[File:CDD-object.png|400px]]


CDD is not the only attempt to improve how to work with objects, you may also find it interesting to read about the [http://en.wikipedia.org/wiki/Data,_context_and_interaction DCI] paradigm.
If you want to compare the two you can have a look at the popular ''account'' example which looks like
[http://www.jroller.com/sebastianKuebeck/entry/object_oriented_programming_2_0 this] in DCI using the Decorator pattern and traits or like
[https://github.com/Qi4j/qi4j-sdk/tree/develop/samples/dci/src/main/java/org/qi4j/dci/moneytransfer this] using the framework [http://www.qi4j.org Qi4j] and like
[https://github.com/tengstrand/Laja/blob/master/src/example/java/cdd/main/net/sf/laja/example/account this] in CDD.


Here is an alternative way of illustrating objects in CDD where we can think of them as building blocks:

[[File:CDD-object-layering.png|600px]]


[[Main_Page|< Back]]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[[Encapsulation|Next >]]
