In CDD, parameters in the ''chained creator'' and ''builders'' are generated based on the ''state definition''.
The previous example in the [[Creator]] had, for example, this state definition:

<source>
public class PersonState {
    public int ssn;
    public String name;
}
</source>


...and a ''creator'':
<source>
public class PersonCreator implements PersonCreatorMaker {
    private final PersonMutableState state;

    public Person asPerson() {
        return new Person(state.asImmutable());
    }

    public TextPerson asTextPerson() {
        return new TextPerson(state);
    }
    ...
}
</source>


Scroll down the ''creator'' till you found the ''factory'':

<source>
    // --- Factory ----

    public class PersonFactory {

        public _Name ssn(int ssn) {
            return new _Ssn().ssn(ssn);
        }

        // ssn
        public class _Ssn {
            public _Name ssn(int ssn) {
                state.ssn = ssn;
                return new _Name();
            }
        }

        // name
        public class _Name {
            public PersonCreator name(String name) {
                state.name = name;
                return new PersonCreator(state);
            }
        }
    }
</source>


...the first method ''ssn(int ssn)'' is the start of the chained creator, followed by the classes ''_Ssn'' and ''_Name'' (one per attribute in the state definition).
The call to ''PersonCreator.createPerson()'', or just ''createPerson()'' if you use static imports,
returns an instance of ''PersonFactory'' and is the reason you can write:
<source>
createPerson().ssn(123).name("Carl").asPerson()
</source>


=== Overloaded parameters ===

CDD supports overloading of parameters as a way to extend builders and the chained creator.
Let's do that by adding a new method to the ''_Name'' class:
<source>
// name
public class _Name {
    public PersonCreator name(String name) {
        state.name = name;
        return new PersonCreator(state);
    }

    // add
    public PersonCreator name(String firstName, String surname) {
        state.name = firstName + " " + surname;
        return new PersonCreator(state);
    }
}
</source>


Make sure you include the "// add" comment and regenerate.
Look at the top of ''PersonCreator'' and you will find this comment:
<source>
    // ===== Generated code =====

    /*
import net.sf.laja.cdd.annotation.Parameter;
import net.sf.laja.cdd.annotation.Parameters;

    @Parameters({
        @Parameter(attribute = "name", methodSignature = "String firstName, String surname", value = "firstName + " " + surname")
    })
    */
</source>


The "// add" comment was a directive to tell CDD to generate the comment.

Now insert the ''@Parameters'' statement at the top of the creator:
<source>
@Creator
public class PersonCreator implements PersonCreatorMaker {
    private final PersonMutableState state;

    public Person asPerson() {
        return new Person(state.asImmutable());
    }

    public TextPerson asTextPerson() {
        return new TextPerson(state);
    }

    @Parameters({
        @Parameter(attribute = "name", methodSignature = "String firstName, String surname", value = "firstName + \" \" + surname")
    })

    // ===== Generated code =====

    ...
}
</source>


You need to help CDD a little in this example (or just copy the code above) by inserting a backslash in front of the quotation marks.


The next time we generate, our new overloaded ''name'' method will be generated based on the ''@Parameter'' definition:
<source>
// name
public class _Name {
    public PersonCreator name(String name) {
        state.name = name;
        return new PersonCreator(state);
    }

    public PersonCreator name(String firstName, String surname) {
        state.name = firstName + " " + surname;
        return new PersonCreator(state);
    }
}
</source>


=== Suppressing original parameter methods ===

It's possible to remove the original ''name'' parameter method by modifying the ''@Parameter'' statement and set ''suppressOriginal'' to ''true'':
<source>
@Parameter(attribute = "name", methodSignature = "String firstName, String surname", value = "firstName + \" \" + surname", suppressOriginal = true)
</source>


If we generate and scroll down to the ''_Name'' class, we can see that the original parameter method has been removed:
<source>
// name
public class _Name {

    public PersonCreator name(String firstName, String surname) {
        state.name = firstName + " " + surname;
        return new PersonCreator(state);
    }
}
</source>

=== Change method name ===

It is possible to change the method name by setting the ''method'' paremeter, e.g.:
<source>
@Parameter(attribute = "name", method = "names", methodSignature = "String firstName, String surname", value = "firstName + \" \" + surname")
</source>


We can now create person objects like this:
<source>
Person lisa = createPerson().ssn(123).name("Lisa Simpsons").asPerson();
Person bart = createPerson().ssn(456).names("Bart", "Simpsons").asPerson();
System.out.println(lisa);
System.out.println(bart);
</source>

'''output''':
<source>
Person{ssn=123, name="Lisa Simpsons"}
Person{ssn=456, name="Bart Simpsons"}
</source>
