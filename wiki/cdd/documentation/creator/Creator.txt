CDD has three roles: ''creator'', ''state'' and ''behaviour''. Let's explain how the creator works with an example:

<source>
public class PersonState {
    public int ssn;
    public String name;
}

public class PersonCreator {
    PersonState state;
}
</source>


...regenerate and add:
<source>
import static com.myproject.PersonCreator.PersonBehaviour;

public class Person extends PersonBehaviour {
    public Person(PersonState state) {
        super(state);
    }

    public boolean isTheAuthor() {
        return state.name.toLowerCase().equals("joakim tengstrand");
    }
}
</source>


...and:
<source>
package com.myproject;

import static com.myproject.PersonCreator.PersonBehaviour;

public class TextPerson extends PersonBehaviour {
    public TextPerson(PersonState state) {
        super(state);
    }

    public String text() {
        return state.ssn + ";" + state.name + ";";
    }
}
</source>


...and two methods to ''PersonCreator'':
<source>

public class PersonCreator implements PersonCreatorMaker {
    private final PersonMutableState state;

    public Person asPerson() {
        return new Person(state.asImmutable());
    }

    public Person asTextPerson() {
        return new TextPerson(state.asImmutable());
    }

    ...
}
</source>


After generation, the code looks something like this (some code has been removed and replaced with "..."):
<source>
@Creator
public class PersonCreator implements PersonCreatorMaker {
    private final PersonMutableState state;

    public Person asPerson() { ... }
    public Person asTextPerson() { ... }

    // ===== Generated code =====

    public static PersonFactory createPerson() { ... }
    public static PersonCreator createPersonFromMap(Map person) { ... }
    public static PersonBuilder buildPerson() { ... }
    public static PersonBuilder buildPersonFromMap(Map person) { ... }
    public static PersonStringBuilder buildPersonFromStrings() { ... }
    public static PersonListBuilder createPersonList(PersonCreator... creators) { ... }
    public static PersonSetBuilder createPersonSet(PersonCreator... creators) { ... }
    public static PersonMapBuilder createPersonFromMap(PersonMapEntryBuilder... builders) { ... }
    public static PersonMapEntryBuilder createPersonEntry(Object key, PersonCreator creator) { ... }
    public static PersonMapEntryBuilder createPersonEntry(Object key, PersonBuilder builder) { ... }

    public class PersonFactory { ... }

    public PersonCreator(PersonMutableState state) { this.state = state; }

    public PersonState asState() { ... }
    public PersonMutableState asMutableState() { ... }
    public Map asMap() { ... }
    public PersonStringState asStringState() { ... }
    public PersonStringState asStringState(StringStateConverter stateConverter) { ... }

    public void assertIsValid() { ... }
    public boolean isValid() { ... }
    public ValidationErrors validate() { ... }

    @Override public int hashCode() { ... }
    @Override public boolean equals(Object that) { ... }
    @Override public String toString() { ... }

    public static class PersonBehaviour { ... }
    public static class PersonMutableBehaviour { ... }
    public static class PersonBuilder implements PersonCreatorMaker { ... }
    public static class PersonStringBuilder { ... }
    public static class PersonListBuilder implements Iterable<PersonCreator> { ... }
    public static class PersonSetBuilder implements Iterable<PersonCreator> { ... }
    public static class PersonMapEntryBuilder { ... }
    public static class PersonMapBuilder { ... }
}

interface PersonCreatorMaker { ... }
</source>


As you can see, a lot of convenient methods has been generated, like:
# Methods that creates and builds different representations of person state like immutable state, mutable state, map state and string state.
# Validation methods.
# Hash code, equals and to string methods.
# Methods that create sets, lists and maps.


Execute this code (make sure the method ''PersonCreator.buildPerson'' is imported):
<source>
Person person = buildPerson().withSsn(1234).withName("Joakim Tengstrand").asPerson();
TextPerson textPerson = buildPerson().withSsn(5678).withName("Carl").asTextPerson();

System.out.println("Is the author: " + person.isTheAuthor());
System.out.println("Text: " + textPerson.text());
</source>

'''output:'''
<source>
Is the author: true
Text: 5678;Carl;
</source>
