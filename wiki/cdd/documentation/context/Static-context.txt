Static context is used to represent a place in the system where a certain task can be performed.
If we use ''person'' as an example, it can perform different tasks in various places in the system, for example:

* answer if it's deceased
* represent it as a row in an export format
* persist to a database.

Each of these three tasks represents a unique context where for example a ''person'' can operate.
We can also have name for them like ''domain'', ''export'' and ''persistence'' context.
The way we allow ''person'' (represented by ''PersonState'') to operate within a context is to have a
behaviour representation for it like ''Person'', ''PersonAsRowInFile'' or ''PersistablePerson''.

A static context is something that i known at the time the code is written (compile time). Let's take another example:


[[File:CDD-static-context.png|550px]]


Imagine that we start by retrieving an instance from a repository (Context 1), present it in the GUI (Context 2),
perform some editing in the GUI (Context 3) followed by some domain operations (Context 4)
and finishing by writing the state to a file (Context 5).


Context switching as known here was invented in 2011 and first described in this [http://natureofcode.blogspot.se/2011/08/exploring-nature-of-code.html blog post]
but have been improved since then in a way that state and behaviour now are completely separated.
The ability to have a set of different context representations is an effective way to reduce the amount of code needed to integrate different parts of the system.
The switching is performed without affecting the state format or breaking the [http://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29 encapsulation].
It encourages putting ''behaviour'' inside objects close to its data so they can perform tasks themselves, which is good and follows the [http://c2.com/cgi/wiki?TellDontAsk Tell Don't Ask] principle.
In addition to a facilitated integration CDD also let us create objects that focus on one task at a time, following the [http://en.wikipedia.org/wiki/Single_responsibility_principle Single responsibility] principle.


Let us continue with yet another example. In an earlier example we switched context to be able to perform the save operation:
<source>
person.asPersistable().save();
</source>

...which can be illustrated by this diagram:


[[File:CDD-context-switch.png|350px]]


The switching was performed by the method ''asPersistable()'':

<source>
package com.myproject.behaviour;

import com.myproject.state.PersonState;

public class Person extends PersonFactory {
    public Person(PersonState state) {
        super(state);
    }

    // (factory)
    public Person asPerson() {
        return new Person(state);
    }

    public PersistablePerson asPersistable() {
        return new PersistablePerson(state);
    }
}
</source>

Context switching allows our objects to perform well defined tasks in different parts of the system almost friction free.
We don't need to convert between different state representations when crossing context borders because the state format never change.
Conversion between state representations are a common source of errors that is almost eliminated in CDD.
Support for letting objects cross physical context borders, by using a standardized text transport format, is not supported in this alpha version but may be added in the future.

=== Layers and tier of deployment ===
It's often a good thing to separate different responsibilities into different logical layers in the codebase (packages/modules) to increase modularity and cohesion.
Don't confuse architectural layers with tiers of deployment (well described [http://gojko.net/2010/06/11/udi-dahan-the-biggest-mistakes-teams-make-when-applying-ddd here]).
Assume that you have control over all source code in your layered system.
If the layers are physically separated (deployed to different physical locations) and a layer (for example the ''GUI'') need access to another layer (for example the ''Domain'')
then the ''domain code'' should also be deployed to the ''GUI'' tier so that we don't need to duplicate our domain rules.


But is this not an example of mixing of responsibility? No, we only ''use'' the "core domain" business rules from the GUI layer, we don't add or duplicate the code.
It's very similar to calling a service with the difference that instead of sending the state to a service and letting the service operate on it,
we ''encapsulate'' the state so that we can work in a more object oriented way. For example ''person.export()'' instead of ''service.export(person)''.
The latter breaks encapsulation which may lead to a situation where business rules are scattered around the system instead of gathered into one place.

The rule of thumb is that different parts of the codebase should be maintained in ''one place'' but is allowed to be deployed and used from ''several places''.
This helps to keep the code clean and [http://en.wikipedia.org/wiki/Don%27t_repeat_yourself DRY].


[[Context|< Back]]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[[Dynamic context|Next >]]