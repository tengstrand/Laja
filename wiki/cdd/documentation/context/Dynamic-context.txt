A dynamic context is something that can vary at runtime within a static context:


[[File:CDD-dynamic-context.png|400px]]


One of the concrete classes ''PersonAdmin'' or ''PersonRestricted'' which both implements the interface ''Person'',
will be used depending on the value of ''userRole'' and how the factory is implemented. This is best described by showing some code.
Pretend we want to restrict access to phone numbers so that only ADMIN users can see them.


Start by adding ''UserRole'':

<source>
package com.myproject.behaviour;

public enum UserRole {
    RESTRICTED, ADMIN
}
</source>

...add a state definition (template) for person:

<source>
package com.myproject.state;

public class PersonStateTemplate {
    String name;
    String phoneNumber;
}
</source>

...regenerate using the ''-i'' option, which will tell ''Laja'' to generate the interface ''Person'':

<source>
laja -i myproject
</source>

<source>
package com.myproject.behaviour;

import com.myproject.state.PersonState;
import com.myproject.state.PersonStateList;

public interface Person {
    PersonState getState(PersonStateList stateList);
}
</source>

...and the class ''PersonImpl'':

<source>
package com.myproject.behaviour;

import com.myproject.state.PersonState;

// TODO: Rename PersonImpl to something more descriptive!
public class PersonImpl extends PersonFactory implements Person {
    public PersonImpl(PersonState state) {
        super(state);
    }

    // (factory)
    public Person asPerson() {
        return new PersonImpl(state);
    }
}
</source>

...follow the recommendation and rename it to ''PersonAdmin'':

<source>
package com.myproject.behaviour;

import com.myproject.state.PersonState;

public class PersonAdmin extends PersonFactory implements Person {
    public PersonAdmin(PersonState state) {
        super(state);
    }

    // (factory)
    public Person asPerson() {
        return new PersonAdmin(state);
    }
}
</source>

...add the class ''PersonRestricted'':

<source>
package com.myproject.behaviour;

import com.myproject.state.PersonState;

public class PersonRestricted extends PersonFactory implements Person {
    public PersonRestricted(PersonState state) {
        super(state);
    }

    // (factory)
    public PersonRestricted asPersonRestricted() {
        return new PersonRestricted(state);
    }

    @Override
    public String toString() {
        return "PersonRestricted{name=" + (state.getName() == null ? null : '\'' + state.getName() + '\'' ) +
                ", phoneNumber=???}";
    }
}
</source>

...modify the method ''asPerson'' in ''PersonAdmin'':

<source>
// (factory)
public Person asPerson(UserRole role) {
    if (role == UserRole.ADMIN) {
        return new PersonAdmin(state);
    } else if (role == UserRole.RESTRICTED) {
        return new PersonRestricted(state);
    }
    throw new IllegalArgumentException("Unsupported role: " + role);
}
</source>

...regenerate and add a ''Main'' class:

<source>
package com.myproject.behaviour;

public class Main {
    public static void main(String[] args) {
        Person admin = PersonFactory.name("Anders").phoneNumber("011-11111111").asPerson(UserRole.ADMIN);
        Person restricted = PersonFactory.name("Richard").phoneNumber("022-22222222").asPerson(UserRole.RESTRICTED);

        System.out.println(admin);
        System.out.println(restricted);
    }
}
</source>

...execute and we get the output:

<source>
PersonAdmin{name='Anders', phoneNumber='011-11111111'}
PersonRestricted{name='Richard', phoneNumber=???}
</source>

However, the idea is not to send hard coded value into ''asPerson'' (as in the example) but to use a context variable like this:

<source>
UserRole userRole; // Populated in some way, e.g. injection.
...
Person person = PersonFactory.name("Anders").phoneNumber("011-11111111").asPerson(userRole);
</source>

The decision which implementation to choose is delegated to the factory. This creates a loose coupling
between the user role and the factory so that the factory can be changed without affecting the calling code.

=== A single representation ===

An alternative to use one representation per context is to use a single representation:

<source>
package com.myproject.behaviour;

import com.myproject.state.PersonState;

public class StandardPerson extends PersonFactory implements Person {
    private final UserRole userRole;

    public StandardPerson(PersonState state, UserRole userRole) {
        super(state);
        this.userRole = userRole;
    }

    // (factory)
    public Person asPerson(UserRole userRole) {
        return new StandardPerson(state, userRole);
    }

    @Override
    public String toString() {
        if (userRole == UserRole.ADMIN) {
            return state.toString();
        }
        return "StandardPerson{name=" + (state.getName() == null ? null : '\'' + state.getName() + '\'' ) +
                ", phoneNumber=???}";
    }
}
</source>

...execute the ''Main'' class again to verify that the same result is produced:

<source>
PersonAdmin{name='Anders', phoneNumber='011-11111111'}
PersonRestricted{name='Richard', phoneNumber=???}
</source>

With this alternative technique, the variation in behaviour is handled within the single representation ''StandardPerson''.
In this example we used an enumeration to hold the context variable.
It's also possible to use a class instead of an enumeration to represent a context variable.

If you choose to use a standard class instead of an enumeration as context variable then make sure it is immutable
to prevent unpredictable side effects (by setting all class members to ''final''), e.g:

<source>
package com.myproject.behaviour;

import java.util.Calendar;

public class DayOfWeek {
    public final boolean isWeekDay;

    public DayOfWeek() {
        int day = Calendar.getInstance().get(Calendar.DATE);
        isWeekDay = day != Calendar.SATURDAY && day != Calendar.SUNDAY;
    }
}
</source>


[[Context switching|< Back]]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[[State|Next >]]
