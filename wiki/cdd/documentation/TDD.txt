CDD is very well suited for use with "test first" development (Test Driven Development).
Before we start we have to modify the project file (e.g. ''myproject.laja'') with the new test directory:

<source>
#set (package = "com/myproject")

#generateCdd({
  srcDirs: [ "{.}/main/{package}", "{.}/test/{package}" ]
})
</source>

=== Test immutable state ===

...

=== Test mutable state ===

Create state objects for ''address'' and ''person'' in (e.g.) package ''com.myproject'':

<source>
public class AddressState {
    public String streetName;
    public int streetNumber;
    public String city;
}

public class PersonState {
    int age;
    String name;
    AddressState homeAddress;
}
</source>


...regenerate and add:

'''Address'''
<source>
import static com.myproject.AddressCreator.AddressMutableBehaviour;
import static com.myproject.AddressState.AddressMutableState;

public class Address extends AddressMutableBehaviour {
    private final AddressMutableState state;

    public Address(AddressMutableState state) {
        super(state);
        this.state = state;
    }

    public AddressState state() {
        return state.asImmutable();
    }
}
</source>

'''Person'''
<source>
import static com.myproject.PersonCreator.PersonMutableBehaviour;
import static com.myproject.PersonState.PersonMutableState;

public class Person extends PersonMutableBehaviour {
    private final PersonMutableState state;

    public Person(PersonMutableState state) {
        super(state);
        this.state = state;
    }

    public void moveToAddress(Address address) {
         state.homeAddress = address.state().asMutable();
    }
}
</source>

'''TestPerson'''
<source>
import static com.myproject.PersonCreator.PersonMutableBehaviour;
import static com.myproject.PersonState.PersonMutableState;

public class TestPerson extends PersonMutableBehaviour {
    public final PersonMutableState state;

    public TestPerson(PersonMutableState state) {
        super(state);
        this.state = state;
    }

    public Person asPerson() {
        return new Person(state);
    }

    public Address getHomeAddress() {
        return new Address(state.homeAddress);
    }
}
</source>

'''AddressCreator'''
<source>
public class AddressCreator {
    AddressMutableState state;

    public Address asAddress() {
        return new Address(state.asImmutable());
    }
}
</source>

'''PerSonCreator'''
<source>
public class PersonCreator {
    PersonMutableState state;

    public Person asPerson() {
        return new Person(state.asImmutable());
    }
}

</source>

'''TestPersonCreator'''

<source>
public class TestPersonCreator {
    PersonMutableState state;

    public TestPerson asTestPerson() {
        return new TestPerson(state);
    }
</source>


...regenerate and add the test:

<source>
package com.myproject.behaviour;

import org.junit.Test;

import static junit.framework.Assert.assertEquals;

public class PersonTest {

    @Test
    public void shouldChangeAddressWhenMovingToNewAddress() {

        // 1. Create a person
        TestPerson person = TestPerson.age(10).name("Carl").homeAddress(
                Address.streetName("First street").streetNumber(1).city("Stockholm")).asTestPerson();

        // 2. Move to a new address
        Address newAddress = Address.streetName("Second street").streetNumber(2).city("Uppsala").asAddress();
        person.asPerson().moveToAddress(newAddress);

        // 3. Check that the address has been changed
        assertEquals(newAddress, person.getAddress());
    }
}
</source>

''PersonTest'' is our test class that is executed by JUnit.
''TestPerson'' is the test context of "person" and used to verify that ''moveToAddress'' is working as expected.
We can allow us to break encapsulation by adding the getter ''getAddress'' because it's only used by test code.
We don't have any switcher methods from ''Person'' or other contexts to ''TestPerson'' which make it safe to add the getter.
If we do, we mix production code with test code and run the risk that the state is changed in an uncontrolled manner.

A good thing is that we can take advantage of the fact that we have a test context behaviour representation ''TestPerson''
and put code that naturally belongs there and thus making the code more readable.


[[Composition|< Back]]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[[Laja|Next >]]
