CDD is an experiment to see if object orientation can be improved by splitting up classes/objects into smaller pieces.
This is done by using parsing and code generation. Another possible solution would have been to create a compiler.
It would have been a cleaner solution but would result in much more work.
Code generation also has the advantage that the generated code is not hidden away and can therefore easily be read and debugged.

Many developers have had bad experience with code generation.
CDD tries to change that by not getting in the way of the developer.
CDD generates the code needed to assemble the different building blocks, which is the type of code that is often both tedious and difficult to maintain.
The code that remains to be written is focused on defining ''state'' and adding ''behavior'' suitable for different ''contexts''.
The hope is that CDD will make you a better developer and the work easier and more fun!

The code generation is performed by the combined code and parser generator [[Laja]].
The targeting language is Java but there are no technical barriers to implement CDD in other languages such as C++, C#, Ruby or Scala, but at the moment only Java is supported.

If we take a look at the [[Quick-start guide|Quick-start guide]], it has the following structure in the IDE:

[[File:project-directory-structure.png]]

Let's explain some of the basic concepts of CDD by looking at the classes from the [[Quick-start guide|Quick-start guide]] example
(package statement, imports and generated code has been removed:

'''State'''
<source>
public class PersonState implements ImmutableState {
    public final int age;
    public final String givenName;
    public final String surname;

    // ===== Generated code =====
    ...
}
</source>

'''Creator'''
<source>
public class PersonCreator implements PersonCreatorMaker {
    private final PersonMutableState state;

    public Person asPerson() {
        return new Person(state.asImmutable());
    }

    // ===== Generated code =====
    ...
}
</source>

'''Behaviour'''
<source>
public class Person extends PersonBehaviour {

    public Person(PersonState state) {
        super(state);
    }

    public boolean isTeenager() {
        return state.age >= 13 && state.age <= 19;
    }
}
</source>

'''Main'''
<source>
package com.myproject;

import static com.myproject.PersonCreator.createPerson;

public class Main {

    public static void main(String[] args) {
        Person person = createPerson().age(18).givenName("Ingmar").surname("Bergman").asPerson();

        System.out.println(person);
    }
}
</source>

'''output'''
<source lang=dos>
Is teenager: true
Person{age=18, givenName="Ingmar", surname="Bergman"}
</source>


If we take a closer look at the statement that creates an instance of ''Person'':
<source>
Person person = createPerson().age(18).givenName("Ingmar").surname("Bergman").asPerson();
</source>

...we can see that CDD starts by building ''state'' and ends with ''encapsulation'' by choosing a ''behaviour representation'' that can be used in a specific ''context''.


[[Main_Page|< Back]]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[[Classes and objects|Next >]]
