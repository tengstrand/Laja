Let's extend ''PersonState'' by modifying the template ''PersonStateTemplate'':
<source>
package com.myproject.state;

public class PersonStateTemplate {
    int personId; // (id)
    int length; // (hide)
    long ssn; // (key)
    String givenName;
    String middleName; // (optional)
    String surname;
    String occupation; // (exclude)
}
</source>

...regenerate and modify the ''Main'' class (from now on, we will only show the contents of the ''main'' method):

<source>
// The 'chained creator' starts here...
Person person = Person.ssn(12345678).givenName("Ingmar").surname("Bergman")
        .withPersonId(1)                  // ...followed by builder methods
        .withMiddleName("Ernst")
        .withOccupation("Film director")
        .asPerson();                      // ...and encapsulation

System.out.println(person);
</source>

...modify the constructor of ''Person'' (ensures that the hidden attribute ''length'' is set):
<source>
public Person(PersonState state) {
    super(state);
    state.setLength(179, this);
}
</source>

...gives the output:
<source>
Person{personId=1, length=179, ssn=12345678, givenName='Ingmar', middleName='Ernst', surname='Bergman', occupation='Film director'}
</source>


Each attribute can have one or several properties by ending the line with a comment. None of them are mandatory:

{| class="wikitable"
! Keyword !! Example !! Description
|-
|
(id)
||
<span style="color:#008000">int</span>&nbsp;personId;&nbsp;// (id)
||
The [http://en.wikipedia.org/wiki/Surrogate_key surrogate key]. Only one attribute can be marked as surrogate key.
|-
|
(key)
||
<span style="color:#008000">long</span>&nbsp;ssn;&nbsp;//&nbsp;(key)
||
The [http://en.wikipedia.org/wiki/Natural_key natural key]. One or several attributes can be included in the natural key.
|-
|
(optional)
||
<span style="color:#008000">String</span>&nbsp;middleName;&nbsp;//&nbsp;(optional)
||
The keywords ''(optional)'', ''(id)'' and ''(exclude)'' will exclude the attribute from the ''chained creator'' allowing them to be uninitialized (''null'').
|-
|
(hide)
||
<span style="color:#008000">int</span> length; // (hide)
||
The ''hide'' keyword excludes the attribute from the ''chained creator'' but requires it to be initialized (''not null'') by the constructor of the ''behaviour'' class, if not combined with the ''(optional)'' keyword.
|-
|
(exclude)
||
<span style="color:#008000">String</span> occupation; // (exclude)
||
Same as ''optional'' except that it's excluded from ''hashCode()'' and ''equals()''.
|}


If all attributes are optional, then the chained creator can be accessed via the ''create()'' method, example:
<source>
Person person = Person.create().withAge(16).asPerson();
</source>

=== Types ===

The following types are supported:

{| class="wikitable"
! Type !! Description
|-
|
boolean, Boolean
||
true / false
|-
|
byte, Byte
||
8 bit signed integer, range: -128 to 127
|-
|
short, Short
||
16 bit signed integer, range: -32,768 to 32,767
|-
|
char, Character
||
16 bit unsigned integer, range: 0 to 65,535
|-
|
int, Integer
||
32 bit signed integer, range: -2,147,483,648 to 2,147,483,647
|-
|
long, Long
||
64 bit signed integer, range: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
|-
|
float, Float
||
Single-precision 32-bit IEEE 754 floating point
|-
|
double, Double
||
Double-precision 64-bit IEEE 754 floating point
|-
|
BigInteger
||
Arbitrary-precision integer (java.math.BigInteger)
|-
|
BigDecimal
||
Arbitrary-precision signed decimal number (java.math.BigDecimal)
|-
|
String
||
Standard Java character string
|}

All the supported types are [http://en.wikipedia.org/wiki/Immutable_object immutable]. A common type that is missing at the moment is ''Date''.
The reason is that it's mutable and therefore not suitable for building reliable and stable systems!
Composite state types are also supported in terms of other state objects.


[[State|< Back]]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[[Type converters|Next >]]
