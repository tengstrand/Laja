The decision to separate ''state'' and ''behavior'' allow us to focus more on the state creation process.
Instead of creating an object in ''one step'' by using a constructor, the object is created in ''several steps'' which gives a number of advantages:
* The state can be defined in a [http://en.wikipedia.org/wiki/Declarative_programming declarative] way so that ''equals'', ''hashCode'' and ''toString'' can be generated, letting us focus on the properties of each attribute.
* The [http://natureofcode.blogspot.se/2011/09/chained-creator-pattern.html chained creator] and/or [http://en.wikipedia.org/wiki/Builder_pattern builder pattern] is used to build state which ''improves the usability'' compared to a set of constructors (or even worse, an empty constructor with a bunch of [http://en.wikipedia.org/wiki/Mutator_method setters]!)
* The state can be explicitly validated before encapsulation takes place.
* An IllegalStateException is thrown if the state is not valid in the encapsulation step.
* Once encapsulated, the state can not be change from the outside of the object.
* The encapsulation step can be postponed so that validation and encapsulation can be performed by the caller.


The states are defined in ''state templates'' which is ordinary Java classes that can be compiled and type checked like any other Java code.
The state definition (template) lives in the same package as the generated code and is very clean and readable compared to having it in for example XML.
The templates is expected to be found in directory ''srcDir'', package ''statePackage'' in the project file, e.g. ''myproject.laja'':
<source>
#generateCdd([{
  srcDir: "{.}/main"
  outDir: "{..}/java-gen/main"
  statePackage: "com.myproject.state"
  behaviourPackage: "com.myproject.behaviour" }]
)
</source>

Example of valid state packages (in this example) are:
* com.myproject.state
* com.myproject.state.domain
* com.myproject.state.infrastructure.x''


[[Context|< Back]]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
[[Define state|Next >]]
