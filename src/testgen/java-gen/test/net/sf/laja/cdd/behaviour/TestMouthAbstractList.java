package net.sf.laja.cdd.behaviour;

import net.sf.laja.cdd.state.mouth.*;

import net.sf.laja.cdd.behaviour.mouth.CuteMouth;
import net.sf.laja.cdd.behaviour.mouth.CuteMouthList;

import java.util.*;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public abstract class TestMouthAbstractList implements List<TestMouth> {
    protected MouthStateList stateList;
    protected final List<TestMouth> list = new ArrayList<TestMouth>();

    public TestMouthAbstractList(TestMouth... list) {
        this.list.addAll(Arrays.asList(list));
    }

    public TestMouthAbstractList(List<TestMouth> list) {
        this.list.addAll(list);
    }

    public TestMouthAbstractList(MouthStateList stateList) {
        this.stateList = stateList;

        for (MouthState state : stateList) {
            MouthStateBuilder builder = new MouthStateBuilderImpl(state);
            TestMouth entry = (TestMouth) builder.as(new TestMouthFactory.TestMouthFactory_(builder));
            list.add(entry);
        }
    }

    public CuteMouthList asCuteMouthList() {
        List<CuteMouth> result = new ArrayList<CuteMouth>();
        for (TestMouth entry : list) {
            result.add(entry.asCuteMouth());
        }
        return new CuteMouthList(result);
    }

    public int size() {
        return list.size();
    }

    public boolean isEmpty() {
        return list.isEmpty();
    }

    public boolean contains(Object element) {
        return list.contains(element);
    }

    public Iterator<TestMouth> iterator() {
        return list.iterator();
    }

    public Object[] toArray() {
        return list.toArray();
    }

    public <TestMouth> TestMouth[] toArray(TestMouth[] array) {
        return list.toArray(array);
    }

    public boolean add(TestMouth element) {
        if (stateList != null) {
            stateList.add(element.getState(stateList));
        }
        return list.add(element);
    }

    public void add(int index, TestMouth element) {
        if (stateList != null) {
            stateList.add(index, element.getState(stateList));
        }
        list.add(index, element);
    }

    public boolean addAll(Collection<? extends TestMouth> collection) {
        if (stateList != null) {
            List newElements = new ArrayList(collection.size());
            for (TestMouth element : collection) {
                newElements.add(element.getState(stateList));
            }
            stateList.addAll(newElements);
        }
        return list.addAll(collection);
    }

    public boolean addAll(int index, Collection<? extends TestMouth> collection) {
        if (stateList != null) {
            List newElements = new ArrayList(collection.size());
            for (TestMouth element : collection) {
                newElements.add(element.getState(stateList));
            }
            stateList.addAll(index, newElements);
        }
        return list.addAll(index, collection);
    }

    public boolean remove(Object element) {
        if (!(element instanceof TestMouth)) {
            return false;
        }
        if (stateList != null) {
            stateList.remove(((TestMouth)element).getState(stateList));
        }
        return list.remove(element);
    }

    public boolean containsAll(Collection<?> collection) {
        return list.containsAll(collection);
    }

    public boolean removeAll(Collection<?> collection) {
        if (stateList != null) {
            List removedElements = new ArrayList(collection.size());
            List removedStateElements = new ArrayList(collection.size());
            for (Object element : collection) {
                if (element instanceof TestMouth) {
                    removedElements.add(element);
                    removedStateElements.add(((TestMouth)element).getState(stateList));
                }
            }
            stateList.removeAll(removedStateElements);
            return list.removeAll(removedElements);
        }
        return list.removeAll(collection);
    }

    public boolean retainAll(Collection<?> collection) {
        if (stateList != null) {
            List retainedElements = new ArrayList(collection.size());
            List retainedStateElements = new ArrayList(collection.size());
            for (Object element : collection) {
                if (element instanceof TestMouth) {
                    retainedElements.add(element);
                    retainedStateElements.add(((TestMouth)element).getState(stateList));
                }
            }
            stateList.retainAll(retainedStateElements);
            return list.retainAll(retainedElements);
        }
        return list.retainAll(collection);
    }

    public void clear() {
        if (stateList != null) {
            stateList.clear();
        }
        list.clear();
    }

    public TestMouth get(int index) {
        return list.get(index);
    }

    public TestMouth set(int index, TestMouth element) {
        if (stateList != null) {
            stateList.set(index, element.getState(stateList));
        }
        return list.set(index, element);
    }

    public TestMouth remove(int index) {
        if (stateList != null) {
            stateList.remove(index);
        }
        return list.remove(index);
    }

    public int indexOf(Object element) {
        return list.indexOf(element);
    }

    public int lastIndexOf(Object element) {
        return list.lastIndexOf(element);
    }

    public ListIterator<TestMouth> listIterator() {
        return list.listIterator();
    }

    public ListIterator<TestMouth> listIterator(int index) {
        return list.listIterator(index);
    }

    public List<TestMouth> subList(int fromIndex, int toIndex) {
        return list.subList(fromIndex, toIndex);
    }

    @Override
    public boolean equals(Object o) {
        return list.equals(o);
    }

    @Override
    public int hashCode() {
        return list.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{list=" + list + '}';
    }
}
