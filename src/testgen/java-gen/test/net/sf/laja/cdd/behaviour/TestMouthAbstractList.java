package net.sf.laja.cdd.behaviour;

import net.sf.laja.cdd.state.mouth.*;

import net.sf.laja.cdd.behaviour.mouth.CuteMouth;
import net.sf.laja.cdd.behaviour.mouth.CuteMouthList;

import java.util.*;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public abstract class TestMouthAbstractList implements List<TestMouth> {
    protected final MouthStateListBuilder stateListBuilder;
    protected final List<TestMouth> list = new ArrayList<TestMouth>();

    public TestMouthAbstractList(TestMouth... list) {
        this.list.addAll(Arrays.asList(list));

        stateListBuilder = new MouthStateListBuilder();
        for (TestMouth entry : list) {
            entry.addToList(stateListBuilder);
        }
    }

    public TestMouthAbstractList(List<TestMouth> list) {
        this.list.addAll(list);

        stateListBuilder = new MouthStateListBuilder();
        for (TestMouth entry : list) {
            entry.addToList(stateListBuilder);
        }
    }

    public TestMouthAbstractList(List<TestMouth> list, MouthStateListBuilder stateListBuilder) {
        this.list.addAll(list);
        this.stateListBuilder = stateListBuilder;
    }

    public TestMouthAbstractList(MouthStateList stateList) {
        stateListBuilder = new MouthStateListBuilder(stateList);

        for (MouthState state : stateList) {
            MouthStateBuilder builder = new MouthStateBuilderImpl(state);
            TestMouth entry = (TestMouth) builder.as(new TestMouthFactory.TestMouthFactory_(builder));
            list.add(entry);
        }
    }

    public CuteMouthList asCuteMouthList() {
        List<CuteMouth> result = new ArrayList<CuteMouth>();
        for (TestMouth entry : list) {
            result.add(entry.asCuteMouth());
        }
        return new CuteMouthList(result, stateListBuilder);
    }

    public void syncState() {
        list.clear();
        for (MouthStateBuilder builder : stateListBuilder.getStateBuilders()) {
            TestMouth entry = (TestMouth) builder.as(new TestMouthFactory.TestMouthFactory_(builder));
            list.add(entry);
        }
        stateListBuilder.syncState();
    }

    public int size() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.size();
    }

    public boolean isEmpty() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.isEmpty();
    }

    public boolean contains(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.contains(element);
    }

    public Iterator<TestMouth> iterator() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.iterator();
    }

    public Object[] toArray() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.toArray();
    }

    public <TestMouth> TestMouth[] toArray(TestMouth[] array) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.toArray(array);
    }

    public boolean add(TestMouth element) {
        element.addToList(stateListBuilder, this);
        return list.add(element);
    }

    public void add(int index, TestMouth element) {
        element.addToList(index, stateListBuilder, this);
        list.add(index, element);
    }

    public boolean addAll(Collection<? extends TestMouth> collection) {
        for (TestMouth element : collection) {
            element.addToList(stateListBuilder, this);
        }
        return list.addAll(collection);
    }

    public boolean addAll(int index, Collection<? extends TestMouth> collection) {
        MouthStateListBuilder statesToAdd = new MouthStateListBuilder();

        for (TestMouth element : collection) {
            element.addToList(statesToAdd, this);
        }
        stateListBuilder.addAll(index, statesToAdd, this);
        return list.addAll(index, collection);
    }

    public boolean remove(Object element) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (TestMouth is value based and MouthState is entity based). Try switch the list to an entity based list before performing the 'remove' operation");
    }

    public boolean containsAll(Collection<?> collection) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (TestMouth is value based and MouthState is entity based). Try switch the list to an entity based list before performing the 'containsAll' operation");
    }

    public boolean removeAll(Collection<?> collection) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (TestMouth is value based and MouthState is entity based). Try switch the list to an entity based list before performing the 'removeAll' operation");
    }

    public boolean retainAll(Collection<?> collection) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (TestMouth is value based and MouthState is entity based). Try switch the list to an entity based list before performing the 'retainAll' operation");
    }

    public void clear() {
        stateListBuilder.clear(this);
        list.clear();
    }

    public TestMouth get(int index) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.get(index);
    }

    public TestMouth set(int index, TestMouth element) {
        element.setInList(index, stateListBuilder, this);
        return list.set(index, element);
    }

    public TestMouth remove(int index) {
        stateListBuilder.remove(index, this);
        return list.remove(index);
    }

    public int indexOf(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.indexOf(element);
    }

    public int lastIndexOf(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.lastIndexOf(element);
    }

    public ListIterator<TestMouth> listIterator() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.listIterator();
    }

    public ListIterator<TestMouth> listIterator(int index) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.listIterator(index);
    }

    public List<TestMouth> subList(int fromIndex, int toIndex) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.subList(fromIndex, toIndex);
    }

    @Override
    public boolean equals(Object o) {
        return list.equals(o);
    }

    @Override
    public int hashCode() {
        return list.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{list=" + list + ", stateList=" + stateListBuilder + '}';
    }
}
