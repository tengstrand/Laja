package net.sf.laja.cdd.state.monster;

import net.sf.laja.cdd.state.Certificate;
import net.sf.laja.cdd.state.arm.ArmStateBuilder;
import net.sf.laja.cdd.state.arm.ArmStateBuilderImpl;
import net.sf.laja.cdd.state.head.HeadStateBuilder;
import net.sf.laja.cdd.state.head.HeadStateBuilderImpl;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class MonsterStateBuilderImpl implements MonsterStateBuilder {
    private Object encapsulator;
    private MonsterState state;
    private final Certificate certificate;
    private HeadStateBuilder headStateBuilder;
    private ArmStateBuilder leftArmStateBuilder;

    MonsterStateBuilderImpl() {
        state = new MonsterStateImpl();
        certificate = Certificate.get(this);
    }

    public MonsterStateBuilderImpl(MonsterState state) {
        this.state = state;
        certificate = Certificate.get(this);
    }

    public MonsterStateBuilderImpl(MonsterState state, Object encapsulator) {
        this(state);
        this.encapsulator = encapsulator;
    }

    public void withNumberOfLegs(int numberOfLegs) {
        state.setNumberOfLegs(numberOfLegs, encapsulator);
    }

    public void withNumberOfOwnWings(int numberOfOwnWings) {
        state.setNumberOfOwnWings(numberOfOwnWings, encapsulator);
    }

    public void withHead(HeadStateBuilder head) {
        state.setHead(head.getHeadState(certificate), encapsulator);
    }

    public void withLength(int length) {
        state.setLength(length, encapsulator);
    }

    public void withWeight(int weight) {
        state.setWeight(weight, encapsulator);
    }

    public void withColor(String color) {
        state.setColor(color, encapsulator);
    }

    public void withDecease(String decease) {
        state.setDecease(decease, encapsulator);
    }

    public void withHasEar(Boolean hasEar) {
        state.setHasEar(hasEar, encapsulator);
    }

    public void withHeadWeight(double headWeight) {
        state.setHeadWeight(headWeight, encapsulator);
    }

    public void withLeftArm(ArmStateBuilder leftArm) {
        state.setLeftArm(leftArm.getArmState(certificate), encapsulator);
    }

    public HeadStateBuilder getHeadStateBuilder() {
        if (headStateBuilder == null) {
            headStateBuilder = new HeadStateBuilderImpl(state.getHead());
        }
        return headStateBuilder;
    }

    public ArmStateBuilder getLeftArmStateBuilder() {
        if (leftArmStateBuilder == null) {
            leftArmStateBuilder = new ArmStateBuilderImpl(state.getLeftArm());
        }
        return leftArmStateBuilder;
    }

    public boolean isValid() {
        return state.isValid();
    }

    public Object as(MonsterBehaviourFactory factory, Object... args) {
        return factory.create(state, args);
    }

    public MonsterState getMonsterState(net.sf.laja.cdd.state.Certificate certificate) {
        return state;
    }

    @Override
    public int hashCode() {
        return state.hashCode();
    }
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof MonsterStateComparable)) return false;

        return true;
    }

    @Override
    public String toString() {
        return state.toString();
    }
}
