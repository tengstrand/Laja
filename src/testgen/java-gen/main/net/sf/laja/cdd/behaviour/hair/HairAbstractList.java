package net.sf.laja.cdd.behaviour.hair;

import net.sf.laja.cdd.state.hair.*;

import java.util.*;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public abstract class HairAbstractList implements List<Hair> {
    protected final HairStateListBuilder stateListBuilder;
    protected final List<Hair> list = new ArrayList<Hair>();

    public HairAbstractList(Hair... list) {
        this.list.addAll(Arrays.asList(list));

        stateListBuilder = new HairStateListBuilder();
        for (Hair entry : list) {
            entry.addToList(stateListBuilder);
        }
    }

    public HairAbstractList(List<Hair> list) {
        this.list.addAll(list);

        stateListBuilder = new HairStateListBuilder();
        for (Hair entry : list) {
            entry.addToList(stateListBuilder);
        }
    }

    public HairAbstractList(List<Hair> list, HairStateListBuilder stateListBuilder) {
        this.list.addAll(list);
        this.stateListBuilder = stateListBuilder;
    }

    public HairAbstractList(HairStateList stateList) {
        stateListBuilder = new HairStateListBuilder(stateList);

        for (HairState state : stateList) {
            HairStateBuilder builder = new HairStateBuilderImpl(state);
            Hair entry = (Hair) builder.as(new HairFactory.HairFactory_(builder));
            list.add(entry);
        }
    }

    public void syncState() {
        list.clear();
        for (HairStateBuilder builder : stateListBuilder.getStateBuilders()) {
            Hair entry = (Hair) builder.as(new HairFactory.HairFactory_(builder));
            list.add(entry);
        }
        stateListBuilder.syncState();
    }

    public int size() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.size();
    }

    public boolean isEmpty() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.isEmpty();
    }

    public boolean contains(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.contains(element);
    }

    public Iterator<Hair> iterator() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.iterator();
    }

    public Object[] toArray() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.toArray();
    }

    public <Hair> Hair[] toArray(Hair[] array) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.toArray(array);
    }

    public boolean add(Hair element) {
        element.addToList(stateListBuilder, this);
        return list.add(element);
    }

    public void add(int index, Hair element) {
        element.addToList(index, stateListBuilder, this);
        list.add(index, element);
    }

    public boolean addAll(Collection<? extends Hair> collection) {
        for (Hair element : collection) {
            element.addToList(stateListBuilder, this);
        }
        return list.addAll(collection);
    }

    public boolean addAll(int index, Collection<? extends Hair> collection) {
        HairStateListBuilder statesToAdd = new HairStateListBuilder();

        for (Hair element : collection) {
            element.addToList(statesToAdd, this);
        }
        stateListBuilder.addAll(index, statesToAdd, this);
        return list.addAll(index, collection);
    }

    public boolean remove(Object element) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (Hair is value based and HairState is entity based). Try switch the list to an entity based list before performing the 'remove' operation");
    }

    public boolean containsAll(Collection<?> collection) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (Hair is value based and HairState is entity based). Try switch the list to an entity based list before performing the 'containsAll' operation");
    }

    public boolean removeAll(Collection<?> collection) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (Hair is value based and HairState is entity based). Try switch the list to an entity based list before performing the 'removeAll' operation");
    }

    public boolean retainAll(Collection<?> collection) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (Hair is value based and HairState is entity based). Try switch the list to an entity based list before performing the 'retainAll' operation");
    }

    public void clear() {
        stateListBuilder.clear(this);
        list.clear();
    }

    public Hair get(int index) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.get(index);
    }

    public Hair set(int index, Hair element) {
        element.setInList(index, stateListBuilder, this);
        return list.set(index, element);
    }

    public Hair remove(int index) {
        stateListBuilder.remove(index, this);
        return list.remove(index);
    }

    public int indexOf(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.indexOf(element);
    }

    public int lastIndexOf(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.lastIndexOf(element);
    }

    public ListIterator<Hair> listIterator() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.listIterator();
    }

    public ListIterator<Hair> listIterator(int index) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.listIterator(index);
    }

    public List<Hair> subList(int fromIndex, int toIndex) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.subList(fromIndex, toIndex);
    }

    @Override
    public boolean equals(Object o) {
        return list.equals(o);
    }

    @Override
    public int hashCode() {
        return list.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{list=" + list + ", stateList=" + stateListBuilder + '}';
    }
}
