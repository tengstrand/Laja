package net.sf.laja.cdd.state.monster;

import net.sf.laja.cdd.state.Certificate;
import net.sf.laja.cdd.state.arm.ArmState;
import net.sf.laja.cdd.state.head.HeadState;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class MonsterStateImpl implements MonsterState {
    protected int numberOfLegs;
    protected int numberOfOwnWings;
    protected HeadState head;
    protected int length; // (optional))
    protected int weight;
    protected String color;
    protected String decease;
    protected Boolean hasEar;
    protected double headWeight;
    protected ArmState leftArm;

    private boolean _encapsulated = false;
    private Object _encapsulator;

    MonsterStateImpl() {
    }

    public MonsterStateImpl(Certificate certificate) {
        this();
        if (certificate == null) {
            throw new IllegalArgumentException("Certificate can not be null");
        }
    }

    public static MonsterStateBuilder build() {
        return new MonsterStateBuilderImpl();
    }

    public static MonsterStateBuilder build(MonsterState state) {
        return new MonsterStateBuilderImpl(state);
    }

    public Certificate certificate() {
        return Certificate.get(this);
    }

    public boolean isValid() {
        return isValid(_encapsulated);
    }

    public boolean isValidAsEncapsulated() {
        return isValid(true);
    }

    private boolean isValid(boolean encapsulated) {
        if ((head == null || !head.isValid())
                || color == null
                || decease == null
                || hasEar == null
                || (leftArm == null || !leftArm.isValid())) {
            return false;
        }
        return true;
    }

    // Getters
    public int getNumberOfLegs() { return numberOfLegs; }
    public int getNumberOfOwnWings() { return numberOfOwnWings; }
    public HeadState getHead() { return head; }
    public int getLength() { return length; }
    public int getWeight() { return weight; }
    public String getColor() { return color; }
    public String getDecease() { return decease; }
    public Boolean getHasEar() { return hasEar; }
    public double getHeadWeight() { return headWeight; }
    public ArmState getLeftArm() { return leftArm; }

    // Setters
    public void setNumberOfLegs(int numberOfLegs, Object mutator) { checkMutator(mutator); this.numberOfLegs = numberOfLegs; }
    public void setNumberOfOwnWings(int numberOfOwnWings, Object mutator) { checkMutator(mutator); this.numberOfOwnWings = numberOfOwnWings; }
    public void setHead(HeadState head, Object mutator) { checkMutator(mutator); this.head = head; }
    public void setLength(int length, Object mutator) { checkMutator(mutator); this.length = length; }
    public void setWeight(int weight, Object mutator) { checkMutator(mutator); this.weight = weight; }
    public void setColor(String color, Object mutator) { checkMutator(mutator); this.color = color; }
    public void setDecease(String decease, Object mutator) { checkMutator(mutator); this.decease = decease; }
    public void setHasEar(Boolean hasEar, Object mutator) { checkMutator(mutator); this.hasEar = hasEar; }
    public void setHeadWeight(double headWeight, Object mutator) { checkMutator(mutator); this.headWeight = headWeight; }
    public void setLeftArm(ArmState leftArm, Object mutator) { checkMutator(mutator); this.leftArm = leftArm; }

    private void checkMutator(Object mutator) {
        if (mutator != _encapsulator) {
            throw new IllegalStateException("The state can only be mutated by current instance of " + (_encapsulator == null ? null : _encapsulator.getClass().getName()));
        }
    }

    public void encapsulate() {
        _encapsulated = true;
    }

    public void setEncapsulator(Object encapsulator) {
        _encapsulator = encapsulator;
    }

    @Override
    public boolean equals(Object that) {
       if (this == that) return true;
       if (!(that instanceof MonsterStateComparable)) return false;

       return true;
    }

    public boolean equalsValue(Object value) {
        if (this == value) return true;
        if (value == null || getClass() != value.getClass()) return false;

        MonsterStateImpl state = (MonsterStateImpl)value;

        if (numberOfLegs != state.getNumberOfLegs()) return false;
        if (numberOfOwnWings != state.getNumberOfOwnWings()) return false;
        if (head != null ? !head.equals(state.getHead()) : state.getHead() != null) return false;
        if (length != state.getLength()) return false;
        if (weight != state.getWeight()) return false;
        if (color != null ? !color.equals(state.getColor()) : state.getColor() != null) return false;
        if (decease != null ? !decease.equals(state.getDecease()) : state.getDecease() != null) return false;
        if (hasEar != null ? !hasEar.equals(state.getHasEar()) : state.getHasEar() != null) return false;
        if (headWeight != state.getHeadWeight()) return false;
        if (leftArm != null ? !leftArm.equals(state.getLeftArm()) : state.getLeftArm() != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = numberOfLegs;
        result = 31 * result + numberOfOwnWings;
        result = 31 * result + (head != null ? head.hashCode() : 0);
        result = 31 * result + length;
        result = 31 * result + weight;
        result = 31 * result + (color != null ? color.hashCode() : 0);
        result = 31 * result + (decease != null ? decease.hashCode() : 0);
        result = 31 * result + (hasEar != null ? hasEar.hashCode() : 0);
        result = 31 * result + (int)headWeight;
        result = 31 * result + (leftArm != null ? leftArm.hashCode() : 0);

        return result;
    }

    @Override
    public String toString() {
        return "{numberOfLegs=" + numberOfLegs +
                ", numberOfOwnWings=" + numberOfOwnWings +
                ", head=" + head +
                ", length=" + length +
                ", weight=" + weight +
                ", color=" + (color == null ? null : '\'' + color + '\'' ) +
                ", decease=" + (decease == null ? null : '\'' + decease + '\'' ) +
                ", hasEar=" + hasEar +
                ", headWeight=" + headWeight +
                ", leftArm=" + leftArm + "}";
    }
}
