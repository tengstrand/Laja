package net.sf.laja.cdd.behaviour.brow;

import net.sf.laja.cdd.state.brow.*;

import java.util.*;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public abstract class BrowAbstractList implements List<Brow> {
    protected final BrowStateListBuilder stateListBuilder;
    protected final List<Brow> list = new ArrayList<Brow>();

    public BrowAbstractList(Brow... list) {
        this.list.addAll(Arrays.asList(list));

        stateListBuilder = new BrowStateListBuilder();
        for (Brow entry : list) {
            entry.addToList(stateListBuilder);
        }
    }

    public BrowAbstractList(List<Brow> list) {
        this.list.addAll(list);

        stateListBuilder = new BrowStateListBuilder();
        for (Brow entry : list) {
            entry.addToList(stateListBuilder);
        }
    }

    public BrowAbstractList(List<Brow> list, BrowStateListBuilder stateListBuilder) {
        this.list.addAll(list);
        this.stateListBuilder = stateListBuilder;
    }

    public BrowAbstractList(BrowStateList stateList) {
        stateListBuilder = new BrowStateListBuilder(stateList);

        for (BrowState state : stateList) {
            BrowStateBuilder builder = new BrowStateBuilderImpl(state);
            Brow entry = (Brow) builder.as(new BrowFactory.BrowFactory_(builder));
            list.add(entry);
        }
    }

    public void syncState() {
        list.clear();
        for (BrowStateBuilder builder : stateListBuilder.getStateBuilders()) {
            Brow entry = (Brow) builder.as(new BrowFactory.BrowFactory_(builder));
            list.add(entry);
        }
        stateListBuilder.syncState();
    }

    public int size() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.size();
    }

    public boolean isEmpty() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.isEmpty();
    }

    public boolean contains(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.contains(element);
    }

    public Iterator<Brow> iterator() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.iterator();
    }

    public Object[] toArray() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.toArray();
    }

    public <Brow> Brow[] toArray(Brow[] array) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.toArray(array);
    }

    public boolean add(Brow element) {
        element.addToList(stateListBuilder, this);
        return list.add(element);
    }

    public void add(int index, Brow element) {
        element.addToList(index, stateListBuilder, this);
        list.add(index, element);
    }

    public boolean addAll(Collection<? extends Brow> collection) {
        for (Brow element : collection) {
            element.addToList(stateListBuilder, this);
        }
        return list.addAll(collection);
    }

    public boolean addAll(int index, Collection<? extends Brow> collection) {
        BrowStateListBuilder statesToAdd = new BrowStateListBuilder();

        for (Brow element : collection) {
            element.addToList(statesToAdd, this);
        }
        stateListBuilder.addAll(index, statesToAdd, this);
        return list.addAll(index, collection);
    }

    public boolean remove(Object element) {
        if (!(element instanceof Brow)) {
            return false;
        }
        ((Brow)element).removeFromList(stateListBuilder, this);
        return list.remove(element);
    }

    public boolean containsAll(Collection<?> collection) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.containsAll(collection);
    }

    public boolean removeAll(Collection<?> collection) {
        for (Object element : collection) {
            if (element instanceof Brow) {
                ((Brow)element).removeFromList(stateListBuilder, this);
            }
        }
        return list.removeAll(collection);
    }

    public boolean retainAll(Collection<?> collection) {
        BrowStateListBuilder retainStates = new BrowStateListBuilder();

        for (Object element : collection) {
            if (element instanceof Brow) {
                ((Brow)element).addToList(retainStates, this);
            }
        }
        stateListBuilder.retainAll(retainStates, this);
        return list.retainAll(collection);
    }

    public void clear() {
        stateListBuilder.clear(this);
        list.clear();
    }

    public Brow get(int index) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.get(index);
    }

    public Brow set(int index, Brow element) {
        element.setInList(index, stateListBuilder, this);
        return list.set(index, element);
    }

    public Brow remove(int index) {
        stateListBuilder.remove(index, this);
        return list.remove(index);
    }

    public int indexOf(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.indexOf(element);
    }

    public int lastIndexOf(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.lastIndexOf(element);
    }

    public ListIterator<Brow> listIterator() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.listIterator();
    }

    public ListIterator<Brow> listIterator(int index) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.listIterator(index);
    }

    public List<Brow> subList(int fromIndex, int toIndex) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.subList(fromIndex, toIndex);
    }

    @Override
    public boolean equals(Object o) {
        return list.equals(o);
    }

    @Override
    public int hashCode() {
        return list.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{list=" + list + ", stateList=" + stateListBuilder + '}';
    }
}
