package net.sf.laja.cdd.state.foot;

import net.sf.laja.cdd.state.toe.ToeStateList;
import net.sf.laja.cdd.state.toe.ToeStateList;
import net.sf.laja.cdd.state.toe.ToeStateListImpl;
import net.sf.laja.cdd.state.Certificate;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public class FootStateImpl implements FootState {
    protected int area;
    protected ToeStateList toes;

    private boolean _encapsulated = false;

    FootStateImpl() {
        toes = ToeStateListImpl.emptyList();
    }

    public static FootStateBuilder build() {
        return new FootStateBuilderImpl();
    }

    public static FootStateBuilder build(FootState state) {
        return new FootStateBuilderImpl(state);
    }

    public boolean isValid() {
        return isValid(_encapsulated);
    }

    public boolean isValidAsEncapsulated() {
        return isValid(true);
    }

    private boolean isValid(boolean encapsulated) {
        if ((toes == null || !toes.isValid())) {
            return false;
        }
        return true;
    }

    // Getters
    public int getArea() { return area; }
    public ToeStateList getToes() { return toes; }

    // Setters
    public void setArea(int area) { this.area = area; }
    public void setToes(ToeStateList toes) { this.toes.clear(); this.toes.addAll(toes); }

    public void encapsulate() {
        _encapsulated = true;
        toes.encapsulate();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        FootStateImpl state = (FootStateImpl)o;

        if (area != state.getArea()) return false;
        if (toes != null ? !toes.equals(state.toes) : state.toes != null) return false;

        return true;
    }

    public boolean valueEquals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        FootStateImpl state = (FootStateImpl)o;

        if (area != state.getArea()) return false;
        if (toes != null ? !toes.equals(state.toes) : state.toes != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = area;
        result = 31 * result + (toes != null ? toes.hashCode() : 0);

        return result;
    }

    public int valueHashCode() {
        int result = area;
        result = 31 * result + (toes != null ? toes.hashCode() : 0);

        return result;
    }

    @Override
    public String toString() {
        return "{area=" + area +
                ", toes=" + toes + "}";
    }
}
