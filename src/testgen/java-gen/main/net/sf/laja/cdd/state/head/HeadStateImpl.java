package net.sf.laja.cdd.state.head;

import net.sf.laja.cdd.state.eye.EyeState;
import net.sf.laja.cdd.state.eye.EyeState;
import net.sf.laja.cdd.state.eye.EyeState;
import net.sf.laja.cdd.state.nose.NoseStateList;
import net.sf.laja.cdd.state.forehead.ForeheadState;
import net.sf.laja.cdd.state.ear.EarStateList;
import net.sf.laja.cdd.state.mouth.MouthStateList;
import net.sf.laja.cdd.state.nose.NoseStateArrayList;
import net.sf.laja.cdd.state.ear.EarStateArrayList;
import net.sf.laja.cdd.state.mouth.MouthStateArrayList;
import net.sf.laja.cdd.state.Certificate;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class HeadStateImpl implements HeadState {
    protected double headWeightInGrams;
    protected EyeState leftEye;
    protected EyeState rightEye;
    protected EyeState midEye; // (optional)
    protected NoseStateList noses;
    protected ForeheadState forehead;
    protected int length; // (optional)
    protected boolean a;
    protected byte b;
    protected short c;
    protected char d;
    protected int e; // (hidden)
    protected long f;
    protected float g;
    protected double h;
    protected EarStateList ears; // (optional)
    protected MouthStateList mouths;

    private boolean _encapsulated = false;
    private Object _encapsulator;

    HeadStateImpl() {
        noses = NoseStateArrayList.emptyList();
        ears = EarStateArrayList.emptyList();
        mouths = MouthStateArrayList.emptyList();
    }

    public HeadStateImpl(Certificate certificate) {
        this();
        if (certificate == null) {
            throw new IllegalArgumentException("Certificate can not be null");
        }
    }

    public static HeadStateBuilder build() {
        return new HeadStateBuilderImpl();
    }

    public static HeadStateBuilder build(HeadState state) {
        return new HeadStateBuilderImpl(state);
    }

    public Certificate certificate() {
        return Certificate.get(this);
    }

    public boolean isValid() {
        return isValid(_encapsulated);
    }

    public boolean isValidAsEncapsulated() {
        return isValid(true);
    }

    private boolean isValid(boolean encapsulated) {
        if ((leftEye == null || !leftEye.isValid())
                || (rightEye == null || !rightEye.isValid())
                || (midEye != null && !midEye.isValid())
                || (noses == null || !noses.isValid())
                || (forehead == null || !forehead.isValid())
                || (ears != null && !ears.isValid())
                || (mouths == null || !mouths.isValid())) {
            return false;
        }
        return headWeightInGrams >= 0.5;
    }

    // Getters
    public double getHeadWeightInGrams() { return headWeightInGrams; }
    public EyeState getLeftEye() { return leftEye; }
    public EyeState getRightEye() { return rightEye; }
    public EyeState getMidEye() { return midEye; }
    public NoseStateList getNoses() { return noses; }
    public ForeheadState getForehead() { return forehead; }
    public int getLength() { return length; }
    public boolean getA() { return a; }
    public byte getB() { return b; }
    public short getC() { return c; }
    public char getD() { return d; }
    public int getE() { return e; }
    public long getF() { return f; }
    public float getG() { return g; }
    public double getH() { return h; }
    public EarStateList getEars() { return ears; }
    public MouthStateList getMouths() { return mouths; }

    // Setters
    public void setHeadWeightInGrams(double headWeightInGrams, Object mutator) { checkMutator(mutator); this.headWeightInGrams = headWeightInGrams; }
    public void setLeftEye(EyeState leftEye, Object mutator) { checkMutator(mutator); this.leftEye = leftEye; }
    public void setRightEye(EyeState rightEye, Object mutator) { checkMutator(mutator); this.rightEye = rightEye; }
    public void setMidEye(EyeState midEye, Object mutator) { checkMutator(mutator); this.midEye = midEye; }
    public void setNoses(NoseStateList noses, Object mutator) { checkMutator(mutator); this.noses.clear(); this.noses.addAll(noses); }
    public void setForehead(ForeheadState forehead, Object mutator) { checkMutator(mutator); this.forehead = forehead; }
    public void setLength(int length, Object mutator) { checkMutator(mutator); this.length = length; }
    public void setA(boolean a, Object mutator) { checkMutator(mutator); this.a = a; }
    public void setB(byte b, Object mutator) { checkMutator(mutator); this.b = b; }
    public void setC(short c, Object mutator) { checkMutator(mutator); this.c = c; }
    public void setD(char d, Object mutator) { checkMutator(mutator); this.d = d; }
    public void setE(int e, Object mutator) { checkMutator(mutator); this.e = e; }
    public void setF(long f, Object mutator) { checkMutator(mutator); this.f = f; }
    public void setG(float g, Object mutator) { checkMutator(mutator); this.g = g; }
    public void setH(double h, Object mutator) { checkMutator(mutator); this.h = h; }
    public void setEars(EarStateList ears, Object mutator) { checkMutator(mutator); this.ears.clear(); this.ears.addAll(ears); }
    public void setMouths(MouthStateList mouths, Object mutator) { checkMutator(mutator); this.mouths.clear(); this.mouths.addAll(mouths); }

    private void checkMutator(Object mutator) {
        if (mutator != _encapsulator) {
            throw new IllegalStateException("The state can only be mutated by current instance of " + (_encapsulator == null ? null : _encapsulator.getClass().getName()));
        }
    }

    public void encapsulate() {
        _encapsulated = true;
    }

    public void setEncapsulator(Object encapsulator) {
        _encapsulator = encapsulator;
    }

    @Override
    public boolean equals(Object that) {
       if (this == that) return true;
       if (!(that instanceof HeadStateComparable)) return false;

       return true;
    }

    public boolean equalsValue(Object value) {
        if (this == value) return true;
        if (value == null || getClass() != value.getClass()) return false;

        HeadStateImpl state = (HeadStateImpl)value;

        if (headWeightInGrams != state.getHeadWeightInGrams()) return false;
        if (leftEye != null ? !leftEye.equals(state.getLeftEye()) : state.getLeftEye() != null) return false;
        if (rightEye != null ? !rightEye.equals(state.getRightEye()) : state.getRightEye() != null) return false;
        if (midEye != null ? !midEye.equals(state.getMidEye()) : state.getMidEye() != null) return false;
        if (noses != null ? !noses.equals(state.getNoses()) : state.getNoses() != null) return false;
        if (forehead != null ? !forehead.equals(state.getForehead()) : state.getForehead() != null) return false;
        if (length != state.getLength()) return false;
        if (a != state.getA()) return false;
        if (b != state.getB()) return false;
        if (c != state.getC()) return false;
        if (d != state.getD()) return false;
        if (e != state.getE()) return false;
        if (f != state.getF()) return false;
        if (g != state.getG()) return false;
        if (h != state.getH()) return false;
        if (ears != null ? !ears.equals(state.getEars()) : state.getEars() != null) return false;
        if (mouths != null ? !mouths.equals(state.getMouths()) : state.getMouths() != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = (int)headWeightInGrams;
        result = 31 * result + (leftEye != null ? leftEye.hashCode() : 0);
        result = 31 * result + (rightEye != null ? rightEye.hashCode() : 0);
        result = 31 * result + (midEye != null ? midEye.hashCode() : 0);
        result = 31 * result + (forehead != null ? forehead.hashCode() : 0);
        result = 31 * result + length;
        result = 31 * result + (a ? 1 : 0);
        result = 31 * result + b;
        result = 31 * result + c;
        result = 31 * result + d;
        result = 31 * result + e;
        result = 31 * result + (int)(f ^ (f >>> 32));
        result = 31 * result + (int)g;
        result = 31 * result + (int)h;

        return result;
    }

    @Override
    public String toString() {
        return "{headWeightInGrams=" + headWeightInGrams +
                ", leftEye=" + leftEye +
                ", rightEye=" + rightEye +
                ", midEye=" + midEye +
                ", noses=" + noses +
                ", forehead=" + forehead +
                ", length=" + length +
                ", a=" + a +
                ", b=" + b +
                ", c=" + c +
                ", d=" + d +
                ", e=" + e +
                ", f=" + f +
                ", g=" + g +
                ", h=" + h +
                ", ears=" + ears +
                ", mouths=" + mouths + "}";
    }
}
