package net.sf.laja.cdd.state.xhand;

import net.sf.laja.cdd.state.finger.FingerState;
import net.sf.laja.cdd.state.nail.NailState;
import net.sf.laja.cdd.state.finger.FingerState;
import net.sf.laja.cdd.state.finger.FingerStateImpl;
import net.sf.laja.cdd.state.nail.NailState;
import net.sf.laja.cdd.state.nail.NailStateImpl;
import net.sf.laja.cdd.state.finger.FingerState;
import net.sf.laja.cdd.state.finger.FingerStateImpl;
import net.sf.laja.cdd.state.Certificate;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class XHandStateImpl implements XHandState {
    protected String color;

    private boolean _encapsulated = false;
    private Object _encapsulator;

    XHandStateImpl() {
    }

    public XHandStateImpl(Certificate certificate) {
        this();
        if (certificate == null) {
            throw new IllegalArgumentException("Certificate can not be null");
        }
    }

    public static XHandStateBuilder build() {
        return new XHandStateBuilderImpl();
    }

    public static XHandStateBuilder build(XHandState state) {
        return new XHandStateBuilderImpl(state);
    }

    public Certificate certificate() {
        return Certificate.get(this);
    }

    public boolean isValid() {
        return isValid(_encapsulated);
    }

    public boolean isValidAsEncapsulated() {
        return isValid(true);
    }

    private boolean isValid(boolean encapsulated) {
        if (!getFingerState().isValid()) {
            return false;
        }
        if (color == null) {
            return false;
        }
        return true;
    }

    // Getters
    public String getColor() { return color; }

    // Setters
    public void setColor(String color, Object mutator) { checkMutator(mutator); this.color = color; }

    private void checkMutator(Object mutator) {
        if (mutator != _encapsulator) {
            throw new IllegalStateException("The state can only be mutated by current instance of " + (_encapsulator == null ? null : _encapsulator.getClass().getName()));
        }
    }

    public void encapsulate() {
        _encapsulated = true;
    }

    public void setEncapsulator(Object encapsulator) {
        _encapsulator = encapsulator;
    }

    public FingerState getFingerState() {
        return new FingerState() {
            public Certificate certificate() { return certificate(); }

            public String getColor() { return XHandStateImpl.this.getColor(); }
            public void setColor(String color, Object mutator) { XHandStateImpl.this.setColor(color, mutator); }

            public void encapsulate() { XHandStateImpl.this.encapsulate(); }
            public void setEncapsulator(Object encapsulator) { XHandStateImpl.this.setEncapsulator(encapsulator); }

            public boolean isValid() {
                return isValid(_encapsulated);
            }

            public boolean isValidAsEncapsulated() {
                return isValid(true);
            }

            private boolean isValid(boolean encapsulated) {
                if (!getNailState().isValid()) {
                    return false;
                }
                if (color == null) {
                    return false;
                }
                return true;
            }

            public NailState getNailState() {
                return new NailState() {
                    public Certificate certificate() { return certificate(); }

                    public String getColor() { return XHandStateImpl.this.getColor(); }
                    public void setColor(String color, Object mutator) { XHandStateImpl.this.setColor(color, mutator); }

                    public void encapsulate() { XHandStateImpl.this.encapsulate(); }
                    public void setEncapsulator(Object encapsulator) { XHandStateImpl.this.setEncapsulator(encapsulator); }

                    public boolean isValid() {
                        return isValid(_encapsulated);
                    }

                    public boolean isValidAsEncapsulated() {
                        return isValid(true);
                    }

                    private boolean isValid(boolean encapsulated) {
                        if (color == null) {
                            return false;
                        }
                        return "red".equals(color);
                    }

                    @Override
                    public boolean equals(Object that) {
                       if (this == that) return true;
                       if (!(that instanceof XHandStateComparable)) return false;

                       return true;
                    }

                    public boolean equalsValue(Object value) {
                        if (this == value) return true;
                        if (value == null || getClass() != value.getClass()) return false;

                        NailStateImpl state = (NailStateImpl)value;

                        if (color != null ? !color.equals(state.getColor()) : state.getColor() != null) return false;

                        return true;
                    }

                    @Override
                    public int hashCode() {
                        int result = color != null ? color.hashCode() : 0;

                        return result;
                    }

                    @Override
                    public String toString() {
                        return "{color=" + color + "}";
                    }
                };
            }

            @Override
            public boolean equals(Object that) {
               if (this == that) return true;
               if (!(that instanceof XHandStateComparable)) return false;

               return true;
            }

            public boolean equalsValue(Object value) {
                if (this == value) return true;
                if (value == null || getClass() != value.getClass()) return false;

                NailStateImpl state = (NailStateImpl)value;

                if (color != null ? !color.equals(state.getColor()) : state.getColor() != null) return false;

                return true;
            }

            @Override
            public int hashCode() {
                int result = color != null ? color.hashCode() : 0;

                return result;
            }

            @Override
            public String toString() {
                return "{color=" + color + "}";
            }
        };
    }

    @Override
    public boolean equals(Object that) {
       if (this == that) return true;
       if (!(that instanceof XHandStateComparable)) return false;

       return true;
    }

    public boolean equalsValue(Object value) {
        if (this == value) return true;
        if (value == null || getClass() != value.getClass()) return false;

        XHandStateImpl state = (XHandStateImpl)value;

        if (color != null ? !color.equals(state.getColor()) : state.getColor() != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = color != null ? color.hashCode() : 0;

        return result;
    }

    @Override
    public String toString() {
        return "{color=" + color + "}";
    }
}
