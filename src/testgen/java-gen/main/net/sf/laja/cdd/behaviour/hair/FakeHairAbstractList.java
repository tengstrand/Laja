package net.sf.laja.cdd.behaviour.hair;

import net.sf.laja.cdd.state.hair.*;

import java.util.*;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public abstract class FakeHairAbstractList implements List<FakeHair> {
    protected HairStateList stateList;
    protected final List<FakeHair> list = new ArrayList<FakeHair>();

    public FakeHairAbstractList(FakeHair... list) {
        this.list.addAll(Arrays.asList(list));
    }

    public FakeHairAbstractList(List<FakeHair> list) {
        this.list.addAll(list);
    }

    public FakeHairAbstractList(HairStateList stateList) {
        this.stateList = stateList;

        for (HairState state : stateList) {
            HairStateBuilder builder = new HairStateBuilderImpl(state);
            FakeHair entry = (FakeHair) builder.as(new HairFactory.FakeHairFactory_(builder));
            list.add(entry);
        }
    }

    public int size() {
        return list.size();
    }

    public boolean isEmpty() {
        return list.isEmpty();
    }

    public boolean contains(Object element) {
        return list.contains(element);
    }

    public Iterator<FakeHair> iterator() {
        return list.iterator();
    }

    public Object[] toArray() {
        return list.toArray();
    }

    public <FakeHair> FakeHair[] toArray(FakeHair[] array) {
        return list.toArray(array);
    }

    public boolean add(FakeHair element) {
        if (stateList != null) {
            stateList.add(element.getState(stateList));
        }
        return list.add(element);
    }

    public void add(int index, FakeHair element) {
        if (stateList != null) {
            stateList.add(index, element.getState(stateList));
        }
        list.add(index, element);
    }

    public boolean addAll(Collection<? extends FakeHair> collection) {
        if (stateList != null) {
            List newElements = new ArrayList(collection.size());
            for (FakeHair element : collection) {
                newElements.add(element.getState(stateList));
            }
            stateList.addAll(newElements);
        }
        return list.addAll(collection);
    }

    public boolean addAll(int index, Collection<? extends FakeHair> collection) {
        if (stateList != null) {
            List newElements = new ArrayList(collection.size());
            for (FakeHair element : collection) {
                newElements.add(element.getState(stateList));
            }
            stateList.addAll(index, newElements);
        }
        return list.addAll(index, collection);
    }

    public boolean remove(Object element) {
        if (!(element instanceof FakeHair)) {
            return false;
        }
        if (stateList != null) {
            stateList.remove(((FakeHair)element).getState(stateList));
        }
        return list.remove(element);
    }

    public boolean containsAll(Collection<?> collection) {
        return list.containsAll(collection);
    }

    public boolean removeAll(Collection<?> collection) {
        if (stateList != null) {
            List removedElements = new ArrayList(collection.size());
            List removedStateElements = new ArrayList(collection.size());
            for (Object element : collection) {
                if (element instanceof FakeHair) {
                    removedElements.add(element);
                    removedStateElements.add(((FakeHair)element).getState(stateList));
                }
            }
            stateList.removeAll(removedStateElements);
            return list.removeAll(removedElements);
        }
        return list.removeAll(collection);
    }

    public boolean retainAll(Collection<?> collection) {
        if (stateList != null) {
            List retainedElements = new ArrayList(collection.size());
            List retainedStateElements = new ArrayList(collection.size());
            for (Object element : collection) {
                if (element instanceof FakeHair) {
                    retainedElements.add(element);
                    retainedStateElements.add(((FakeHair)element).getState(stateList));
                }
            }
            stateList.retainAll(retainedStateElements);
            return list.retainAll(retainedElements);
        }
        return list.retainAll(collection);
    }

    public void clear() {
        if (stateList != null) {
            stateList.clear();
        }
        list.clear();
    }

    public FakeHair get(int index) {
        return list.get(index);
    }

    public FakeHair set(int index, FakeHair element) {
        if (stateList != null) {
            stateList.set(index, element.getState(stateList));
        }
        return list.set(index, element);
    }

    public FakeHair remove(int index) {
        if (stateList != null) {
            stateList.remove(index);
        }
        return list.remove(index);
    }

    public int indexOf(Object element) {
        return list.indexOf(element);
    }

    public int lastIndexOf(Object element) {
        return list.lastIndexOf(element);
    }

    public ListIterator<FakeHair> listIterator() {
        return list.listIterator();
    }

    public ListIterator<FakeHair> listIterator(int index) {
        return list.listIterator(index);
    }

    public List<FakeHair> subList(int fromIndex, int toIndex) {
        return list.subList(fromIndex, toIndex);
    }

    @Override
    public boolean equals(Object o) {
        return list.equals(o);
    }

    @Override
    public int hashCode() {
        return list.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{list=" + list + '}';
    }
}
