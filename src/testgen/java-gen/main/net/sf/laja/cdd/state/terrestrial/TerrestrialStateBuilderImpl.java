package net.sf.laja.cdd.state.terrestrial;

import net.sf.laja.cdd.state.Certificate;
import net.sf.laja.cdd.state.eye.EyeStateBuilder;
import net.sf.laja.cdd.state.eye.EyeStateBuilderImpl;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public class TerrestrialStateBuilderImpl implements TerrestrialStateBuilder {
    private boolean encapsulated;
    private TerrestrialState state;
    private final Certificate certificate;
    private boolean trusted;
    private EyeStateBuilder leftEyeStateBuilder;
    private EyeStateBuilder rightEyeStateBuilder;
    private EyeStateBuilder middleEyeStateBuilder;

    TerrestrialStateBuilderImpl() {
        state = new TerrestrialStateImpl();
        certificate = Certificate.get(this);
    }

    public TerrestrialStateBuilderImpl(TerrestrialState state) {
        this.state = state;
        certificate = Certificate.get(this);
        trusted = true;
    }

    public void withNumberOfLegs(int numberOfLegs) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setNumberOfLegs(numberOfLegs, null);
    }

    public void withNumberOfWings(int numberOfWings) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setNumberOfWings(numberOfWings, null);
    }

    public void withLeftEye(EyeStateBuilder leftEye) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setLeftEye(leftEye.getEyeState(certificate), null);
    }

    public void withRightEye(EyeStateBuilder rightEye) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setRightEye(rightEye.getEyeState(certificate), null);
    }

    public void withMiddleEye(EyeStateBuilder middleEye) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setMiddleEye(middleEye.getEyeState(certificate), null);
    }

    public void withWeight(int weight) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setWeight(weight, null);
    }

    public EyeStateBuilder getLeftEyeStateBuilder() {
        if (leftEyeStateBuilder == null) {
            leftEyeStateBuilder = new EyeStateBuilderImpl(state.getLeftEye());
        }
        return leftEyeStateBuilder;
    }

    public EyeStateBuilder getRightEyeStateBuilder() {
        if (rightEyeStateBuilder == null) {
            rightEyeStateBuilder = new EyeStateBuilderImpl(state.getRightEye());
        }
        return rightEyeStateBuilder;
    }

    public EyeStateBuilder getMiddleEyeStateBuilder() {
        if (middleEyeStateBuilder == null) {
            middleEyeStateBuilder = new EyeStateBuilderImpl(state.getMiddleEye());
        }
        return middleEyeStateBuilder;
    }

    private void throwEncapsulationException() {
        throw new IllegalStateException("The state has been encapsulated and can only be changed from within behaviour classes of type \"Terrestrial\"");
    }

    public boolean isValid() {
        return state.isValid();
    }

    public Object as(TerrestrialStateBehaviourFactory factory, Object... args) {
        Object encapsulatedObject = factory.create(state, args);
        if (!trusted) {
            encapsulated = true;
        }
        return encapsulatedObject;
    }

    public TerrestrialState getTerrestrialState(net.sf.laja.cdd.state.Certificate certificate) {
        return state;
    }
}
