package net.sf.laja.cdd.state.arm;

import net.sf.laja.cdd.state.hand.HandStateList;
import net.sf.laja.cdd.state.hand.HandStateList;
import net.sf.laja.cdd.state.hand.HandStateListImpl;
import net.sf.laja.cdd.state.Certificate;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public class ArmStateImpl implements ArmState {
    protected int armLength = -1; // (optional)
    protected double armWeight;
    protected HandStateList hands;

    private boolean _encapsulated = false;
    private Object _encapsulator;

    ArmStateImpl() {
        hands = HandStateListImpl.emptyList();
    }

    public ArmStateImpl(Certificate certificate) {
        this();
        if (certificate == null) {
            throw new IllegalArgumentException("Certificate can not be null");
        }
    }

    public static ArmStateBuilder build() {
        return new ArmStateBuilderImpl();
    }

    public static ArmStateBuilder build(ArmState state) {
        return new ArmStateBuilderImpl(state);
    }

    public Certificate certificate() {
        return Certificate.get(this);
    }

    public boolean isValid() {
        return isValid(_encapsulated);
    }

    public boolean isValidAsEncapsulated() {
        return isValid(true);
    }

    private boolean isValid(boolean encapsulated) {
        if ((hands == null || !hands.isValid())) {
            return false;
        }
        return true;
    }

    // Getters
    public int getArmLength() { return armLength; }
    public double getArmWeight() { return armWeight; }
    public HandStateList getHands() { return hands; }

    // Setters
    public void setArmLength(int armLength, Object mutator) { checkMutator(mutator); this.armLength = armLength; }
    public void setArmWeight(double armWeight, Object mutator) { checkMutator(mutator); this.armWeight = armWeight; }
    public void setHands(HandStateList hands, Object mutator) { checkMutator(mutator); this.hands.clear(); this.hands.addAll(hands); }

    private void checkMutator(Object mutator) {
        if (mutator != _encapsulator) {
            throw new IllegalStateException("The state can only be mutated by current instance of " + (_encapsulator == null ? null : _encapsulator.getClass().getName()));
        }
    }


    public void encapsulate() {
        _encapsulated = true;
    }

    public void setEncapsulator(Object encapsulator) {
        _encapsulator = encapsulator;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ArmStateImpl state = (ArmStateImpl)o;

        if (armLength != state.getArmLength()) return false;
        if (armWeight != state.getArmWeight()) return false;
        if (hands != null ? !hands.equals(state.hands) : state.hands != null) return false;

        return true;
    }

    public boolean valueEquals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ArmStateImpl state = (ArmStateImpl)o;

        if (armLength != state.getArmLength()) return false;
        if (armWeight != state.getArmWeight()) return false;
        if (hands != null ? !hands.equals(state.hands) : state.hands != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = armLength;
        result = 31 * result + (int)armWeight;
        result = 31 * result + (hands != null ? hands.hashCode() : 0);

        return result;
    }

    public int valueHashCode() {
        int result = armLength;
        result = 31 * result + (int)armWeight;
        result = 31 * result + (hands != null ? hands.hashCode() : 0);

        return result;
    }

    @Override
    public String toString() {
        return "{armLength=" + armLength +
                ", armWeight=" + armWeight +
                ", hands=" + hands + "}";
    }
}
