package net.sf.laja.cdd.state.fleck;

import net.sf.laja.cdd.state.Certificate;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class FleckStateImpl implements FleckState {
    protected int area; // (hide)
    protected String color; // (hide)

    private boolean _encapsulated = false;
    private Object _encapsulator;

    FleckStateImpl() {
    }

    public FleckStateImpl(Certificate certificate) {
        this();
        if (certificate == null) {
            throw new IllegalArgumentException("Certificate can not be null");
        }
    }

    public static FleckStateBuilder build() {
        return new FleckStateBuilderImpl();
    }

    public static FleckStateBuilder build(FleckState state) {
        return new FleckStateBuilderImpl(state);
    }

    public Certificate certificate() {
        return Certificate.get(this);
    }

    public boolean isValid() {
        return isValid(_encapsulated);
    }

    public boolean isValidAsEncapsulated() {
        return isValid(true);
    }

    private boolean isValid(boolean encapsulated) {
        if ((encapsulated && color == null)) {
            return false;
        }
        return true;
    }

    // Getters
    public int getArea() { return area; }
    public String getColor() { return color; }

    // Setters
    public void setArea(int area, Object mutator) { checkMutator(mutator); this.area = area; }
    public void setColor(String color, Object mutator) { checkMutator(mutator); this.color = color; }

    private void checkMutator(Object mutator) {
        if (mutator != _encapsulator) {
            throw new IllegalStateException("The state can only be mutated by current instance of " + (_encapsulator == null ? null : _encapsulator.getClass().getName()));
        }
    }


    public void encapsulate() {
        _encapsulated = true;
    }

    public void setEncapsulator(Object encapsulator) {
        _encapsulator = encapsulator;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        FleckStateImpl state = (FleckStateImpl)o;

        if (area != state.getArea()) return false;
        if (color != null ? !color.equals(state.color) : state.color != null) return false;

        return true;
    }

    public boolean valueEquals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        FleckStateImpl state = (FleckStateImpl)o;

        if (area != state.getArea()) return false;
        if (color != null ? !color.equals(state.color) : state.color != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = area;
        result = 31 * result + (color != null ? color.hashCode() : 0);

        return result;
    }

    public int valueHashCode() {
        int result = area;
        result = 31 * result + (color != null ? color.hashCode() : 0);

        return result;
    }

    @Override
    public String toString() {
        return "{area=" + area +
                ", color='" + color + '\'' + "}";
    }
}
