package net.sf.laja.example.repository.state;

import net.sf.laja.example.repository.state.AddressStateList;
import net.sf.laja.example.repository.state.AddressStateImpl;
import net.sf.laja.example.repository.state.ZipcodeStateImpl;
import net.sf.laja.example.repository.state.AddressStateArrayList;
import net.sf.laja.example.repository.state.Certificate;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class CustomerStateImpl implements CustomerState {
    protected long ssn; // (key)
    protected String givenName;
    protected String surname; // (optional)
    protected int age;
    protected String pet; // (optional)
    protected int addressId;
    protected String streetName;
    protected int zipcode;
    protected String city;
    protected AddressStateList oldAddresses; // (optional)

    private boolean _encapsulated = false;
    private Object _encapsulator;

    CustomerStateImpl() {
        oldAddresses = AddressStateArrayList.emptyList();
    }

    public CustomerStateImpl(Certificate certificate) {
        this();
        if (certificate == null) {
            throw new IllegalArgumentException("Certificate can not be null");
        }
    }

    public static CustomerStateBuilder build() {
        return new CustomerStateBuilderImpl();
    }

    public static CustomerStateBuilder build(CustomerState state) {
        return new CustomerStateBuilderImpl(state);
    }

    public Certificate certificate() {
        return Certificate.get(this);
    }

    public boolean isValid() {
        return isValid(_encapsulated);
    }

    public boolean isValidAsEncapsulated() {
        return isValid(true);
    }

    private boolean isValid(boolean encapsulated) {
        if (!getAddressState().isValid()) {
            return false;
        }
        if (givenName == null
                || streetName == null
                || city == null
                || (oldAddresses != null && !oldAddresses.isValid())) {
            return false;
        }
        return age >= 0 && ssn >= 190000000000L;
    }

    // Getters
    public long getSsn() { return ssn; }
    public String getGivenName() { return givenName; }
    public String getSurname() { return surname; }
    public int getAge() { return age; }
    public String getPet() { return pet; }
    public int getAddressId() { return addressId; }
    public String getStreetName() { return streetName; }
    public int getZipcode() { return zipcode; }
    public String getCity() { return city; }
    public AddressStateList getOldAddresses() { return oldAddresses; }

    // Setters
    public void setSsn(long ssn, Object mutator) { checkMutator(mutator); this.ssn = ssn; }
    public void setGivenName(String givenName, Object mutator) { checkMutator(mutator); this.givenName = givenName; }
    public void setSurname(String surname, Object mutator) { checkMutator(mutator); this.surname = surname; }
    public void setAge(int age, Object mutator) { checkMutator(mutator); this.age = age; }
    public void setPet(String pet, Object mutator) { checkMutator(mutator); this.pet = pet; }
    public void setAddressId(int addressId, Object mutator) { checkMutator(mutator); this.addressId = addressId; }
    public void setStreetName(String streetName, Object mutator) { checkMutator(mutator); this.streetName = streetName; }
    public void setZipcode(int zipcode, Object mutator) { checkMutator(mutator); this.zipcode = zipcode; }
    public void setCity(String city, Object mutator) { checkMutator(mutator); this.city = city; }
    public void setOldAddresses(AddressStateList oldAddresses, Object mutator) { checkMutator(mutator); this.oldAddresses.clear(); this.oldAddresses.addAll(oldAddresses); }

    private void checkMutator(Object mutator) {
        if (mutator != _encapsulator) {
            throw new IllegalStateException("The state can only be mutated by current instance of " + (_encapsulator == null ? null : _encapsulator.getClass().getName()));
        }
    }

    public void encapsulate() {
        _encapsulated = true;
    }

    public void setEncapsulator(Object encapsulator) {
        _encapsulator = encapsulator;
    }

    public AddressState getAddressState() {
        return new AddressState() {
            public Certificate certificate() { return certificate(); }

            public int getAddressId() { return CustomerStateImpl.this.getAddressId(); }
            public void setAddressId(int addressId, Object mutator) { CustomerStateImpl.this.setAddressId(addressId, mutator); }

            public String getStreetName() { return CustomerStateImpl.this.getStreetName(); }
            public void setStreetName(String streetName, Object mutator) { CustomerStateImpl.this.setStreetName(streetName, mutator); }

            public int getZipcode() { return CustomerStateImpl.this.getZipcode(); }
            public void setZipcode(int zipcode, Object mutator) { CustomerStateImpl.this.setZipcode(zipcode, mutator); }

            public String getCity() { return CustomerStateImpl.this.getCity(); }
            public void setCity(String city, Object mutator) { CustomerStateImpl.this.setCity(city, mutator); }

            public void encapsulate() { CustomerStateImpl.this.encapsulate(); }
            public void setEncapsulator(Object encapsulator) { CustomerStateImpl.this.setEncapsulator(encapsulator); }

            public boolean isValid() {
                return isValid(_encapsulated);
            }

            public boolean isValidAsEncapsulated() {
                return isValid(true);
            }

            private boolean isValid(boolean encapsulated) {
                if (!getZipcodeState().isValid()) {
                    return false;
                }
                if (streetName == null
                        || city == null) {
                    return false;
                }
                return city.length() > 0 && Character.isLetter(city.subSequence(0, 1).charAt(0));
            }

            public ZipcodeState getZipcodeState() {
                return new ZipcodeState() {
                    public Certificate certificate() { return certificate(); }

                    public int getZipcode() { return CustomerStateImpl.this.getZipcode(); }
                    public void setZipcode(int zipcode, Object mutator) { CustomerStateImpl.this.setZipcode(zipcode, mutator); }

                    public void encapsulate() { CustomerStateImpl.this.encapsulate(); }
                    public void setEncapsulator(Object encapsulator) { CustomerStateImpl.this.setEncapsulator(encapsulator); }

                    public boolean isValid() {
                        return isValid(_encapsulated);
                    }

                    public boolean isValidAsEncapsulated() {
                        return isValid(true);
                    }

                    private boolean isValid(boolean encapsulated) {
                        return true;
                    }

                    @Override
                    public boolean equals(Object that) {
                       if (this == that) return true;
                       if (!(that instanceof CustomerStateComparable)) return false;

                       return true;
                    }

                    public boolean equalsValue(Object value) {
                        if (this == value) return true;
                        if (value == null || getClass() != value.getClass()) return false;

                        ZipcodeStateImpl state = (ZipcodeStateImpl)value;

                        if (zipcode != state.getZipcode()) return false;

                        return true;
                    }

                    @Override
                    public int hashCode() {
                        int result = zipcode;

                        return result;
                    }

                    @Override
                    public String toString() {
                        return "{zipcode=" + zipcode + "}";
                    }
                };
            }

            @Override
            public boolean equals(Object that) {
               if (this == that) return true;
               if (!(that instanceof CustomerStateComparable)) return false;

               return true;
            }

            public boolean equalsValue(Object value) {
                if (this == value) return true;
                if (value == null || getClass() != value.getClass()) return false;

                ZipcodeStateImpl state = (ZipcodeStateImpl)value;

                if (zipcode != state.getZipcode()) return false;

                return true;
            }

            @Override
            public int hashCode() {
                int result = zipcode;

                return result;
            }

            @Override
            public String toString() {
                return "{zipcode=" + zipcode + "}";
            }
        };
    }

    @Override
    public boolean equals(Object that) {
       if (this == that) return true;
       if (!(that instanceof CustomerStateComparable)) return false;

       return true;
    }

    public boolean equalsValue(Object value) {
        if (this == value) return true;
        if (value == null || getClass() != value.getClass()) return false;

        CustomerStateImpl state = (CustomerStateImpl)value;

        if (ssn != state.getSsn()) return false;
        if (givenName != null ? !givenName.equals(state.getGivenName()) : state.getGivenName() != null) return false;
        if (surname != null ? !surname.equals(state.getSurname()) : state.getSurname() != null) return false;
        if (age != state.getAge()) return false;
        if (pet != null ? !pet.equals(state.getPet()) : state.getPet() != null) return false;
        if (streetName != null ? !streetName.equals(state.getStreetName()) : state.getStreetName() != null) return false;
        if (zipcode != state.getZipcode()) return false;
        if (city != null ? !city.equals(state.getCity()) : state.getCity() != null) return false;
        if (oldAddresses != null ? !oldAddresses.equals(state.getOldAddresses()) : state.getOldAddresses() != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = (int)(ssn ^ (ssn >>> 32));

        return result;
    }

    @Override
    public String toString() {
        return "{ssn=" + ssn +
                ", givenName=" + (givenName == null ? null : '\'' + givenName + '\'' ) +
                ", surname=" + (surname == null ? null : '\'' + surname + '\'' ) +
                ", age=" + age +
                ", pet=" + (pet == null ? null : '\'' + pet + '\'' ) +
                ", addressId=" + addressId +
                ", streetName=" + (streetName == null ? null : '\'' + streetName + '\'' ) +
                ", zipcode=" + zipcode +
                ", city=" + (city == null ? null : '\'' + city + '\'' ) +
                ", oldAddresses=" + oldAddresses + "}";
    }
}
