package net.sf.laja.example.repository.state;

import net.sf.laja.example.repository.state.AddressStateBehaviourFactory;
import net.sf.laja.example.repository.state.AddressState;
import net.sf.laja.example.repository.state.ZipcodeStateBehaviourFactory;
import net.sf.laja.example.repository.state.ZipcodeState;
import net.sf.laja.example.repository.state.AddressStateListBuilder;
import net.sf.laja.example.repository.state.Certificate;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public class CustomerStateBuilderImpl implements CustomerStateBuilder {
    private boolean encapsulated;
    private CustomerState state;
    private final Certificate certificate;
    private boolean trusted;
    private AddressStateListBuilder oldAddressesStateListBuilder;

    CustomerStateBuilderImpl() {
        state = new CustomerStateImpl();
        certificate = Certificate.get(this);
    }

    public CustomerStateBuilderImpl(CustomerState state) {
        this.state = state;
        certificate = Certificate.get(this);
        trusted = true;
    }

    public void withSsn(long ssn) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setSsn(ssn);
    }

    public void withGivenName(String givenName) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setGivenName(givenName);
    }

    public void withSurname(String surname) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setSurname(surname);
    }

    public void withAge(int age) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setAge(age);
    }

    public void withPet(String pet) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setPet(pet);
    }

    public void withAddressId(int addressId) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setAddressId(addressId);
    }

    public void withStreetName(String streetName) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setStreetName(streetName);
    }

    public void withZipcode(int zipcode) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setZipcode(zipcode);
    }

    public void withCity(String city) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setCity(city);
    }

    public void withOldAddresses(net.sf.laja.example.repository.state.AddressStateListBuilder listBuilder) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setOldAddresses(listBuilder.getStateList(certificate));
    }

    public AddressStateListBuilder getOldAddressesStateListBuilder() {
        if (oldAddressesStateListBuilder == null) {
            oldAddressesStateListBuilder = new AddressStateListBuilder(state.getOldAddresses());
        }
        return oldAddressesStateListBuilder;
    }

    private void throwEncapsulationException() {
        throw new IllegalStateException("The state has been encapsulated and can only be changed from within behaviour classes of type \"Customer\"");
    }

    public boolean isValid() {
        return state.isValid();
    }

    public Object as(CustomerStateBehaviourFactory factory, Object... args) {
        Object encapsulatedObject = factory.create(state, args);
        if (!trusted) {
            encapsulated = true;
        }
        return encapsulatedObject;
    }

    public Object as(AddressStateBehaviourFactory factory, Object... args) {
        Object encapsulatedObject = factory.create(state, args);
        if (!trusted) {
            encapsulated = true;
        }
        return encapsulatedObject;
    }

    public Object as(ZipcodeStateBehaviourFactory factory, Object... args) {
        Object encapsulatedObject = factory.create(state, args);
        if (!trusted) {
            encapsulated = true;
        }
        return encapsulatedObject;
    }

    public CustomerState getCustomerState(net.sf.laja.example.repository.state.Certificate certificate) {
        return state;
    }

    public AddressState getAddressState(Certificate certificate) {
        return state;
    }

    public ZipcodeState getZipcodeState(Certificate certificate) {
        return state;
    }
}
