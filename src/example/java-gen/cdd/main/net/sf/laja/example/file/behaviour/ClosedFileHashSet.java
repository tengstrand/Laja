package net.sf.laja.example.file.behaviour;

import net.sf.laja.example.file.state.*;
import net.sf.laja.example.file.behaviour.*;

import net.sf.laja.example.file.behaviour.text.TextFile;
import net.sf.laja.example.file.behaviour.text.TextFileSet;
import net.sf.laja.example.file.behaviour.text.TextFileHashSet;
import java.util.*;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class ClosedFileHashSet implements ClosedFileSet, RandomAccess, Cloneable, java.io.Serializable {
    protected FileStateSet stateSet;
    protected final Set<ClosedFile> set;

    public ClosedFileHashSet(ClosedFile... array) {
        this.set = new HashSet<ClosedFile>();
        this.set.addAll(Arrays.asList(array));
    }

    public ClosedFileHashSet(Collection<ClosedFile> collection) {
        this.set = new HashSet<ClosedFile>();
        this.set.addAll(collection);
    }

    public ClosedFileHashSet(FileStateSet stateSet, Directory directory) {
        this.stateSet = stateSet;
        this.stateSet.encapsulate(this);
        Set<ClosedFile> elements = new HashSet<ClosedFile>(stateSet.size());

        for (FileState state : stateSet) {
            FileStateBuilder builder = new FileStateBuilderImpl(state);
            ClosedFile entry = (ClosedFile) builder.as(new FileFactory.ClosedFileFactory_(builder), directory);
            elements.add(entry);
        }
        this.set = new StateInSyncSet(stateSet, elements);
    }

    public WritableFileHashSet asWritableFileSet(Directory directory, boolean createIfNotExists) {
        Set<WritableFile> result = new HashSet<WritableFile>();
        for (ClosedFile entry : set) {
            result.add(entry.asWritableFile(directory, createIfNotExists));
        }
        return new WritableFileHashSet(result);
    }

    public TextFileHashSet asTextFileSet() {
        Set<TextFile> result = new HashSet<TextFile>();
        for (ClosedFile entry : set) {
            result.add(entry.asTextFile());
        }
        return new TextFileHashSet(result);
    }

    public class StateInSyncSet extends HashSet<ClosedFile> {
        private FileStateSet stateSet;

        public StateInSyncSet(FileStateSet stateSet, Set<ClosedFile> elements) {
            this.stateSet = stateSet;
            this.stateSet.clear();
            super.addAll(elements);
        }

        @Override
        public boolean add(ClosedFile element) {
            stateSet.throwExceptionIfNotEncapsulatedBy(ClosedFileHashSet.this);
            stateSet.add(element.getState(stateSet.certificate()));
            return super.add(element);
        }

        @Override
        public boolean addAll(Collection<? extends ClosedFile> collection) {
            stateSet.throwExceptionIfNotEncapsulatedBy(ClosedFileHashSet.this);
            boolean modified = super.addAll(collection);

            for (ClosedFile element : collection) {
                stateSet.add(element.getState(stateSet.certificate()));
            }
            return modified;
        }

        @Override
        public boolean remove(Object element) {
            stateSet.throwExceptionIfNotEncapsulatedBy(ClosedFileHashSet.this);
            if (!(element instanceof ClosedFile)) {
                return false;
            }
            boolean removedState = stateSet.remove(((ClosedFile) element).getState(stateSet.certificate()));
            boolean removedElement = super.remove(element);

            if (removedState != removedElement) {
                throw new IllegalStateException("The state and behaviour is out of sync. Please report this bug to the Laja project!");
            }
            return removedElement;
        }

        @Override
        public boolean removeAll(Collection<?> collection) {
            stateSet.throwExceptionIfNotEncapsulatedBy(ClosedFileHashSet.this);
            Set states = new HashSet(collection.size());
            Set elements = new HashSet(collection.size());
            for (Object element : collection) {
                if (element instanceof ClosedFile) {
                    elements.add(element);
                    states.add(((ClosedFile)element).getState(stateSet.certificate()));
                }
            }
            boolean modified = super.removeAll(elements);
            stateSet.removeAll(states);

            return modified;
        }

        @Override
        public boolean retainAll(Collection<?> collection) {
            stateSet.throwExceptionIfNotEncapsulatedBy(ClosedFileHashSet.this);
            Set states = new HashSet(collection.size());
            Set elements = new HashSet(collection.size());
            for (Object element : collection) {
                if (element instanceof ClosedFile) {
                    elements.add(element);
                    states.add(((ClosedFile)element).getState(stateSet.certificate()));
                }
            }
            boolean modified = super.retainAll(elements);
            stateSet.retainAll(states);

            return modified;
        }

        @Override
        public void clear() {
            stateSet.throwExceptionIfNotEncapsulatedBy(ClosedFileHashSet.this);
            stateSet.clear();
            super.clear();
        }
    }

    public int size() {
        return set.size();
    }

    public boolean isEmpty() {
        return set.isEmpty();
    }

    public boolean contains(Object element) {
        return set.contains(element);
    }

    public Iterator<ClosedFile> iterator() {
        return set.iterator();
    }

    public Object[] toArray() {
        return set.toArray();
    }

    public <ClosedFile> ClosedFile[] toArray(ClosedFile[] array) {
        return set.toArray(array);
    }

    public boolean add(ClosedFile element) {
        return set.add(element);
    }

    public boolean addAll(Collection<? extends ClosedFile> collection) {
        return set.addAll(collection);
    }

    public boolean remove(Object element) {
        if (!(element instanceof ClosedFile)) {
            return false;
        }
        return set.remove(element);
    }

    public boolean containsAll(Collection<?> collection) {
        return set.containsAll(collection);
    }

    public boolean removeAll(Collection<?> collection) {
        return set.removeAll(collection);
    }

    public boolean retainAll(Collection<?> collection) {
        return set.retainAll(collection);
    }

    public void clear() {
        set.clear();
    }

    @Override
    public boolean equals(Object o) {
        return set.equals(o);
    }

    @Override
    public int hashCode() {
        return set.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{" + set + '}';
    }
}
