package net.sf.laja.example.car.behaviour;

import net.sf.laja.example.car.state.*;
import net.sf.laja.example.car.behaviour.*;
import java.util.*;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class OwnerArrayList implements OwnerList, RandomAccess, Cloneable, java.io.Serializable {
    protected OwnerStateList stateList;
    protected final List<Owner> list;

    public OwnerArrayList(Owner... list) {
        this.list = new ArrayList<Owner>();
        this.list.addAll(Arrays.asList(list));
    }

    public OwnerArrayList(Collection<Owner> list) {
        this.list = new ArrayList<Owner>();
        this.list.addAll(list);
    }

    public OwnerArrayList(OwnerStateList stateList) {
        this.stateList = stateList;
        this.stateList.encapsulate(this);
        List<Owner> elements = new ArrayList<Owner>(stateList.size());

        for (OwnerState state : stateList) {
            OwnerStateBuilder builder = new OwnerStateBuilderImpl(state);
            Owner entry = (Owner) builder.as(new OwnerFactory.OwnerFactory_(builder));
            elements.add(entry);
        }
        this.list = new StateInSyncList(stateList, elements);
    }

    public class StateInSyncList extends ArrayList<Owner> {
        private final OwnerStateList stateList;

        public StateInSyncList(OwnerStateList stateList, List<Owner> elements) {
            this.stateList = stateList;
            super.addAll(elements);
        }

        @Override
        public boolean add(Owner element) {
            stateList.throwExceptionIfNotEncapsulatedBy(OwnerArrayList.this);
            stateList.add(element.getState(stateList));
            return super.add(element);
        }

        @Override
        public void add(int index, Owner element) {
            stateList.throwExceptionIfNotEncapsulatedBy(OwnerArrayList.this);
            stateList.add(index, element.getState(stateList));
            super.add(index, element);
        }

        @Override
        public boolean addAll(Collection<? extends Owner> collection) {
            stateList.throwExceptionIfNotEncapsulatedBy(OwnerArrayList.this);
            boolean modified = super.addAll(collection);

            for (Owner element : collection) {
                stateList.add(element.getState(stateList));
            }
            return modified;
        }

        @Override
        public boolean addAll(int index, Collection<? extends Owner> collection) {
            stateList.throwExceptionIfNotEncapsulatedBy(OwnerArrayList.this);
            boolean modified = super.addAll(index, collection);

            List elements = new ArrayList(collection.size());
            for (Owner element : collection) {
                elements.add(element.getState(stateList));
            }
            stateList.addAll(index, elements);

            return modified;
        }

        @Override
        public boolean remove(Object element) {
            stateList.throwExceptionIfNotEncapsulatedBy(OwnerArrayList.this);
            if (!(element instanceof Owner)) {
                return false;
            }
            stateList.remove(((Owner) element).getState(stateList));

            return super.remove(element);
        }

        @Override
        public boolean removeAll(Collection<?> collection) {
            stateList.throwExceptionIfNotEncapsulatedBy(OwnerArrayList.this);
            List states = new ArrayList(collection.size());
            List elements = new ArrayList(collection.size());
            for (Object element : collection) {
                if (element instanceof Owner) {
                    elements.add(element);
                    states.add(((Owner)element).getState(stateList));
                }
            }
            boolean modified = super.removeAll(elements);
            stateList.removeAll(states);

            return modified;
        }

        @Override
        public boolean retainAll(Collection<?> collection) {
            stateList.throwExceptionIfNotEncapsulatedBy(OwnerArrayList.this);
            List states = new ArrayList(collection.size());
            List elements = new ArrayList(collection.size());
            for (Object element : collection) {
                if (element instanceof Owner) {
                    elements.add(element);
                    states.add(((Owner)element).getState(stateList));
                }
            }
            boolean modified = super.retainAll(elements);
            stateList.retainAll(states);

            return modified;
        }

        @Override
        public void clear() {
            stateList.throwExceptionIfNotEncapsulatedBy(OwnerArrayList.this);
            stateList.clear();
            super.clear();
        }

        @Override
        public Owner set(int index, Owner element) {
            stateList.throwExceptionIfNotEncapsulatedBy(OwnerArrayList.this);
            stateList.set(index, element.getState(stateList));
            return super.set(index, element);
        }

        @Override
        public Owner remove(int index) {
            stateList.throwExceptionIfNotEncapsulatedBy(OwnerArrayList.this);
            stateList.remove(index);
            return super.remove(index);
        }
    }

    public int size() {
        return list.size();
    }

    public boolean isEmpty() {
        return list.isEmpty();
    }

    public boolean contains(Object element) {
        return list.contains(element);
    }

    public Iterator<Owner> iterator() {
        return list.iterator();
    }

    public Object[] toArray() {
        return list.toArray();
    }

    public <Owner> Owner[] toArray(Owner[] array) {
        return list.toArray(array);
    }

    public boolean add(Owner element) {
        return list.add(element);
    }

    public void add(int index, Owner element) {
        list.add(index, element);
    }

    public boolean addAll(Collection<? extends Owner> collection) {
        return list.addAll(collection);
    }

    public boolean addAll(int index, Collection<? extends Owner> collection) {
        return list.addAll(index, collection);
    }

    public boolean remove(Object element) {
        if (!(element instanceof Owner)) {
            return false;
        }
        return list.remove(element);
    }

    public boolean containsAll(Collection<?> collection) {
        return list.containsAll(collection);
    }

    public boolean removeAll(Collection<?> collection) {
        return list.removeAll(collection);
    }

    public boolean retainAll(Collection<?> collection) {
        return list.retainAll(collection);
    }

    public void clear() {
        list.clear();
    }

    public Owner get(int index) {
        return list.get(index);
    }

    public Owner set(int index, Owner element) {
        return list.set(index, element);
    }

    public Owner remove(int index) {
        return list.remove(index);
    }

    public int indexOf(Object element) {
        return list.indexOf(element);
    }

    public int lastIndexOf(Object element) {
        return list.lastIndexOf(element);
    }

    public ListIterator<Owner> listIterator() {
        return list.listIterator();
    }

    public ListIterator<Owner> listIterator(int index) {
        return list.listIterator(index);
    }

    public List<Owner> subList(int fromIndex, int toIndex) {
        return list.subList(fromIndex, toIndex);
    }

    @Override
    public boolean equals(Object o) {
        return list.equals(o);
    }

    @Override
    public int hashCode() {
        return list.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{" + list + '}';
    }
}
