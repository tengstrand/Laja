package net.sf.laja.example.repository.behaviour.domain;

import net.sf.laja.example.repository.state.*;

import java.util.*;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public abstract class CustomerAbstractList implements List<Customer> {
    protected final CustomerStateListBuilder stateListBuilder;
    protected final List<Customer> list = new ArrayList<Customer>();

    public CustomerAbstractList(Customer... list) {
        this.list.addAll(Arrays.asList(list));

        stateListBuilder = new CustomerStateListBuilder();
        for (Customer entry : list) {
            entry.addToList(stateListBuilder);
        }
    }

    public CustomerAbstractList(List<Customer> list) {
        this.list.addAll(list);

        stateListBuilder = new CustomerStateListBuilder();
        for (Customer entry : list) {
            entry.addToList(stateListBuilder);
        }
    }

    public CustomerAbstractList(List<Customer> list, CustomerStateListBuilder stateListBuilder) {
        this.list.addAll(list);
        this.stateListBuilder = stateListBuilder;
    }

    public CustomerAbstractList(CustomerStateList stateList) {
        stateListBuilder = new CustomerStateListBuilder(stateList);

        for (CustomerState state : stateList) {
            CustomerStateBuilder builder = new CustomerStateBuilderImpl(state);
            Customer entry = (Customer) builder.as(new CustomerFactory.CustomerFactory_(builder));
            list.add(entry);
        }
    }

    public void syncState() {
        list.clear();
        for (CustomerStateBuilder builder : stateListBuilder.getStateBuilders()) {
            Customer entry = (Customer) builder.as(new CustomerFactory.CustomerFactory_(builder));
            list.add(entry);
        }
        stateListBuilder.syncState();
    }

    public int size() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.size();
    }

    public boolean isEmpty() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.isEmpty();
    }

    public boolean contains(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.contains(element);
    }

    public Iterator<Customer> iterator() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.iterator();
    }

    public Object[] toArray() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.toArray();
    }

    public <Customer> Customer[] toArray(Customer[] array) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.toArray(array);
    }

    public boolean add(Customer element) {
        element.addToList(stateListBuilder, this);
        return list.add(element);
    }

    public void add(int index, Customer element) {
        element.addToList(index, stateListBuilder, this);
        list.add(index, element);
    }

    public boolean addAll(Collection<? extends Customer> collection) {
        for (Customer element : collection) {
            element.addToList(stateListBuilder, this);
        }
        return list.addAll(collection);
    }

    public boolean addAll(int index, Collection<? extends Customer> collection) {
        CustomerStateListBuilder statesToAdd = new CustomerStateListBuilder();

        for (Customer element : collection) {
            element.addToList(statesToAdd, this);
        }
        stateListBuilder.addAll(index, statesToAdd, this);
        return list.addAll(index, collection);
    }

    public boolean remove(Object element) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (Customer is value based and CustomerState is entity based). Try switch the list to an entity based list before performing the 'remove' operation");
    }

    public boolean containsAll(Collection<?> collection) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (Customer is value based and CustomerState is entity based). Try switch the list to an entity based list before performing the 'containsAll' operation");
    }

    public boolean removeAll(Collection<?> collection) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (Customer is value based and CustomerState is entity based). Try switch the list to an entity based list before performing the 'removeAll' operation");
    }

    public boolean retainAll(Collection<?> collection) {
        throw new UnsupportedOperationException("The state can only be mutated via an entity based list (Customer is value based and CustomerState is entity based). Try switch the list to an entity based list before performing the 'retainAll' operation");
    }

    public void clear() {
        stateListBuilder.clear(this);
        list.clear();
    }

    public Customer get(int index) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.get(index);
    }

    public Customer set(int index, Customer element) {
        element.setInList(index, stateListBuilder, this);
        return list.set(index, element);
    }

    public Customer remove(int index) {
        stateListBuilder.remove(index, this);
        return list.remove(index);
    }

    public int indexOf(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.indexOf(element);
    }

    public int lastIndexOf(Object element) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.lastIndexOf(element);
    }

    public ListIterator<Customer> listIterator() {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.listIterator();
    }

    public ListIterator<Customer> listIterator(int index) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.listIterator(index);
    }

    public List<Customer> subList(int fromIndex, int toIndex) {
        stateListBuilder.throwExceptionIfOutOfSync(this);
        return list.subList(fromIndex, toIndex);
    }

    @Override
    public boolean equals(Object o) {
        return list.equals(o);
    }

    @Override
    public int hashCode() {
        return list.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{list=" + list + ", stateList=" + stateListBuilder + '}';
    }
}
