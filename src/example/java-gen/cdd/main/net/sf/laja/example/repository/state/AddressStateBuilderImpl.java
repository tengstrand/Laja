package net.sf.laja.example.repository.state;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class AddressStateBuilderImpl implements AddressStateBuilder {
    private Object encapsulator;
    private AddressState state;
    private final Certificate certificate;
    private ZipcodeStateBuilder zipcodeStateBuilder;

    AddressStateBuilderImpl() {
        state = new AddressStateImpl();
        certificate = Certificate.get(this);
    }

    public AddressStateBuilderImpl(AddressState state) {
        this.state = state;
        certificate = Certificate.get(this);
    }

    public AddressStateBuilderImpl(AddressState state, Object encapsulator) {
        this(state);
        this.encapsulator = encapsulator;
    }

    public void withAddressId(int addressId) {
        state.setAddressId(addressId, encapsulator);
    }

    public void withStreetName(String streetName) {
        state.setStreetName(streetName, encapsulator);
    }

    public void withZipcode(ZipcodeStateBuilder zipcode) {
        state.setZipcode(zipcode.getZipcodeState(certificate), encapsulator);
    }

    public void withCity(String city) {
        state.setCity(city, encapsulator);
    }

    public ZipcodeStateBuilder getZipcodeStateBuilder() {
        if (zipcodeStateBuilder == null) {
            zipcodeStateBuilder = new ZipcodeStateBuilderImpl(state.getZipcode());
        }
        return zipcodeStateBuilder;
    }

    public boolean isValid() {
        return state.isValid();
    }

    public Object as(AddressBehaviourFactory factory, Object... args) {
        return factory.create(state, args);
    }

    public AddressState getAddressState(net.sf.laja.example.repository.state.Certificate certificate) {
        return state;
    }

    @Override
    public int hashCode() {
        return state.hashCode();
    }
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof AddressStateComparable)) return false;

        return true;
    }

    @Override
    public String toString() {
        return state.toString();
    }
}
