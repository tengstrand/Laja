package net.sf.laja.example.car.state;

import net.sf.laja.example.car.behaviour.CarColor;
import net.sf.laja.example.car.state.VehicleSizeStateBehaviourFactory;
import net.sf.laja.example.car.state.VehicleSizeState;
import net.sf.laja.example.car.state.OwnerStateBuilder;
import net.sf.laja.example.car.state.Certificate;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public class CarStateBuilderImpl implements CarStateBuilder {
    private boolean encapsulated;
    private CarState state;
    private final Certificate certificate;
    private boolean trusted;

    CarStateBuilderImpl() {
        state = new CarStateImpl();
        certificate = Certificate.get(this);
    }

    public CarStateBuilderImpl(CarState state) {
        this.state = state;
        certificate = Certificate.get(this);
        trusted = true;
    }

    public void withLengthInCentimeters(int lengthInCentimeters) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setLengthInCentimeters(lengthInCentimeters);
    }

    public void withName(String name) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setName(name);
    }

    public void withOwner(OwnerStateBuilder owner) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setOwner(owner.getOwnerState(certificate));
    }

    public void withColor(CarColor color) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setColor(color);
    }

    public void withColor(String color) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.setColor(CarColor.valueOf(color.toUpperCase()));
    }

    private void throwEncapsulationException() {
        throw new IllegalStateException("The state has been encapsulated and can only be changed from within behaviour classes of type \"Car\"");
    }

    public boolean isValid() {
        return state.isValid();
    }

    public Object as(CarStateBehaviourFactory factory, Object... args) {
        Object encapsulatedObject = factory.create(state, args);
        if (!trusted) {
            encapsulated = true;
        }
        return encapsulatedObject;
    }

    public Object as(VehicleSizeStateBehaviourFactory factory, Object... args) {
        Object encapsulatedObject = factory.create(state, args);
        if (!trusted) {
            encapsulated = true;
        }
        return encapsulatedObject;
    }

    public CarState getCarState(net.sf.laja.example.car.state.Certificate certificate) {
        return state;
    }

    public VehicleSizeState getVehicleSizeState(Certificate certificate) {
        return state;
    }
}
