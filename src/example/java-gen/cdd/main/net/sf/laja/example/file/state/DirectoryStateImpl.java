package net.sf.laja.example.file.state;

import net.sf.laja.example.file.state.Certificate;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class DirectoryStateImpl implements DirectoryState {
    protected String directoryPath;

    private boolean _encapsulated = false;
    private Object _encapsulator;

    DirectoryStateImpl() {
    }

    public DirectoryStateImpl(Certificate certificate) {
        this();
        if (certificate == null) {
            throw new IllegalArgumentException("Certificate can not be null");
        }
    }

    public static DirectoryStateBuilder build() {
        return new DirectoryStateBuilderImpl();
    }

    public static DirectoryStateBuilder build(DirectoryState state) {
        return new DirectoryStateBuilderImpl(state);
    }

    public Certificate certificate() {
        return Certificate.get(this);
    }

    public boolean isValid() {
        return isValid(_encapsulated);
    }

    public boolean isValidAsEncapsulated() {
        return isValid(true);
    }

    private boolean isValid(boolean encapsulated) {
        if (directoryPath == null) {
            return false;
        }
        return true;
    }

    // Getters
    public String getDirectoryPath() { return directoryPath; }

    // Setters
    public void setDirectoryPath(String directoryPath, Object mutator) { checkMutator(mutator); this.directoryPath = directoryPath; }

    private void checkMutator(Object mutator) {
        if (mutator != _encapsulator) {
            throw new IllegalStateException("The state can only be mutated by current instance of " + (_encapsulator == null ? null : _encapsulator.getClass().getName()));
        }
    }


    public void encapsulate() {
        _encapsulated = true;
    }

    public void setEncapsulator(Object encapsulator) {
        _encapsulator = encapsulator;
    }

    @Override
    public boolean equals(Object that) {
       if (this == that) return true;
       if (!(that instanceof DirectoryStateComparable)) return false;

       return true;
    }

    public boolean equalsValue(Object value) {
        if (this == value) return true;
        if (value == null || getClass() != value.getClass()) return false;

        DirectoryStateImpl state = (DirectoryStateImpl)value;

        if (directoryPath != null ? !directoryPath.equals(state.directoryPath) : state.directoryPath != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = directoryPath != null ? directoryPath.hashCode() : 0;

        return result;
    }

    @Override
    public String toString() {
        return "{directoryPath=" + directoryPath + "}";
    }
}
