package net.sf.laja.example.person.state;

import net.sf.laja.example.person.state.Certificate;

import java.util.ArrayList;
import java.util.List;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
public final class BmiStateListBuilder {
    private Object lastMutator;
    private final Certificate certificate;
    private final BmiStateList states;

    public BmiStateListBuilder() {
        certificate = Certificate.get(new BmiStateImpl());
        states = BmiStateListImpl.emptyList(certificate);
    }

    public BmiStateListBuilder(BmiStateList states) {
        this.states = states;
        certificate = Certificate.get(new BmiStateImpl());
    }

    public BmiStateList getStateList(Certificate certificate) {
        return states;
    }

    public List<BmiStateBuilder> getStateBuilders() {
        List<BmiStateBuilder> builders = new ArrayList<BmiStateBuilder>(states.size());

        for (BmiState state : states) {
            builders.add(new BmiStateBuilderImpl(state));
        }
        return builders;
    }

    public void throwExceptionIfOutOfSync(Object accessor) {
        if (lastMutator != null && lastMutator != accessor) {
            throw new IllegalStateException("The state has been changed by another list. Call syncState() to synchronize the internal state with the enclosing list.");
        }
    }

    private void prepareAddOrRemoveElementAndThrowExceptionIfOutOfSync(Object mutator) {
        throwExceptionIfOutOfSync(mutator);
        this.lastMutator = mutator;
    }

    public void syncState() {
        this.lastMutator = null;
    }

    public int size() {
        return states.size();
    }

    public void clear(Object mutator) {
        prepareAddOrRemoveElementAndThrowExceptionIfOutOfSync(mutator);
        states.clear();
    }

    public void add(BmiStateBuilder builder) {
        states.add(builder.getBmiState(certificate));
    }

    public void add(BmiState state) {
        states.add(state);
    }

    public void add(BmiState state, Object mutator) {
        prepareAddOrRemoveElementAndThrowExceptionIfOutOfSync(mutator);
        states.add(state);
    }

    public void add(int index, BmiState state, Object mutator) {
        prepareAddOrRemoveElementAndThrowExceptionIfOutOfSync(mutator);
        states.add(index, state);
    }

    public void addAll(int index, BmiStateListBuilder listBuilder, Object mutator) {
        prepareAddOrRemoveElementAndThrowExceptionIfOutOfSync(mutator);
        states.addAll(index, listBuilder.states);
    }

    public void set(int index, BmiState state, Object accessor) {
        throwExceptionIfOutOfSync(accessor);
        states.set(index, state);
    }

    public boolean remove(BmiState state, Object mutator) {
        prepareAddOrRemoveElementAndThrowExceptionIfOutOfSync(mutator);
        return states.remove(state);
    }

    public void remove(int index, Object mutator) {
        prepareAddOrRemoveElementAndThrowExceptionIfOutOfSync(mutator);
        states.remove(index);
    }

    public void retainAll(BmiStateListBuilder retainStates, Object mutator) {
        prepareAddOrRemoveElementAndThrowExceptionIfOutOfSync(mutator);
        states.retainAll(retainStates.states);
    }

    @Override
    public String toString() {
        return "BmiStateListBuilder{states=" + states + ", lastMutator.hashCode()=" + (lastMutator == null ? null : lastMutator.hashCode()) + "}";
    }
}
