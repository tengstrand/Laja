package net.sf.laja.example.computer.behaviour;

import net.sf.laja.example.computer.state.*;
import net.sf.laja.example.computer.behaviour.*;
import java.util.*;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class AmigaHashSet implements AmigaSet, RandomAccess, Cloneable, java.io.Serializable {
    protected ComputerStateSet stateSet;
    protected final Set<Amiga> set;

    public AmigaHashSet(Amiga... array) {
        this.set = new HashSet<Amiga>();
        this.set.addAll(Arrays.asList(array));
    }

    public AmigaHashSet(Collection<Amiga> collection) {
        this.set = new HashSet<Amiga>();
        this.set.addAll(collection);
    }

    public AmigaHashSet(ComputerStateSet stateSet, Configuration context) {
        this.stateSet = stateSet;
        this.stateSet.encapsulate(this);
        Set<Amiga> elements = new HashSet<Amiga>(stateSet.size());

        for (ComputerState state : stateSet) {
            ComputerStateBuilder builder = new ComputerStateBuilderImpl(state);
            Amiga entry = (Amiga) builder.as(new AmigaFactory.AmigaFactory_(builder), context);
            elements.add(entry);
        }
        this.set = new StateInSyncSet(stateSet, elements);
    }

    public class StateInSyncSet extends HashSet<Amiga> {
        private final ComputerStateSet stateSet;

        public StateInSyncSet(ComputerStateSet stateSet, Set<Amiga> elements) {
            this.stateSet = stateSet;
            super.addAll(elements);
        }

        @Override
        public boolean add(Amiga element) {
            stateSet.throwExceptionIfNotEncapsulatedBy(AmigaHashSet.this);
            stateSet.add(element.getState(stateSet.certificate()));
            return super.add(element);
        }

        @Override
        public boolean addAll(Collection<? extends Amiga> collection) {
            stateSet.throwExceptionIfNotEncapsulatedBy(AmigaHashSet.this);
            boolean modified = super.addAll(collection);

            for (Amiga element : collection) {
                stateSet.add(element.getState(stateSet.certificate()));
            }
            return modified;
        }

        @Override
        public boolean remove(Object element) {
            stateSet.throwExceptionIfNotEncapsulatedBy(AmigaHashSet.this);
            if (!(element instanceof Amiga)) {
                return false;
            }
            stateSet.remove(((Amiga) element).getState(stateSet.certificate()));

            return super.remove(element);
        }

        @Override
        public boolean removeAll(Collection<?> collection) {
            stateSet.throwExceptionIfNotEncapsulatedBy(AmigaHashSet.this);
            Set states = new HashSet(collection.size());
            Set elements = new HashSet(collection.size());
            for (Object element : collection) {
                if (element instanceof Amiga) {
                    elements.add(element);
                    states.add(((Amiga)element).getState(stateSet.certificate()));
                }
            }
            boolean modified = super.removeAll(elements);
            stateSet.removeAll(states);

            return modified;
        }

        @Override
        public boolean retainAll(Collection<?> collection) {
            stateSet.throwExceptionIfNotEncapsulatedBy(AmigaHashSet.this);
            Set states = new HashSet(collection.size());
            Set elements = new HashSet(collection.size());
            for (Object element : collection) {
                if (element instanceof Amiga) {
                    elements.add(element);
                    states.add(((Amiga)element).getState(stateSet.certificate()));
                }
            }
            boolean modified = super.retainAll(elements);
            stateSet.retainAll(states);

            return modified;
        }

        @Override
        public void clear() {
            stateSet.throwExceptionIfNotEncapsulatedBy(AmigaHashSet.this);
            stateSet.clear();
            super.clear();
        }
    }

    public int size() {
        return set.size();
    }

    public boolean isEmpty() {
        return set.isEmpty();
    }

    public boolean contains(Object element) {
        return set.contains(element);
    }

    public Iterator<Amiga> iterator() {
        return set.iterator();
    }

    public Object[] toArray() {
        return set.toArray();
    }

    public <Amiga> Amiga[] toArray(Amiga[] array) {
        return set.toArray(array);
    }

    public boolean add(Amiga element) {
        return set.add(element);
    }

    public boolean addAll(Collection<? extends Amiga> collection) {
        return set.addAll(collection);
    }

    public boolean remove(Object element) {
        if (!(element instanceof Amiga)) {
            return false;
        }
        return set.remove(element);
    }

    public boolean containsAll(Collection<?> collection) {
        return set.containsAll(collection);
    }

    public boolean removeAll(Collection<?> collection) {
        return set.removeAll(collection);
    }

    public boolean retainAll(Collection<?> collection) {
        return set.retainAll(collection);
    }

    public void clear() {
        set.clear();
    }

    @Override
    public boolean equals(Object o) {
        return set.equals(o);
    }

    @Override
    public int hashCode() {
        return set.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{" + set + '}';
    }
}
