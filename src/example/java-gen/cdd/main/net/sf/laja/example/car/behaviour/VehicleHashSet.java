package net.sf.laja.example.car.behaviour;

import net.sf.laja.example.car.state.*;
import net.sf.laja.example.car.behaviour.*;
import java.util.*;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class VehicleHashSet implements VehicleSet, RandomAccess, Cloneable, java.io.Serializable {
    protected VehicleStateSet stateSet;
    protected final Set<Vehicle> set;

    public VehicleHashSet(Vehicle... array) {
        this.set = new HashSet<Vehicle>();
        this.set.addAll(Arrays.asList(array));
    }

    public VehicleHashSet(Collection<Vehicle> collection) {
        this.set = new HashSet<Vehicle>();
        this.set.addAll(collection);
    }

    public VehicleHashSet(VehicleStateSet stateSet) {
        this.stateSet = stateSet;
        this.stateSet.encapsulate(this);
        Set<Vehicle> elements = new HashSet<Vehicle>(stateSet.size());

        for (VehicleState state : stateSet) {
            VehicleStateBuilder builder = new VehicleStateBuilderImpl(state);
            Vehicle entry = (Vehicle) builder.as(new VehicleFactory.VehicleFactory_(builder));
            elements.add(entry);
        }
        this.set = new StateInSyncSet(stateSet, elements);
    }

    public class StateInSyncSet extends HashSet<Vehicle> {
        private VehicleStateSet stateSet;

        public StateInSyncSet(VehicleStateSet stateSet, Set<Vehicle> elements) {
            this.stateSet = stateSet;
            this.stateSet.clear();
            super.addAll(elements);
        }

        @Override
        public boolean add(Vehicle element) {
            stateSet.throwExceptionIfNotEncapsulatedBy(VehicleHashSet.this);
            stateSet.add(element.getState(stateSet.certificate()));
            return super.add(element);
        }

        @Override
        public boolean addAll(Collection<? extends Vehicle> collection) {
            stateSet.throwExceptionIfNotEncapsulatedBy(VehicleHashSet.this);
            boolean modified = super.addAll(collection);

            for (Vehicle element : collection) {
                stateSet.add(element.getState(stateSet.certificate()));
            }
            return modified;
        }

        @Override
        public boolean remove(Object element) {
            stateSet.throwExceptionIfNotEncapsulatedBy(VehicleHashSet.this);
            if (!(element instanceof Vehicle)) {
                return false;
            }
            boolean removedState = stateSet.remove(((Vehicle) element).getState(stateSet.certificate()));
            boolean removedElement = super.remove(element);

            if (removedState != removedElement) {
                throw new IllegalStateException("The state and behaviour is out of sync. Please report this bug to the Laja project!");
            }
            return removedElement;
        }

        @Override
        public boolean removeAll(Collection<?> collection) {
            stateSet.throwExceptionIfNotEncapsulatedBy(VehicleHashSet.this);
            Set states = new HashSet(collection.size());
            Set elements = new HashSet(collection.size());
            for (Object element : collection) {
                if (element instanceof Vehicle) {
                    elements.add(element);
                    states.add(((Vehicle)element).getState(stateSet.certificate()));
                }
            }
            boolean modified = super.removeAll(elements);
            stateSet.removeAll(states);

            return modified;
        }

        @Override
        public boolean retainAll(Collection<?> collection) {
            stateSet.throwExceptionIfNotEncapsulatedBy(VehicleHashSet.this);
            Set states = new HashSet(collection.size());
            Set elements = new HashSet(collection.size());
            for (Object element : collection) {
                if (element instanceof Vehicle) {
                    elements.add(element);
                    states.add(((Vehicle)element).getState(stateSet.certificate()));
                }
            }
            boolean modified = super.retainAll(elements);
            stateSet.retainAll(states);

            return modified;
        }

        @Override
        public void clear() {
            stateSet.throwExceptionIfNotEncapsulatedBy(VehicleHashSet.this);
            stateSet.clear();
            super.clear();
        }
    }

    public int size() {
        return set.size();
    }

    public boolean isEmpty() {
        return set.isEmpty();
    }

    public boolean contains(Object element) {
        return set.contains(element);
    }

    public Iterator<Vehicle> iterator() {
        return set.iterator();
    }

    public Object[] toArray() {
        return set.toArray();
    }

    public <Vehicle> Vehicle[] toArray(Vehicle[] array) {
        return set.toArray(array);
    }

    public boolean add(Vehicle element) {
        return set.add(element);
    }

    public boolean addAll(Collection<? extends Vehicle> collection) {
        return set.addAll(collection);
    }

    public boolean remove(Object element) {
        if (!(element instanceof Vehicle)) {
            return false;
        }
        return set.remove(element);
    }

    public boolean containsAll(Collection<?> collection) {
        return set.containsAll(collection);
    }

    public boolean removeAll(Collection<?> collection) {
        return set.removeAll(collection);
    }

    public boolean retainAll(Collection<?> collection) {
        return set.retainAll(collection);
    }

    public void clear() {
        set.clear();
    }

    @Override
    public boolean equals(Object o) {
        return set.equals(o);
    }

    @Override
    public int hashCode() {
        return set.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{" + set + '}';
    }
}
