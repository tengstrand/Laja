package net.sf.laja.example.person.state;

import net.sf.laja.example.person.state.BmiState;
import net.sf.laja.example.person.state.Certificate;

/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
public class PersonStateImpl implements PersonState {
    protected String givenName;
    protected String surname;
    protected BmiState size;

    private boolean _encapsulated = false;
    private Object _encapsulator;

    PersonStateImpl() {
    }

    public PersonStateImpl(Certificate certificate) {
        this();
        if (certificate == null) {
            throw new IllegalArgumentException("Certificate can not be null");
        }
    }

    public static PersonStateBuilder build() {
        return new PersonStateBuilderImpl();
    }

    public static PersonStateBuilder build(PersonState state) {
        return new PersonStateBuilderImpl(state);
    }

    public Certificate certificate() {
        return Certificate.get(this);
    }

    public boolean isValid() {
        return isValid(_encapsulated);
    }

    public boolean isValidAsEncapsulated() {
        return isValid(true);
    }

    private boolean isValid(boolean encapsulated) {
        if (givenName == null
                || surname == null
                || (size == null || !size.isValid())) {
            return false;
        }
        return true;
    }

    // Getters
    public String getGivenName() { return givenName; }
    public String getSurname() { return surname; }
    public BmiState getSize() { return size; }

    // Setters
    public void setGivenName(String givenName, Object mutator) { checkMutator(mutator); this.givenName = givenName; }
    public void setSurname(String surname, Object mutator) { checkMutator(mutator); this.surname = surname; }
    public void setSize(BmiState size, Object mutator) { checkMutator(mutator); this.size = size; }

    private void checkMutator(Object mutator) {
        if (mutator != _encapsulator) {
            throw new IllegalStateException("The state can only be mutated by current instance of " + (_encapsulator == null ? null : _encapsulator.getClass().getName()));
        }
    }

    public void encapsulate() {
        _encapsulated = true;
    }

    public void setEncapsulator(Object encapsulator) {
        _encapsulator = encapsulator;
    }

    @Override
    public boolean equals(Object that) {
       if (this == that) return true;
       if (!(that instanceof PersonStateComparable)) return false;

       return true;
    }

    public boolean equalsValue(Object value) {
        if (this == value) return true;
        if (value == null || getClass() != value.getClass()) return false;

        PersonStateImpl state = (PersonStateImpl)value;

        if (givenName != null ? !givenName.equals(state.getGivenName()) : state.getGivenName() != null) return false;
        if (surname != null ? !surname.equals(state.getSurname()) : state.getSurname() != null) return false;
        if (size != null ? !size.equals(state.getSize()) : state.getSize() != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        int result = givenName != null ? givenName.hashCode() : 0;
        result = 31 * result + (surname != null ? surname.hashCode() : 0);
        result = 31 * result + (size != null ? size.hashCode() : 0);

        return result;
    }

    @Override
    public String toString() {
        return "{givenName=" + (givenName == null ? null : '\'' + givenName + '\'' ) +
                ", surname=" + (surname == null ? null : '\'' + surname + '\'' ) +
                ", size=" + size + "}";
    }
}
