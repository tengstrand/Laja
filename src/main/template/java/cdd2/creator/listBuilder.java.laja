
#macro listBuilder()
    public static class {listBuilder} {
        private {creator}[] creators;

        public {listBuilder}({creator}... creators) {
            this.creators = creators;
        }

  #foreach (method in asMethods)
        // {method.returnclass}

        public ImmutableList<{method.returnclass}> {method.methodName}List({method.parameters}) {
            ImmutableList.Builder<{method.returnclass}> builder = ImmutableList.builder();

            for ({creator} creator : creators) {
                builder.add(creator.{method.methodName}({method.parameters}));
            }
            return builder.build();
        }

        public List<{method.returnclass}> {method.methodName}MutableList({method.parameters}) {
            List<{method.returnclass}> result = new ArrayList<{method.returnclass}>();

            for ({creator} creator : creators) {
                result.add(creator.{method.methodName}({method.parameters}));
            }
            return result;
        }

  #end
        // State

        public ImmutableList<{immutableState}> asStateList() {
            ImmutableList.Builder<{immutableState}> builder = ImmutableList.builder();

            for ({creator} creator : creators) {
                builder.add(creator.asState());
            }
            return builder.build();
        }

        public List<{mutableState}> asMutableStateList() {
            List<{mutableState}> result = new ArrayList<{mutableState}>();

            for ({creator} creator : creators) {
                result.add(creator.asMutableState());
            }
            return result;
        }
    }

#end
