#namespace creator

#macro builder()
    // --- Builder ---

    public static class {builder} implements {maker} {
        private final {mutableState} state;

        private {builder}({mutableState} state) {
            this.state = state;
        }

        public static {builder} create() {
            return new {builder}(new {mutableState}());
        }

        #foreach (attribute in attributes)
        public {builder} {attribute.withMethod}({attribute.type} {attribute.name}) { state.{attribute.name} = {attribute.name}; return this; }
          #if (attribute.isState)
        public {builder} {attribute.withMethod}({attribute.builder} {attribute.name}) { state.{attribute.name} = {attribute.name}.asMutableState(); return this; }
          #else if (attribute.isDate)
        public {builder} {attribute.withMethod}(int year, int monthOfYear, int dayOfMonth) { state.{attribute.name} = new {attribute.type}(year, monthOfYear, dayOfMonth); return this; }
          #end
        #end

        #foreach (method in asMethods)
        public {method.returnclass} {method.methodName}({method.parameters}) {
{method.tabbedBody("    ")}##
        }

        #end
        public {immutableState} asState() {
            return state.asImmutable();
        }

        public {mutableState} asMutableState() {
            return state;
        }

        public void assertIsValid() {
            state.assertIsValid();
        }

        public boolean isValid() {
            return state.isValid();
        }

        public ValidationErrors validate(Validator... validators) {
            return state.validate(validators);
        }
    }

#end
