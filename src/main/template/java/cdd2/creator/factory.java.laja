#namespace factory

#macro factory()
  #if (hasMandatoryAttributes)
    #factoryClass()
  #end
#end

#macro parameterMethod(returnClass, returnStatement, attributeName)
  #foreach (parameter in parameters where parameter.name == attributeName)
    #set (retClass = returnClass)
    #set (retStatement = returnStatement)
    #if (parameter.hasNext)
      #foreach (attr in attributes where attr.name == parameter.next)
        #set (retClass = "_{attr.nameAsClass}")
        #set (retStatement = "return new {retClass}();")
      #end
    #else if (parameter.isLastAttribute)
      #set (retClass = "{creator}")
      #set (retStatement = "return new {creator}(state);")
    #end

            public {retClass} {parameter.method}({parameter.signature}) {
    #if (!parameter.value.isEmpty)
                state.{attributeName} = {parameter.value};
    #end
                {retStatement}
            }
  #end
#end

#macro attributeMethod(a, returnClass, returnStatement)
  #if (!a.isCollectionOrMap)
            public {returnClass} {a.name}({a.type} {a.name}) {
                state.{a.name} = {a.name};
                {returnStatement}
            }
    #if (a.isState)

            public {returnClass} {a.name}({a.nameAsClass}Creator {a.name}) {
                state.{a.name} = {a.name}.asMutableState();
                {returnStatement}
            }
    #end
    #parameterMethod(returnClass, returnStatement, a.name)
  #else if (a.isCollection)
            public {returnClass} {a.name}({a.type} {a.name}) {
                state.{a.name} = {a.name};
                {returnStatement}
            }
    #if (a.isLeafState)

            public {returnClass} {a.name}({creator}... creators) {
                List<{mutableState}> {a.name} = new ArrayList<{mutableState}>();

                for ({creator} creator : creators) {
                    {a.name}.add(creator.asMutableState());
                }
                state.{a.name} = {a.name};
                {returnStatement}
            }
    #end
    #parameterMethod(returnClass, returnStatement, a.name)
  #else
            public {returnClass} {a.name}({a.type} {a.name}) {
                state.{a.name} = {a.name};
                {returnStatement}
            }
    #if (a.type.mapType.entry.isState)
      #set (stateName = a.type.mapType.entry.state)

            public {returnClass} {a.name}({stateName}MapBuilder mapBuilder) {
                state.{a.name} = mapBuilder.asMutableStateMap();
                {returnStatement}
            }
    #end
    #parameterMethod(returnClass, returnStatement, a.name)
  #end
#end

#macro attributeClass(hasNext, a, returnClass, returnStatement)

  #if (!a.isCollectionOrMap)
        // {a.name}
        public class {currentClass} {
    #attributeMethod(a, returnClass, returnStatement)
        }
  #else if (a.isCollection)
        // {a.name}
        public class {currentClass} {
    #attributeMethod(a, returnClass, returnStatement)
        }
  #else
        // {a.name}
        public class {currentClass} {
    #attributeMethod(a, returnClass, returnStatement)
        }
  #end
#end

#macro factoryParameterMethod(returnClass, a)
  #foreach (parameter in parameters where parameter.name == a.name)
    #set (retClass = returnClass)
    #set (retStatement = returnStatement)
    #if (parameter.hasNext)
      #foreach (attr in attributes where attr.name == parameter.next)
        #set (retClass = "_{attr.nameAsClass}")
      #end
    #else if (parameter.isLastAttribute)
      #set (retClass = "{creator}")
    #end

        public {retClass} {parameter.method}({parameter.signature}) {
            return new _{a.nameAsClass}().{a.name}({parameter.signatureArguments});
        }
  #end
#end

#macro factoryAttributeMethod(a, returnClass, returnStatement)
  #if (!a.isCollectionOrMap)
        public {returnClass} {a.name}({a.type} {a.name}) {
            {returnStatement}
        }
    #if (a.isState)

        public {returnClass} {a.name}({a.nameAsClass}Creator {a.name}) {
            {returnStatement}
        }
    #end
    #factoryParameterMethod(returnClass, a)
  #else if (a.isCollection)
        public {returnClass} {a.name}({a.type} {a.name}) {
            {returnStatement}
        }
    #if (a.isLeafState)

        public {returnClass} {a.name}({creator}... creators) {
            List<{mutableState}> {a.name} = new ArrayList<{mutableState}>();

            for ({creator} creator : creators) {
                {a.name}.add(creator.asMutableState());
            }
            {returnStatement}
        }
    #end
    #factoryParameterMethod(returnClass, a)
  #else
        public {returnClass} {a.name}({a.type} {a.name}) {
            state.{a.name} = {a.name};
            {returnStatement}
        }
    #if (a.type.mapType.entry.isState)
      #set (stateName = a.type.mapType.entry.state)

        public {returnClass} {a.name}({stateName}MapBuilder mapBuilder) {
            {returnStatement}
        }
    #end
    #factoryParameterMethod(returnClass, a)
  #end
#end


#macro factoryClass()
    // ----- Factory ------

    public class {factory} {

  #if (secondMandatory == null)
    #set (returnClass = "{creator}")
  #else
    #set (returnClass = "_{secondMandatory.nameAsClass}")
  #end
  #set (returnStatement = "return new _{firstMandatory.nameAsClass}().{firstMandatory.name}({firstMandatory.name});")
  #factoryAttributeMethod(firstMandatory, returnClass, returnStatement)
  #set (iterator = mandatoryAttributes.iterator())
  #set (hasNext = iterator.hasNext)
  #if (hasNext)
    #set (attribute = iterator.next)
    #set (currentClass = "_{strings.capitalize(attribute.name)}")
  #end
  #while (hasNext)
    #set (hasNext = iterator.hasNext)
    #if (hasNext)
      #set (nextAttribute = iterator.next)
      #set (nextClass = "_{strings.capitalize(nextAttribute.name)}")
      #attributeClass(hasNext, attribute, "{nextClass}", "return new {nextClass}();")
    #else
      #attributeClass(hasNext, attribute, "{creator}", "return new {creator}(state);")
    #end
    #if (hasNext)
      #set (attribute = nextAttribute)
      #set (currentClass = nextClass)
    #end
  #end
    }
#end
