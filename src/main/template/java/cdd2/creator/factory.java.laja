#namespace factory

#macro factory()
  #if (hasMandatoryAttributes)
    #factoryClass()
  #end
#end

#macro factoryClass()
    // ----- Factory ------

    public class {factory} {

  #if (secondMandatory == null)
        public {creator} name({firstMandatory.type} {firstMandatory.name}) {
  #else
        public _{secondMandatory.nameAsClass} name({firstMandatory.type} {firstMandatory.name}) {
  #end
            return new _{firstMandatory.nameAsClass}().{firstMandatory.name}({firstMandatory.name});
        }
  #set (iterator = mandatoryAttributes.iterator())
  #set (hasNext = iterator.hasNext)
  #if (hasNext)
    #set (attribute = iterator.next)
    #set (currentClass = "_{strings.capitalize(attribute.name)}")
  #end
  #while (hasNext)
    #set (hasNext = iterator.hasNext)
    #if (hasNext)
      #set (nextAttribute = iterator.next)
      #set (nextClass = "_{strings.capitalize(nextAttribute.name)}")
      #set (returnClass = "{nextClass}")
      #set (returnStatement = "return new {nextClass}();")
    #else
      #set (returnClass = "{creator}")
      #set (returnStatement = "return new {creator}(state);")
    #end

    #if (!attribute.isCollectionOrMap)
        public class {currentClass} {
            public {returnClass} {attribute.name}({attribute.type} {attribute.name}) {
                state.{attribute.name} = {attribute.name};
                {returnStatement}
            }
      #if (attribute.isState)

            public {returnClass} {attribute.name}({attribute.nameAsClass}Creator {attribute.name}) {
                state.{attribute.name} = {attribute.name}.asMutableState();
                {returnStatement}
            }
      #end
        }
    #else if (attribute.isCollection)
        public class {currentClass} {
            public {returnClass} {attribute.name}({attribute.type} {attribute.name}) {
                state.{attribute.name} = {attribute.name};
                {returnStatement}
            }
      #if (attribute.isLeafState)

            public {returnClass} {attribute.name}({creator}... creators) {
                List<{mutableState}> {attribute.name} = new ArrayList<{mutableState}>();

                for ({creator} creator : creators) {
                    {attribute.name}.add(creator.asMutableState());
                }
                state.{attribute.name} = {attribute.name};
                {returnStatement}
            }
      #end
        }
    #else
        public class {currentClass} {
            public {returnClass} {attribute.name}({attribute.type} {attribute.name}) {
                state.{attribute.name} = {attribute.name};
                {returnStatement}
            }
      #if (attribute.type.mapType.entry.isState)
        #set (stateName = attribute.type.mapType.entry.state)

            public {returnClass} {attribute.name}({stateName}MapBuilder mapBuilder) {
                state.{attribute.name} = mapBuilder.asMutableStateMap();
                {returnStatement}
            }
      #end
        }
    #end
    #if (hasNext)
      #set (attribute = nextAttribute)
      #set (currentClass = nextClass)
    #end
  #end
    }
#end
