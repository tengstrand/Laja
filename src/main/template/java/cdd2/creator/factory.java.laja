#namespace factory

#macro factory()
  #if (hasMandatoryAttributes)
    #factoryClass()
  #end
#end

#macro setReturnValues(returnClass, returnStatement)
    #set (retClass = returnClass)
    #set (retStatement = returnStatement)
    #if (parameter.hasNext)
      #foreach (attr in attributes where attr.name == parameter.next)
        #set (retClass = "_{attr.nameAsClass}")
        #set (retStatement = "return new {retClass}();")
      #end
    #else if (parameter.isLastAttribute)
      #set (retClass = "{creator}")
      #set (retStatement = "return new {creator}(state);")
    #end
#end

#macro parameterMethod(returnClass, returnStatement, a)
  #foreach (parameter in parameters where parameter.name == a.name)
    #setReturnValues(returnClass, returnStatement)

            public {retClass} {parameter.method}({parameter.signature}) {
    #if (!parameter.value.isEmpty)
                state.{a.name} = {parameter.value};
    #end
                {retStatement}
            }
  #end
#end

#macro setState(a, isFactory, tab)
  #if (!isFactory)
{tab}    state.{a.name} = {a.name};
  #end
#end

#macro setMutableState(a, isFactory, tab)
  #if (!isFactory)
{tab}    state.{a.name} = {a.name}.asMutableState();
  #end
#end

#macro setStateMapBuilder(a, isFactory, tab)
  #if (!isFactory)
{tab}    state.{a.name} = mapBuilder.asMutableStateMap();
  #end
#end

#macro parameterMethodSwitch(isFactory, a, returnClass, returnStatement)
  #if (isFactory)
    #factoryParameterMethod(returnClass, a)
  #else
    #parameterMethod(returnClass, returnStatement, a)
  #end
#end

#macro attributeMethod(a, returnClass, returnStatement, isFactory, tab)
  #if (!a.isCollectionOrMap)
{tab}public {returnClass} {a.name}({a.type} {a.name}) {
    #setState(a, isFactory, tab)
{tab}    {returnStatement}
{tab}}
    #if (a.isState)

{tab}public {returnClass} {a.name}({a.nameAsClass}Creator {a.name}) {
      #setMutableState(a, isFactory, tab)
{tab}    {returnStatement}
{tab}}
    #end
    #parameterMethodSwitch(isFactory, a, returnClass, returnStatement)
  #else if (a.isCollection)
{tab}public {returnClass} {a.name}({a.type} {a.name}) {
    #setState(a, isFactory, tab)
{tab}    {returnStatement}
{tab}}
    #if (a.isLeafState)

{tab}public {returnClass} {a.name}({creator}... creators) {
{tab}    List<{mutableState}> {a.name} = new ArrayList<{mutableState}>();

{tab}    for ({creator} creator : creators) {
{tab}        {a.name}.add(creator.asMutableState());
{tab}    }
    #setState(a, isFactory, tab)
{tab}    {returnStatement}
{tab}}
    #end
    #parameterMethodSwitch(isFactory, a, returnClass, returnStatement)
  #else
{tab}public {returnClass} {a.name}({a.type} {a.name}) {
    #setState(a, isFactory, tab)
{tab}    {returnStatement}
{tab}}
    #if (a.type.mapType.entry.isState)
      #set (stateName = a.type.mapType.entry.state)

{tab}public {returnClass} {a.name}({stateName}MapBuilder mapBuilder) {
      #setStateMapBuilder(a, isFactory, tab)
{tab}    {returnStatement}
{tab}}
    #end
    #parameterMethodSwitch(isFactory, a, returnClass, returnStatement)
  #end
#end

#macro attributeClass(hasNext, a, returnClass, returnStatement)

  #if (!a.isCollectionOrMap)
        // {a.name}
        public class {currentClass} {
    #attributeMethod(a, returnClass, returnStatement, false, "            ")
        }
  #else if (a.isCollection)
        // {a.name}
        public class {currentClass} {
    #attributeMethod(a, returnClass, returnStatement, false, "            ")
        }
  #else
        // {a.name}
        public class {currentClass} {
    #attributeMethod(a, returnClass, returnStatement, false, "            ")
        }
  #end
#end

#macro factoryParameterMethod(returnClass, a)
  #foreach (parameter in parameters where parameter.name == a.name)
    #setReturnValues(returnClass, null)

        public {retClass} {parameter.method}({parameter.signature}) {
            return new _{a.nameAsClass}().{a.name}({parameter.signatureArguments});
        }
  #end
#end

#macro factoryClass()
    // ----- Factory ------

    public class {factory} {

  #if (secondMandatory == null)
    #set (returnClass = "{creator}")
  #else
    #set (returnClass = "_{secondMandatory.nameAsClass}")
  #end
  #set (returnStatement = "return new _{firstMandatory.nameAsClass}().{firstMandatory.name}({firstMandatory.name});")
  #attributeMethod(firstMandatory, returnClass, returnStatement, true, "        ")
  #set (iterator = mandatoryAttributes.iterator())
  #set (hasNext = iterator.hasNext)
  #if (hasNext)
    #set (attribute = iterator.next)
    #set (currentClass = "_{strings.capitalize(attribute.name)}")
  #end
  #while (hasNext)
    #set (hasNext = iterator.hasNext)
    #if (hasNext)
      #set (nextAttribute = iterator.next)
      #set (nextClass = "_{strings.capitalize(nextAttribute.name)}")
      #attributeClass(hasNext, attribute, "{nextClass}", "return new {nextClass}();")
    #else
      #attributeClass(hasNext, attribute, "{creator}", "return new {creator}(state);")
    #end
    #if (hasNext)
      #set (attribute = nextAttribute)
      #set (currentClass = nextClass)
    #end
  #end
    }
#end
