#namespace factory

#macro factory()
  #if (hasMandatoryAttributes)
    #factoryClass()
  #end
#end

#macro factoryClass()
    // ----- Factory ------

    public static class {factory} {

        public Factory.Birthday name(String name) {
            return new Factory().new Name().name(name);
        }

        private static class Factory {
            private final {mutableState} state = new {mutableState}();
  #set (iterator = mandatoryAttributes.iterator())
  #set (hasNext = iterator.hasNext)
  #if (hasNext)
    #set (attribute = iterator.next)
    #set (currentClass = "{strings.capitalize(attribute.name)}")
  #end
  #while (hasNext)
    #set (hasNext = iterator.hasNext)
    #if (hasNext)
      #set (nextAttribute = iterator.next)
      #set (nextClass = "{strings.capitalize(nextAttribute.name)}")

      #if (attribute.isString)
            public class {currentClass} {
                public {nextClass} {attribute.name}(String {attribute.name}) {
                    state.{attribute.name} = {attribute.name};
                    return new {nextClass}();
                }
            }
      #else if (attribute.isCollection)
            public class Children {
                public Address children(PersonCreator... creators) {
                    List<PersonMutableState> children = new ArrayList<PersonMutableState>();

                    for (PersonCreator creator : creators) {
                        children.add(creator.asMutableState());
                    }
                    state.children = children;
                    return new Address();
                }

                public Address children(List<PersonMutableState> children) {
                    state.children = children;
                    return new Address();
                }
            }
      #end
      #set (attribute = nextAttribute)
      #set (currentClass = nextClass)
    #else

      #if (attribute.isString)
            public class {currentClass} {
                public {creator} {attribute.name}({attribute.type} {attribute.name}) {
                    state.{attribute.name} = {attribute.name};
                    return new {creator}(state);
                }
            }
      #end
    #end
        }

  #end
#end
