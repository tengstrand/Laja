grammar creator {
   newline = "\r\n" | "\n";
   comment = ("/*" [(comment | !"*/")+] "*/") | ("//" [!newline+] newline|END);
   ws = (newline | " " | "\t" | comment)+;
   s = [ws];
   ff = "\"";
   str = ff (("\\\"" | !(ff|newline))+):strval ff;

   letter = "a".."z" | "A".."Z" | "_" | "$";
   digit = "0".."9";
   name = letter [letter | digit]+;

   public = ["public" ws];
   packagename = name ["." name|"*"]+;
   packagestatement = "package" ws packagename s ";";
   fullclassname = packagename;

   importstatement = "import" ws ["static":static ws] fullclassname s ";" s;
   imports = [importstatement+];

   statement = "{" s [(statement | str | !"}")+]:innerStatement "}";
   parameter = s name:type ws name:variable s;
   parameters = [parameter] ["," s parameter]+;

   asMethod = s:spaces "public" s name:returnclass ws ("as" name):methodName s "(" s parameters s ")" s statement;

   aparameterAttr = ("name"|"value"|"next"|"method"|"signature"):variable s "=" s (name|str):value;
   aparameter = "@Parameter" s "(" s aparameterAttr [s "," s aparameterAttr]+ s ")";
   aparameters = s "@Parameters" s "(" s "{" s aparameter [s "," s aparameter]+ s "}" s ")";

   classStatement = "@Creator" ws public "class" ws name:classname [s "implements" s name [s "," s name]+] s "{" s
                    "private final" s name:stateClass s "state;" [asMethod|aparameters]+;

   manualEnd = ("}" s END);
   generatedEnd = "// ===== Generated code =====";
   manualCode = !(manualEnd | generatedEnd)+;

   creator = packagestatement s imports s classStatement manualCode *;

   Parameter parameter.setType(String type);
   parameter.setVariable(String variable);

   Parameters parameters.addParameter(Parameter parameter);

   AsMethod asMethod.setSpaces(String spaces);
   asMethod.setReturnclass(String returnclass);
   asMethod.setMethodName(String methodName);
   asMethod.setParameters(Parameters parameters);
   asMethod.setStatement(String statement);

   AparameterAttr aparameterAttr.setVariable(String variable);
   aparameterAttr.setValue(String value);

   Aparameter aparameter.addParameterAttr(AparameterAttr aparameterAttr);

   Aparameters aparameters.addParameter(Aparameter aparameter);
   aparameters.setContent(String *);

   ClassStatement classStatement.setClassname(String classname);
   classStatement.setStateClass(String stateClass);
   classStatement.addAsMethod(AsMethod asMethod);
   classStatement.setAParameters(Aparameters aparameters);

   Creator creator.setPackagename(String packagestatement.packagename);
   creator.setImports(String imports);
   creator.setClassStatement(ClassStatement classStatement);
   creator.setManualCode(String manualCode);
}
