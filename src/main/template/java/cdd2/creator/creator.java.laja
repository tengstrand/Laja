
#set (packagename = creator.packagename)
#set (imports = creator.imports)
#set (classname = creator.classname)
#set (statevariable = creator.statevariable)
#set (asMethods = creator.asMethods)
#set (state = creator.state)
#set (immutableState = "{state}State")
#set (mutableState = "{state}MutableState")
#set (manualCode = creator.manualCode)
#set (maker = "{state}Maker")
#set (mutableState = "{state}MutableState")
#set (factory = "{state}Factory")
#set (builder = "{state}Builder")
#set (creator = "{state}Creator")
#set (listBuilder = "{state}ListBuilder")
#set (setBuilder = "{state}SetBuilder")
#set (mapBuilder = "{state}MapBuilder")
#set (mapEntryBuilder = "{state}MapEntryBuilder")

#set (firstMandatory = null)
#set (secondMandatory = null)
#set (mandatoryAttributes = new java.util.ArrayList())
#foreach (attribute in attributes where attribute.isMandatory)
  #if (firstMandatory != null && secondMandatory == null)
    #set (secondMandatory = attribute)
  #end
  #mandatoryAttributes.add(attribute)
  #if (firstMandatory == null)
    #set (firstMandatory = attribute)
  #end
#end
#set (hasMandatoryAttributes = mandatoryAttributes.size > 0)

#macro create()
  #if (hasMandatoryAttributes)
    public static {factory} create{state}() {
        return new {factory}();
    }
  #else
    public static {creator} create{state}() {
        return new {creator}(new {mutableState}());
    }
  #end

#end

#macro build()
    public static {builder} build{state}() {
        return {builder}.create();
    }

#end

#macro createList()
    public static {listBuilder} create{state}List({creator}... creators) {
        return new {listBuilder}(creators);
    }

#end

#macro createSet()
    public static {setBuilder} create{state}Set({creator}... creators) {
        return new {setBuilder}(creators);
    }

#end

#macro createMap()
    public static {mapBuilder} create{state}Map({mapEntryBuilder}... builders) {
        return new {mapBuilder}(builders);
    }

#end

#macro mapCreatorEntry()
    public static {mapEntryBuilder} {statevariable}Entry(Object key, {creator} creator) {
        return new {mapEntryBuilder}(key, creator);
    }

#end

#macro mapBuilderEntry()
    public static {mapEntryBuilder} {statevariable}Entry(Object key, {builder} builder) {
        return new {mapEntryBuilder}(key, builder);
    }

#end

#macro constructor()
    public {creator}({mutableState} state) {
        this.state = state;
    }

#end

#macro asState()
    public {immutableState} asState() {
        return state.asImmutable();
    }

#end

#macro asMutableState()
    public {mutableState} asMutableState() {
        return state;
    }

#end

#macro withMethods()
  #foreach (attribute in attributes where attribute.isOptional)
    public {creator} {attribute.withMethod}({attribute.withType} {attribute.name}) {
        state.{attribute.name} = {attribute.name};
        return this;
    }

  #end
#end

#import "{.}/factory.java.laja"

#write "C:/Source/IDEA/Laja/src/testgen/java-new/main/net/sf/laja/cdd/{creatorName}.txt"
package {packagename};

{imports}##
@Creator
public class {classname} implements {maker} {
    private final {mutableState} state;##
  #foreach (method in asMethods)
    #set (delimiter = "")
    #set (parameters = "")
    #foreach (parameter in method.parameters)
      #set (parameters = "{delimiter}{parameter.type} {parameter.variable}")
      #set (delimiter = ", ")
    #end
{method.spaces}public {method.returnclass} {method.methodName}({parameters}) {method.statement}##
  #end
{manualCode}##
// ===== Generated code =====

  #create()
  #build()
  #createList()
  #createSet()
  #createMap()
  #mapCreatorEntry()
  #mapBuilderEntry()
  #$factory.factory()

    // --------------------

  #constructor()
  #asState()
  #asMutableState()
##  #withMethods()
}
#end
