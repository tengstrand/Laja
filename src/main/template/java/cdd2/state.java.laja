
#set (packagename = state.packagename)
#set (classname = state.classname)
#set (classvariable = state.classvariable)
#set (mutableClass = state.mutableClass)
#set (attributes = state.attributes)
#set (imports = state.imports)
#set (manualCode = state.manualCode)
#set (generatedText = state.generatedText)
#set (isEntity = state.isEntity)

#set (attributeConverter = new net.sf.laja.parser.cdd.AttributeToConstantConverter())

#macro imports()
  #foreach (import in imports)
{import.statement}##
  #end
#end

#macro attributes(tab)
  #foreach (attribute in attributes)
{tab}{attribute.annotationsContent}public final {attribute.type} {attribute.name};
  #end
#end

#macro constants()
  #foreach (attribute in attributes)
    public static final String {attributeConverter.toConstant(attribute.name)} = "{attribute.name}";
  #end

#end

#macro constructor()
    public {classname}(
  #set (iterator = attributes.iterator)
  #set (space = " ")
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
            {attribute.type} {attribute.name},
    #else
            {attribute.type} {attribute.name}) {
    #end
  #end
  #foreach (attribute in attributes)
        this.{attribute.name} = {attribute.name};
  #end
    }

#end

#macro exception()
    public static class IllegalPersonStateException extends InvalidStateException {
        public IllegalPersonStateException(ValidationErrors errors) {
            super(errors);
        }
    }

#end

#macro withMethods()
  #set (parameterList = "")
  #set (delimiter = "")
  #foreach (attribute in attributes)
    #set (parameterList = "{parameterList}{delimiter}{attribute.name}")
    #set (delimiter = ", ")
  #end
  #foreach (attribute in attributes)
    public {classname} with{attribute.nameAsClass}({attribute.type} {attribute.name}) { return new {classname}({parameterList}); }
  #end

#end

#macro mutableConverters(type)
  #if (type.isState)
, toMutable##
  #else if (type.isMap)
, toMutableMap{mutableConverters(type.mapType.entry)}##
  #else if (type.isList)
, toMutableList{mutableConverters(type.collectionType.type)}##
  #else if (type.isSet)
, toMutableSet{mutableConverters(type.collectionType.type)}##
  #end
#end

#macro mutableStateAttribute()
  #if (attribute.type.isMap)
asMutableMap({attribute.name}{mutableConverters(attribute.type.mapType.entry)})##
  #else if (attribute.type.isList)
asMutableList({attribute.name}{mutableConverters(attribute.type.collectionType.type)})##
  #else if (attribute.type.isSet)
asMutableSet({attribute.name}{mutableConverters(attribute.type.collectionType.type)})##
  #else if (attribute.type.isState)
{attribute.name}.asMutable()##
  #else
{attribute.name}##
  #end
#end

#macro asMutable()
    public {mutableClass} asMutable() {
        return new {mutableClass}(
  #set (iterator = attributes.iterator)
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
            {mutableStateAttribute()},
    #else
            {mutableStateAttribute()});
    #end
  #end
    }

#end

#function entityAttributes()
  #set (keys = new java.util.ArrayList())
  #foreach (attribute in attributes where attribute.isKey)
    ## 1. At least one @Key was found => use @Key attributes for identity.
    #keys.add(attribute)
  #end
  #if (keys.size == 0)
    ## No @Key, but one @Id attribute was found.
    #foreach (attribute in attributes where !attribute.isId && !attribute.isCollection && !attribute.isMap)
      ## 2. Use all none @Id/collection/map attributes for identity.
      #keys.add(attribute)
    #end
    #if (keys.size == 0)
      #foreach (attribute in attributes where !attribute.isId)
        ## 3. Use all none @Id attributes for identity.
        #keys.add(attribute)
      #end
      #if (keys.size == 0)
        ## 4. Use the @Id attribute for identity.
        #return attributes
      #end
    #end
  #end
  #return keys
#end

#macro hashCode()
    @Override
    public int hashCode() {
  #if (isEntity)
    #hashCodeBody(entityAttributes())
  #else
    #hashCodeBody(attributes)
  #end
    }

#end

#macro hashCodeValue()
  #if (isEntity)
    public int hashCodeValue() {
    #hashCodeBody(attributes)
    }

  #end
#end

#macro hashCodeBody(attributes)
  #if (attributes.isEmpty)
        return super.hashCode();
  #else
    #set (first = true)
    #set (intTypes = ["byte", "char", "short", "int"])
    #set (castTypes = ["float", "double"])
    #foreach (attribute in attributes)
      #if (first)
        #if (intTypes.contains(attribute.type))
        int result = {attribute.name};
        #else if (castTypes.contains(attribute.type))
        int result = (int){attribute.name};
        #else if (attribute.type == "long")
        int result = (int)({attribute.name} ^ ({attribute.name} >>> 32));
        #else if (attribute.type == "boolean")
        int result = {attribute.name} ? 1 : 0;
        #else
        int result = {attribute.name} != null ? {attribute.name}.hashCode() : 0;
        #end
      #else
        #if (intTypes.contains(attribute.type))
        result = 31 * result + {attribute.name};
        #else if (castTypes.contains(attribute.type))
        result = 31 * result + (int){attribute.name};
        #else if (attribute.type == "long")
        result = 31 * result + (int)({attribute.name} ^ ({attribute.name} >>> 32));
        #else if (attribute.type == "boolean")
        result = 31 * result + ({attribute.name} ? 1 : 0);
        #else
        result = 31 * result + ({attribute.name} != null ? {attribute.name}.hashCode() : 0);
        #end
      #end
      #set (first = false)
    #end

        return result;
  #end
#end

#macro equals()
    @Override
    public boolean equals(Object that) {
  #if (isEntity)
    #equalsBody(entityAttributes())
  #else
    #equalsBody(attributes)
  #end
    }

#end

#macro equalsValue()
  #if (isEntity)
    public boolean equalsValue(Object that) {
    #equalsBody(attributes)
    }

  #end
#end

#macro equalsBody(attributes)
  #if (attributes.isEmpty)
        return super.equals(that);
  #else
        if (this == that) return true;
        if (that == null || getClass() != that.getClass()) return false;

        {classname} state = ({classname})that;

    #foreach (attribute in attributes)
      #if (attribute.isPrimitive)
        if ({attribute.name} != state.{attribute.name) return false;
      #else
        if ({attribute.name} != null ? !{attribute.name}.equals(state.{attribute.name}) : state.{attribute.name} != null) return false;
      #end
    #end

        return true;
  #end
#end

#macro toString()

    @Override
    public String toString() {
  #set (iterator = attributes.iterator())
  #set (hasNext = iterator.hasNext)
  #set (first = true)
  #if (hasNext)
    #set (attribute = iterator.next)
  #end
  #while (hasNext)
    #set (hasNext = iterator.hasNext)
    #set (value = attribute.name)
    #if (hasNext)
      #if (first)
        #if (attribute.isString)
        return "{{attribute.name}=" + ({value} == null ? null : '\'' + {value} + '\'' ) +
        #else
        return "{{attribute.name}=" + {value} +
        #end
      #else
        #if (attribute.isString)
                ", {attribute.name}=" + ({value} == null ? null : '\'' + {value} + '\'' ) +
        #else
                ", {attribute.name}=" + {value} +
        #end
      #end
      #set (attribute = iterator.next)
    #else
      #if (first)
        return "{{attribute.name}=" + {value} + "}";
      #else
        #if (attribute.isString)
                ", {attribute.name}='" + {value} + '\'' + "}";
        #else
                ", {attribute.name}=" + {value} + "}";
        #end
      #end
    #end
    #set (first = false)
  #end
    }
#end

#import "{.}/mutableState.java.laja"

#write "C:/Source/IDEA/Laja/src/testgen/java-new/main/net/sf/laja/cdd/state/PersonState.txt"
package {packagename};

  #imports()
@State
public class {classname} implements ImmutableState {
  #attributes("    ")##
  #if (generatedText != null)
{manualCode}##
{generatedText}
  #else
{manualCode}
    // ===== Generated code =====
  #end

  #constants()
  #constructor()
  #exception()
  #withMethods()
  #asMutable()
  #hashCode()
  #equals()
  #hashCodeValue()
  #equalsValue()
  #toString()
  #set (attributes = state.mutableAttributes)
  #mutableState()
}
#end
