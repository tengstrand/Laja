
#set (packagename = state.packagename)
#set (classname = state.classname)
#set (classvariable = state.classvariable)
#set (mutableClass = state.mutableClass)
#set (attributes = state.attributes)
#set (imports = state.imports)
#set (manualCode = state.manualCode)
#set (generatedText = state.generatedText)

#set (attributeConverter = new net.sf.laja.parser.cdd.AttributeToConstantConverter())

#macro imports()
  #foreach (import in imports)
{import.statement}##
  #end
#end

#macro attributes()
  #foreach (attribute in attributes)
    {attribute.allAnnotations}public final {attribute.typeContent} {attribute.variable};
  #end
#end

#macro constants()
  #foreach (attribute in attributes)
    public static final String {attributeConverter.toConstant(attribute.variable)} = "{attribute.variable}";
  #end

#end

#macro constructor()
    public {classname}(
  #set (iterator = attributes.iterator)
  #set (space = " ")
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
            {attribute.typeContent} {attribute.variable},
    #else
            {attribute.typeContent} {attribute.variable}) {
    #end
  #end
  #foreach (attribute in attributes)
        this.{attribute.variable} = {attribute.variable};
  #end
    }

#end

#macro exception()
    public static class IllegalPersonStateException extends InvalidStateException {
        public IllegalPersonStateException(ValidationErrors errors) {
            super(errors);
        }
    }

#end

#macro withMethods()
  #set (parameterList = "")
  #set (delimiter = "")
  #foreach (attribute in attributes)
    #set (parameterList = "{parameterList}{delimiter}{attribute.variable}")
    #set (delimiter = ", ")
  #end
  #foreach (attribute in attributes)
    public {classname} with{attribute.variableAsClass}({attribute.typeContent} {attribute.variable}) { return new {classname}({parameterList}); }
  #end
#end

#*
#macro mutableStateVariable()
  #if (attribute.isList)
{attribute.variable}##
PersonStateConverter.asMutableList(children),
  #else
{attribute.variable}##
  #end
#end


#macro asMutableState()

    public {mutableClass} asMutableState() {
        return new {mutableClass}(
  #set (iterator = attributes.iterator)
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
            {mutableStateVariable()},
    #else
            {mutableStateVariable()});
    #end
  #end
    }
#end
*#

#write "C:/Source/IDEA/Laja/src/testgen/java-new/main/net/sf/laja/cdd/state/PersonState.txt"
package {packagename};

  #imports()
@State
public class {classname} implements ImmutableState {
  #attributes()##
  #if (generatedText != null)
{manualCode}##
{generatedText}
  #else
{manualCode}
    // ===== Generated code =====
  #end

  #constants()
  #constructor()
  #exception()
  #withMethods()
##  #asMutableState()
}
#end
