#namespace converter

#macro mutableStringConverters(type)
  #if (type.isState)
, toMutableString##
  #else if (type.isMap)
, toMutableMap{mutableStringConverters(type.mapType.entry)}##
  #else if (type.isList)
, toMutableList{mutableStringConverters(type.collectionType.type)}##
  #else if (type.isSet)
, toMutableSet{mutableStringConverters(type.collectionType.type)}##
  #else if (convertPrimitives && !type.isString)
, c.objectToStringConverter()##
  #end
#end

#macro toString()
  #foreach (attribute in attributes)
    #if (attribute.isMap)
        public {attribute.type.asMutableString} {attribute.name}ToString({attribute.type} {attribute.name}) { return asMutableMap({attribute.name}{mutableStringConverters(attribute.type.mapType.entry)}); }
    #else if (attribute.isList)
        public {attribute.type.asMutableString} {attribute.name}ToString({attribute.type} {attribute.name}) { return asMutableList({attribute.name}{mutableStringConverters(attribute.type.collectionType.type)}); }
    #else if (attribute.isSet)
        public {attribute.type.asMutableString} {attribute.name}ToString({attribute.type} {attribute.name}) { return asMutableSet({attribute.name}{mutableStringConverters(attribute.type.collectionType.type)}); }
    #else if (attribute.type.isState)
        public {attribute.type.asMutableString} {attribute.name}ToString({attribute.type} {attribute.name}) { return {attribute.name} != null ? {attribute.name}.asStringState(c) : null; }
    #else if (attribute.isPrimitive)
        public {attribute.type.asMutableString} {attribute.name}ToString({attribute.type} {attribute.name}) { return c.{attribute.type}ToString({attribute.name}); }
    #else if (!attribute.isString)
        public {attribute.type.asMutableString} {attribute.name}ToString({attribute.type} {attribute.name}) { return c.toString({attribute.name}); }
    #else
        public {attribute.type.asMutableString} {attribute.name}ToString({attribute.type} {attribute.name}) { return {attribute.name}; }
    #end
  #end
#end

#macro fromString()

  #foreach (attribute in attributes)
    #set (method = "public {attribute.type} to{attribute.nameAsClass}({attribute.type.asMutableString} {attribute.name}) { return")
    #if (attribute.isMap)
        {method} asMutableMap({attribute.name}{mutableConverters(attribute.type.mapType.entry)}); }
    #else if (attribute.isList)
        {method} asMutableList({attribute.name}{mutableConverters(attribute.type.collectionType.type)}); }
    #else if (attribute.isSet)
        {method} asMutableSet({attribute.name}{mutableConverters(attribute.type.collectionType.type)}); }
    #else if (attribute.type.isState)
        {method} {attribute.name} != null ? {attribute.name}.asMutable() : null; }
    #else if (!attribute.isString)
        {method} c.to{attribute.type.nameAsClass}({attribute.name}); }
    #else
        {method} {attribute.name}; }
    #end
  #end
#end

#macro stringStateConverter()
  #set ($.attributes = state.mutableAttributes)

    public static class {stringConverterClass} {
        private final StringStateConverter c;

        public {stringConverterClass}() { c = new StringStateConverter(); }
        public {stringConverterClass}(StringStateConverter converter) { c = converter; }

  #toString()
  #fromString()
    }
#end
