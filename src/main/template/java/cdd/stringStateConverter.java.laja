#namespace converter

#macro fromString()
  #foreach (attribute in attributes)
    #set (method = "public {attribute.type} to{attribute.nameAsClass}({attribute.type.asMutableString} {attribute.name}) { return")
    #if (attribute.isMap)
        {method} asMutableMap({attribute.name}{mutableConverters(attribute.type.mapType.entry)}); }
    #else if (attribute.isList)
        {method} asMutableList({attribute.name}{mutableConverters(attribute.type.collectionType.type)}); }
    #else if (attribute.isSet)
        {method} asMutableSet({attribute.name}{mutableConverters(attribute.type.collectionType.type)}); }
    #else if (attribute.type.isState)
        {method} {attribute.name} != null ? {attribute.name}.asMutable() : null; }
    #else if (!attribute.isString)
        {method} c.{attribute.type.asType}({attribute.name}); }
    #else
        {method} {attribute.name}; }
    #end
  #end
#end

#macro stringStateConverter()
  #set ($.attributes = state.mutableAttributes)

    public static class {stringConverterClass} {
        private final StringConverter c;

        public {stringConverterClass}() { c = new StringConverter(); }
        public {stringConverterClass}(StringConverter converter) { c = converter; }

  #fromString()
    }
#end
