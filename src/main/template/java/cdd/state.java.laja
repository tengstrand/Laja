
#macro initializeState()
  #set (filename = state.filename)
  #set (statePackagename = state.packagename)
  #set (packageContent = state.packageContent)
  #set (version = state.version)
  #set (classname = state.classname)
  #set (classvariable = state.classvariable)
  #set (mutableClass = state.mutableClass)
  #set (stringClass = state.stringClass)
  #set (stringConverterClass = "{state.stringClass}Converter")
  #set (attributes = state.attributes)
  #set (imports = state.imports)
  #set (manualCode = state.manualCode)
  #set (generatedEnd = state.generatedEnd)
  #set (validateMethod = state.validateMethod)
  #set (isEntity = state.isEntity)
  #set (stateException = "Invalid{classname}Exception")
#end

#macro imports()
  #foreach (import in imports)
{import.statement}##
  #end
  #if (generatedEnd == null)
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import net.sf.laja.cdd.state.ImmutableState;
import net.sf.laja.cdd.state.MutableState;
import net.sf.laja.cdd.state.MutableStringState;
import net.sf.laja.cdd.state.InvalidStateException;
import net.sf.laja.cdd.stateconverter.StringConverter;
import net.sf.laja.cdd.validator.ValidationErrors;
import net.sf.laja.cdd.annotation.Id;
import net.sf.laja.cdd.annotation.Optional;
import net.sf.laja.cdd.annotation.State;
import net.sf.laja.cdd.validator.Validator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

    #set (staticImports = new java.util.TreeSet())
    #staticImports.add("net.sf.laja.cdd.validator.ValidationErrors.concatenate")
    #staticImports.add("net.sf.laja.cdd.stateconverter.StateConversion.*")
    #staticImports.add("net.sf.laja.cdd.stateconverter.StateConverters.*")
    #staticImports.add("net.sf.laja.cdd.validator.Validators.collectionValidator")
    #staticImports.add("net.sf.laja.cdd.validator.Validators.mapValidator")
    #foreach (attribute in attributes where attribute.isState)
      #staticImports.add("{attribute.stateObject.packagename}.{attribute.type}.{attribute.asMutable.type}")
    #end
    #foreach (staticImport in staticImports)
import static {staticImport};
    #end

  #end
#end

#macro attributes(tab, final)
  #foreach (attribute in attributes)
{tab}{attribute.annotationsContent}public {final}{attribute.type} {attribute.name};
  #end
#end

#macro classHeader()
  #if (version < 1)
@State
  #else
@State(version = {version})
  #end
public class {classname} implements ImmutableState {
#end

#macro constants()
  #foreach (attribute in attributes)
    public static final String {attribute.constantName} = "{attribute.name}";
  #end
#end

#macro constructor(constructorClass, validateState, tab)

  #if (attributes.size == 1)
    #singleConstructor(constructorClass, validateState, tab)
  #else
    #multiConstructor(constructorClass, validateState, tab)
  #end
#end

#macro singleConstructor(constructorClass, validateState, tab)
  #set (attribute = attributes.iterator.next)
{tab}public {constructorClass}({attribute.type} {attribute.name}) {
{tab}    this.{attribute.name} = {attribute.name};
  #assertMandatoryAttributes(validateState)
{tab}}
#end

#macro multiConstructor(constructorClass, validateState, tab)
{tab}public {constructorClass}(
  #set (iterator = attributes.iterator)
  #set (space = " ")
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
{tab}        {attribute.type} {attribute.name},
    #else
{tab}        {attribute.type} {attribute.name}) {
    #end
  #end
  #foreach (attribute in attributes)
{tab}    this.{attribute.name} = {attribute.name};
  #end
  #assertMandatoryAttributes(validateState)
{tab}}
#end

#macro assertMandatoryAttributes(validateState)
  #if (validateState)
    #if (state.hasMandatoryObjectAttribute)

      #foreach (attribute in attributes where attribute.isMandatory && !attribute.isPrimitive)
        if ({attribute.name} == null) throw new {stateException}("'{attribute.name}' can not be null");
      #end
    #end

        assertIsValid();
  #end
#end

#macro exception()

    public static class {stateException} extends InvalidStateException {
        public {stateException}(String message) {
            super(message);
        }

        public {stateException}(ValidationErrors errors) {
            super(errors);
        }
    }
#end

#macro assertThat()

    private void assertThat(boolean condition, String message) {
        if (!condition) {
            throw new {stateException}(message);
        }
    }
#end

#macro getters(tab)

  #foreach (attribute in attributes)
{tab}public {attribute.type} get{attribute.nameAsClass}() { return {attribute.name}; }
  #end
#end

#macro withMethods()

  #set (parameterList = "")
  #set (delimiter = "")
  #foreach (attribute in attributes)
    #set (parameterList = "{parameterList}{delimiter}{attribute.name}")
    #set (delimiter = ", ")
  #end
  #foreach (attribute in attributes)
    public {classname} with{attribute.nameAsClass}({attribute.type} {attribute.name}) { return new {classname}({parameterList}); }
  #end
#end

#macro mutableConverters(type)
  #if (type.isState)
, toMutable##
  #else if (type.isMap)
, toMutableMap{mutableConverters(type.mapType.entry)}##
  #else if (type.isList)
, toMutableList{mutableConverters(type.collectionType.type)}##
  #else if (type.isSet)
, toMutableSet{mutableConverters(type.collectionType.type)}##
  #else if (convertPrimitives && !type.isString)
, {type.typeConversionMethod("to")}##
  #end
#end

#macro mutableStateAttribute()
  #if (attribute.type.isMap)
asMutableMap({attribute.name}{mutableConverters(attribute.type.mapType.entry)})##
  #else if (attribute.type.isList)
asMutableList({attribute.name}{mutableConverters(attribute.type.collectionType.type)})##
  #else if (attribute.type.isSet)
asMutableSet({attribute.name}{mutableConverters(attribute.type.collectionType.type)})##
  #else if (attribute.type.isState)
{attribute.name}.asMutable()##
  #else
{attribute.name}##
  #end
#end

#macro asMutable()

  #set (convertPrimitives = false)
  #if (attributes.size == 1)
    #singleAsMutable()
  #else
    #multipleAsMutable()
  #end
#end

#macro singleAsMutable()
  #set (attribute = attributes.iterator.next)
    public {mutableClass} asMutable() {
        return new {mutableClass}({mutableStateAttribute()});
    }
#end

#macro multipleAsMutable()
    public {mutableClass} asMutable() {
        return new {mutableClass}(
  #set (iterator = attributes.iterator)
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
                {mutableStateAttribute()},
    #else
                {mutableStateAttribute()});
    #end
  #end
    }
#end

#function entityAttributes()
  #set (keys = new java.util.ArrayList())
  #foreach (attribute in attributes where attribute.isId)
    ## 1. One @Id was found => use the @Id attribute for identity.
    #keys.add(attribute)
  #end
  #if (keys.size == 0)
    #foreach (attribute in attributes where attribute.isKey)
      ## 2. At least one @Key was found => use @Key attributes for identity.
      #keys.add(attribute)
    #end
  #end
  #return keys
#end

#macro hashCode(tab)

{tab}@Override
{tab}public int hashCode() {
  #if (isEntity)
    #hashCodeBody(entityAttributes(), tab)
  #else
    #hashCodeBody(attributes, tab)
  #end
{tab}}
#end

#macro hashCodeValue(tab)
  #if (isEntity)

    public int hashCodeValue() {
    #hashCodeBody(attributes, tab)
    }
  #end
#end

#macro hashCodeBody(attributes, tab)
  #if (attributes.isEmpty)
{tab}    return super.hashCode();
  #else
    #set (first = true)
    #foreach (attribute in attributes)
      #if (first)
        #if (attribute.isPrimitiveInteger)
{tab}    int result = {attribute.name};
        #else if (attribute.isPrimitiveFloatingPoint)
{tab}    int result = (int){attribute.name};
        #else if (attribute.isLong)
{tab}    int result = (int)({attribute.name} ^ ({attribute.name} >>> 32));
        #else if (attribute.isBoolean)
{tab}    int result = {attribute.name} ? 1 : 0;
        #else
{tab}    int result = {attribute.name} != null ? {attribute.name}.hashCode() : 0;
        #end
      #else
        #if (attribute.isPrimitiveInteger)
{tab}    result = 31 * result + {attribute.name};
        #else if (attribute.isPrimitiveFloatingPoint)
{tab}    result = 31 * result + (int){attribute.name};
        #else if (attribute.isLong)
{tab}    result = 31 * result + (int)({attribute.name} ^ ({attribute.name} >>> 32));
        #else if (attribute.isBoolean)
{tab}    result = 31 * result + ({attribute.name} ? 1 : 0);
        #else
{tab}    result = 31 * result + ({attribute.name} != null ? {attribute.name}.hashCode() : 0);
        #end
      #end
      #set (first = false)
    #end

{tab}    return result;
  #end
#end

#macro equals(stateclass, tab)

{tab}@Override
{tab}public boolean equals(Object that) {
  #if (isEntity)
    #equalsBody(entityAttributes(), stateclass, tab)
  #else
    #equalsBody(attributes, stateclass, tab)
  #end
{tab}}
#end

#macro equalsValue(stateclass, tab)
  #if (isEntity)

    public boolean equalsValue(Object that) {
    #equalsBody(attributes, stateclass, tab)
    }
  #end
#end

#macro equalsBody(attributes, stateclass, tab)
  #if (attributes.isEmpty)
{tab}    return super.equals(that);
  #else
{tab}    if (this == that) return true;
{tab}    if (that == null || getClass() != that.getClass()) return false;

{tab}    {stateclass} state = ({stateclass})that;

    #foreach (attribute in attributes)
      #if (attribute.isPrimitive)
{tab}    if ({attribute.name} != state.{attribute.name}) return false;
      #else
{tab}    if ({attribute.name} != null ? !{attribute.name}.equals(state.{attribute.name}) : state.{attribute.name} != null) return false;
      #end
    #end

{tab}    return true;
  #end
#end

#macro toString(tab)

{tab}@Override
{tab}public String toString() {
  #set (iterator = attributes.iterator())
  #set (hasNext = iterator.hasNext)
  #set (first = true)
  #if (hasNext)
    #set (attribute = iterator.next)
  #end
  #while (hasNext)
    #set (hasNext = iterator.hasNext)
    #set (value = attribute.name)
    #if (hasNext)
      #if (first)
        #if (attribute.isString)
{tab}    return "{{attribute.name}=" + ({value} == null ? null : '\"' + {value} + '\"' ) +
        #else
{tab}    return "{{attribute.name}=" + {value} +
        #end
      #else
        #if (attribute.isString)
{tab}            ", {attribute.name}=" + ({value} == null ? null : '\"' + {value} + '\"' ) +
        #else
{tab}            ", {attribute.name}=" + {value} +
        #end
      #end
      #set (attribute = iterator.next)
    #else
      #if (first)
{tab}    return "{{attribute.name}=" + {value} + "}";
      #else
        #if (attribute.isString)
{tab}            ", {attribute.name}=" + ({value} == null ? null : '\"' + {value} + '\"' ) + "}";
        #else
{tab}            ", {attribute.name}=" + {value} + '}';
        #end
      #end
    #end
    #set (first = false)
  #end
{tab}}
#end

#import "{.}/mutableState.java.laja"
#import "{.}/stringState.java.laja"
#import "{.}/stringStateConverter.java.laja"

#macro stateContent()
{packageContent}##
    #imports()
    #classHeader()
    #attributes("    ", "final ")##
    #if (generatedEnd == null)
{manualCode}
    public void assertIsValid() {
    }

    // ===== Generated code =====
    #else
{manualCode}##
{generatedEnd}
    #end

    #set (tab = "    ")
    #constants()
    #constructor("{classname}", true, tab)
    #assertThat()
    #exception()
    #getters(tab)
    #withMethods()
    #asMutable()
    #hashCode(tab)
    #equals(classname, tab)
    #hashCodeValue(tab)
    #equalsValue(classname, tab)
    #toString(tab)
    #$mutable.mutableState()
    #$string.stringState()
    #$converter.stringStateConverter()
    #set ($.attributes = state.attributes)
}
#end

#macro generateState()
  #initializeState()
  #generateFile(filename, stateContent())
#end
