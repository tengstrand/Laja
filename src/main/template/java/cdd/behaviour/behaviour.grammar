grammar behaviour {
   newline = "\r\n" | "\n";
   comment = ("/*" [(comment | !"*/")+] "*/") | ("//" [!newline+] newline|END);
   ws = (newline | " " | "\t" | comment)+;
   s = [ws];
   ff = "\"";
   str = ff (("\\\"" | !(ff|newline))+):strval ff;

   letter = "a".."z" | "A".."Z" | "_" | "$";
   digit = "0".."9";
   name = letter [letter | digit]+;
   uname = "A".."Z" [letter | digit]+;

   public = ["public" ws];
   packagestatement = "package" ws packagename:statement s ";";
   packagename = name ["." name|"*"]+;
   fullclassname = packagename;

   importstatement = "import" ws ["static":static ws] fullclassname s ";";
   imports = [s importstatement]+;

   parameter = s name:type ws name:variable s;
   parameters = [parameter] ["," s parameter]+;

   statement = "{" s [(statement | str | !"}")+]:innerStatement "}";
   skipCurlyBrace = [!"{"+];
   stateStatement = public "class" ws name [ws "extends" ws uname:extendsClass] skipCurlyBrace "{" [!stateConstructor:x+] stateConstructor;
   stateConstructor = s public name s "(" s ["final" s] name:stateClass ws name parameters skipCurlyBrace statement;

   asMethod = [!newline+ newline]:comment s
              ["public"|"private" ws] uname:returnclass ws ("as" uname):methodName s "(" s parameters s ")" s statement;

   behaviourMethod = "//" s asMethod;
   behaviour = [packagestatement] s [imports] s [stateStatement] [!behaviourMethod:x+|END [behaviourMethod]]+ *;

   Parameters parameters.addParameter(Parameter parameter);

   Statement statement.setInnerStatement(String innerStatement);
   statement.setStatement(String statement);

   Importstatement importstatement.setStatement(String *);
   importstatement.setStatic(void static);
   importstatement.setFullclassname(String fullclassname);

   Imports imports.addImportstatement(Importstatement importstatement);

   StateStatement stateStatement;
   StateConstructor stateConstructor;

   Parameter parameter.setType(String type);
   parameter.setVariable(String variable);

   AsMethod asMethod.setComment(String comment);
   asMethod.setReturnclass(String returnclass);
   asMethod.setMethodName(String methodName);
   asMethod.setParameters(Parameters parameters);
   asMethod.setStatement(Statement statement);

   Behaviour behaviour.setPackageStatement(String packagestatement.statement);
   behaviour.setImports(Imports imports);
   behaviour.setExtendsClass(String stateStatement.extendsClass);
   behaviour.setStateClass(String stateConstructor.stateClass);
   behaviour.setParameters(Parameters stateConstructor.parameters);
   behaviour.addAsMethod(AsMethod behaviourMethod.asMethod);
}
