
#macro imports()
  #set (imports = new java.util.HashSet())
  #foreach (importstatement in behaviour.imports)
    #imports.add(importstatement.statement)
  #end
  #imports.add("import {template.packagename}.*;")
  #imports.add("import java.util.ArrayList;")
  #imports.add("import java.util.Arrays;")
  #imports.add("import java.util.Iterator;")
  #imports.add("import java.util.List;")
  #foreach (importstatement in imports)
{importstatement}
  #end

#end

#macro class()
public class {factoryClass} extends {stateBehaviourClass} {

    public {factoryClass}({stateClass} state) {
        super(state);
    }

  #initChainedCreator(template, true)
  #if (firstChainedAttribute == null)
    public static {encapsulatorClass} create() {
        return new {creatorClass}().create();
    }
  #else
    #if (chainedReturnClass == null)
      #if (firstChainedAttribute.isStateSet || firstChainedAttribute.isStateList)
    public static {encapsulatorClass} {firstChainedAttribute.variable}({firstChainedAttribute.encapsulator}... {firstChainedAttribute.variable}) {
      #else if (firstChainedAttribute.isState)
    public static {encapsulatorClass} {firstChainedAttribute.variable}({firstChainedAttribute.encapsulator} {firstChainedAttribute.variable}) {
      #else
    public static {encapsulatorClass} {firstChainedAttribute.variable}({firstChainedAttribute.type} {firstChainedAttribute.variable}) {
      #end
        return new {creatorClass}().new {firstChainedParameterClass}().{firstChainedAttribute.variable}({firstChainedAttribute.variable});
    }
    #else
      #if (firstChainedAttribute.isStateSet || firstChainedAttribute.isStateList)
    public static {creatorClass}.{chainedReturnClass} {firstChainedAttribute.variable}({firstChainedAttribute.encapsulator}... {firstChainedAttribute.variable}) {
      #else if (firstChainedAttribute.isState)
    public static {creatorClass}.{chainedReturnClass} {firstChainedAttribute.variable}({firstChainedAttribute.encapsulator} {firstChainedAttribute.variable}) {
      #else
    public static {creatorClass}.{chainedReturnClass} {firstChainedAttribute.variable}({firstChainedAttribute.type} {firstChainedAttribute.variable}) {
      #end
        return new {creatorClass}().new {firstChainedParameterClass}().{firstChainedAttribute.variable}({firstChainedAttribute.variable});
    }
    #end
  #end

    public static {builderClass} build() {
        return new {builderClass}();
    }

    public static {setEncapsulatorClass} createSet({encapsulatorClass}... encapsulators) {
        return new {setEncapsulatorClass}(encapsulators);
    }

    public static {listEncapsulatorClass} createList({encapsulatorClass}... encapsulators) {
        return new {listEncapsulatorClass}(encapsulators);
    }
  #foreach (method in behaviour.asMethods where method.isFactory)
    #set (innerFactoryClass = "{method.returnclass}Factory_")

    public static class {innerFactoryClass} implements {template.classname}BehaviourFactory {
        private final {stateBuilderClass} stateBuilder;

        public {innerFactoryClass}({stateBuilderClass} stateBuilder) {
            this.stateBuilder = stateBuilder;
        }

        public Object create({template.stateClass} state, Object... args) {
            Object result = create_(state, args);

            if (!state.isValidAsEncapsulated()) {
                throw new IllegalStateException("Illegal state, could not create behaviour class '{method.returnclass}'");
            }
            state.encapsulate();

            return result;
        }

      private Object create_({template.stateClass} state, Object... args) {
    #if (method.parameters.size > 0)
      #set (counter = counter(0))
      #foreach (parameter in method.parameters)
        {parameter.type} {parameter.variable} = ({parameter.typeAsObject})args[{counter.increase}];
      #end

    #end
        {method.statement}
      }
    }
  #end
}
#end

#macro factoryContent()
package {behaviour.packagename};

    #imports()
    #class()
#end

#if (behaviour.isFactory)
  #set (filename = "{outputDir}/{factoryClass}.java")
  #generateFile(filename, factoryContent())
#end
