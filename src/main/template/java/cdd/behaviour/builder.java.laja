#macro class()
public class {builderClass} {
    public final {stateBuilderClass} builder;

    public {builderClass}() {
        builder = {stateImplClass}.build();
    }

    public {builderClass}({stateClass} state) {
        builder = new {stateBuilderImplClass}(state);
    }

    public {builderClass}({stateClass} state, Object encapsulator) {
        builder = new {stateBuilderImplClass}(state, encapsulator);
    }
  #foreach (attribute in template.attributes where attribute.isBuilderMethod)

    #set (factory = factories.get(attribute.cleanedStateType))
    #if (attribute.isStateSet)
    public {builderClass} {attribute.withMethod}({factory.setEncapsulator} {attribute.variable}) {
        builder.{attribute.withMethod}({attribute.variable}.stateSetBuilder);
        return this;
    }
    #else if (attribute.isStateList)
    public {builderClass} {attribute.withMethod}({factory.listEncapsulator} {attribute.variable}) {
        builder.{attribute.withMethod}({attribute.variable}.stateListBuilder);
        return this;
    }
    #else if (attribute.isState)
    public {builderClass} {attribute.withMethod}({factory.builderClass} {attribute.variable}) {
        builder.{attribute.withMethod}({attribute.variable}.builder);
        return this;
    }
    #else
    public {builderClass} {attribute.withMethod}({attribute.type} {attribute.variable}) {
        builder.{attribute.withMethod}({attribute.variable});
        return this;
    }
    #end
  #end

    public boolean isValid() {
        return builder.isValid();
    }
  #foreach (method in behaviour.asMethods where method.isFactory)
    #setArgumentsAndParameters(method, false)

    public {method.returnclass} {method.methodName}({parameters}) {
        return ({method.returnclass})builder.as(new {factoryClass}.{method.returnclass}Factory_(builder){extraArguments});
    }
  #end
}
#end

#macro importsBuilder()
  #set (imports = new java.util.HashSet())
  #foreach (attribute in template.attributes where attribute.isBuilderMethod)
    #set (factory = factories.get(attribute.cleanedStateType))
    #if (factory != null && factory.packagename != behaviour.packagename)
      #imports.add("{factory.packagename}.{factory.builderClass}")
    #end
  #end
  #foreach (import in imports)
import {import};
  #end
#end

#macro fileContent()
package {behaviour.packagename};

    #importsBegin()
    #importsBuilder()
    #importsSetEncapsulator()
    #importsListEncapsulator()
    #importsEnd()
    #class()
#end

#if (behaviour.isFactory)
  #set (filename = "{outputDir}/{builderClass}.java")
  #generateFile(filename, fileContent())
#end
