
#macro class()
public class {encapsulatorClass} implements {stateComparable} {
    public final {stateBuilderClass} builder;

    public {encapsulatorClass}({stateBuilderClass} builder) {
        this.builder = builder;
    }
  #foreach (method in behaviour.asMethods where method.isFactory)
    #setArgumentsAndParameters(method, false)

    public {method.returnclass} {method.methodName}({parameters}) {
        return ({method.returnclass})builder.as(new {factoryClass}.{method.returnclass}Factory_(builder){extraArguments});
    }
  #end
  #foreach (attribute in template.attributes where attribute.isOptional && !attribute.isHidden)

    #set (factory = factories.get(attribute.cleanedStateType))
    #if (attribute.isStateSet)
    public {encapsulatorClass} {attribute.withMethod}({factory.encapsulator}... {attribute.variable}) {
        {factory.setEncapsulator} encapsulator = new {factory.setEncapsulator}({attribute.variable});
        builder.{attribute.withMethod}(encapsulator.stateSetBuilder);
        return this;
    }
    #else if (attribute.isStateList)
    public {encapsulatorClass} {attribute.withMethod}({factory.encapsulator}... {attribute.variable}) {
        {factory.listEncapsulator} encapsulator = new {factory.listEncapsulator}({attribute.variable});
        builder.{attribute.withMethod}(encapsulator.stateListBuilder);
        return this;
    }
    #else if (attribute.isState)
    public {encapsulatorClass} {attribute.withMethod}({factory.encapsulator} {attribute.variable}) {
        builder.{attribute.withMethod}({attribute.variable}.builder);
        return this;
    }
    #else
    public {encapsulatorClass} {attribute.withMethod}({attribute.type} {attribute.variable}) {
        builder.{attribute.withMethod}({attribute.variable});
        return this;
    }
    #end
  #end

    public boolean isValid() {
         return builder.isValid();
    }

    @Override
    public int hashCode() {
        return builder.hashCode();
    }

#* fix!
    public boolean equalsState({stateClass} state) {
        return builder.equalsState(state);
    }
*#

    @Override
    public boolean equals(Object obj) {
        return builder.equals(obj);
    }

    @Override
    public String toString() {
        return builder.toString();
    }
}
#end

#macro fileContent()
package {behaviour.packagename};

    #importsBegin()
    #importStateComparable()
    #importsEncapsulator()
    #importsSetEncapsulator()
    #importsListEncapsulator()
    #importsEnd()
    #class()
#end

#if (behaviour.isFactory)
  #set (filename = "{outputDir}/{encapsulatorClass}.java")
  #generateFile(filename, fileContent())
#end
