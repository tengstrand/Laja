
#macro newElements()
            {stateListClass} newElements = new {stateArrayListClass}();
            for ({entryClass} element : collection) {
                newElements.add(element.getState(stateList.certificate()));
            }
#end

#macro fileContent()
package {packagename};

import {statePackagename}.*;
import {behaviour.packagename}.*;
  #listImports()
import java.util.*;

  #header()
public class {arrayListClass} implements {listInterface}, RandomAccess, Cloneable, java.io.Serializable {
    protected {stateListClass} stateList;
    protected final List<{entryClass}> list;

    public {arrayListClass}({entryClass}... array) {
        this.list = new ArrayList<{entryClass}>();
        this.list.addAll(Arrays.asList(array));
    }

    public {arrayListClass}(Collection<{entryClass}> collection) {
        this.list = new ArrayList<{entryClass}>();
        this.list.addAll(collection);
    }
  #if (method.isFactory)

    #setArgumentsAndParameters(method, true)
    public {arrayListClass}({stateListClass} stateList{parameters}) {
        this.stateList = stateList;
        this.stateList.encapsulate(this);
        List<{entryClass}> elements = new ArrayList<{entryClass}>(stateList.size());

        for ({stateClass} state : stateList) {
            {stateBuilderClass} builder = new {stateBuilderImplClass}(state);
            {entryClass} entry = ({entryClass}) builder.as(new {factoryClass}.{entryClass}Factory_(builder){arguments});
            elements.add(entry);
        }
        this.list = new StateInSyncList(stateList, elements);
    }
  #end
  #foreach (m in asBehaviour.asMethods where m.methodName != method.methodName)
    #setArgumentsAndParameters(m, false)

    public {m.arrayListClass} {m.methodName}List({parameters}) {
    #if (m.isFactory)
        if (stateList != null) {
            return new {m.arrayListClass}(stateList{extraArguments});
        }
    #end
        List<{m.returnclass}> result = new ArrayList<{m.returnclass}>();
        for ({entryClass} entry : list) {
            result.add(entry.{m.methodName}({arguments}));
        }
        return new {m.arrayListClass}(result);
    }
  #end

    public class StateInSyncList extends ArrayList<{entryClass}> {
        private final {stateListClass} stateList;

        public StateInSyncList({stateListClass} stateList, List<{entryClass}> elements) {
            this.stateList = stateList;
            super.addAll(elements);
        }

        @Override
        public boolean add({entryClass} element) {
            stateList.throwExceptionIfNotEncapsulatedBy({arrayListClass}.this);
            stateList.add(element.getState(stateList.certificate()));
            return super.add(element);
        }

        @Override
        public void add(int index, {entryClass} element) {
            stateList.throwExceptionIfNotEncapsulatedBy({arrayListClass}.this);
            stateList.add(index, element.getState(stateList.certificate()));
            super.add(index, element);
        }

        @Override
        public boolean addAll(Collection<? extends {entryClass}> collection) {
            stateList.throwExceptionIfNotEncapsulatedBy({arrayListClass}.this);
            boolean modified = super.addAll(collection);

            for ({entryClass} element : collection) {
                stateList.add(element.getState(stateList.certificate()));
            }
            return modified;
        }

        @Override
        public boolean addAll(int index, Collection<? extends {entryClass}> collection) {
            stateList.throwExceptionIfNotEncapsulatedBy({arrayListClass}.this);
            boolean modified = super.addAll(index, collection);

            List elements = new ArrayList(collection.size());
            for ({entryClass} element : collection) {
                elements.add(element.getState(stateList.certificate()));
            }
            stateList.addAll(index, elements);

            return modified;
        }

        @Override
        public boolean remove(Object element) {
            stateList.throwExceptionIfNotEncapsulatedBy({arrayListClass}.this);
            if (!(element instanceof {entryClass})) {
                return false;
            }
            stateList.remove((({entryClass}) element).getState(stateList.certificate()));

            return super.remove(element);
        }

        @Override
        public boolean removeAll(Collection<?> collection) {
            stateList.throwExceptionIfNotEncapsulatedBy({arrayListClass}.this);
            List states = new ArrayList(collection.size());
            List elements = new ArrayList(collection.size());
            for (Object element : collection) {
                if (element instanceof {entryClass}) {
                    elements.add(element);
                    states.add((({entryClass})element).getState(stateList.certificate()));
                }
            }
            boolean modified = super.removeAll(elements);
            stateList.removeAll(states);

            return modified;
        }

        @Override
        public boolean retainAll(Collection<?> collection) {
            stateList.throwExceptionIfNotEncapsulatedBy({arrayListClass}.this);
            List states = new ArrayList(collection.size());
            List elements = new ArrayList(collection.size());
            for (Object element : collection) {
                if (element instanceof {entryClass}) {
                    elements.add(element);
                    states.add((({entryClass})element).getState(stateList.certificate()));
                }
            }
            boolean modified = super.retainAll(elements);
            stateList.retainAll(states);

            return modified;
        }

        @Override
        public void clear() {
            stateList.throwExceptionIfNotEncapsulatedBy({arrayListClass}.this);
            stateList.clear();
            super.clear();
        }

        @Override
        public {entryClass} set(int index, {entryClass} element) {
            stateList.throwExceptionIfNotEncapsulatedBy({arrayListClass}.this);
            stateList.set(index, element.getState(stateList.certificate()));
            return super.set(index, element);
        }

        @Override
        public {entryClass} remove(int index) {
            stateList.throwExceptionIfNotEncapsulatedBy({arrayListClass}.this);
            stateList.remove(index);
            return super.remove(index);
        }
    }

    public int size() {
        return list.size();
    }

    public boolean isEmpty() {
        return list.isEmpty();
    }

    public boolean contains(Object element) {
        return list.contains(element);
    }

    public Iterator<{entryClass}> iterator() {
        return list.iterator();
    }

    public Object[] toArray() {
        return list.toArray();
    }

    public <{entryClass}> {entryClass}[] toArray({entryClass}[] array) {
        return list.toArray(array);
    }

    public boolean add({entryClass} element) {
        return list.add(element);
    }

    public void add(int index, {entryClass} element) {
        list.add(index, element);
    }

    public boolean addAll(Collection<? extends {entryClass}> collection) {
        return list.addAll(collection);
    }

    public boolean addAll(int index, Collection<? extends {entryClass}> collection) {
        return list.addAll(index, collection);
    }

    public boolean remove(Object element) {
        if (!(element instanceof {entryClass})) {
            return false;
        }
        return list.remove(element);
    }

    public boolean containsAll(Collection<?> collection) {
        return list.containsAll(collection);
    }

    public boolean removeAll(Collection<?> collection) {
        return list.removeAll(collection);
    }

    public boolean retainAll(Collection<?> collection) {
        return list.retainAll(collection);
    }

    public void clear() {
        list.clear();
    }

    public {entryClass} get(int index) {
        return list.get(index);
    }

    public {entryClass} set(int index, {entryClass} element) {
        return list.set(index, element);
    }

    public {entryClass} remove(int index) {
        return list.remove(index);
    }

    public int indexOf(Object element) {
        return list.indexOf(element);
    }

    public int lastIndexOf(Object element) {
        return list.lastIndexOf(element);
    }

    public ListIterator<{entryClass}> listIterator() {
        return list.listIterator();
    }

    public ListIterator<{entryClass}> listIterator(int index) {
        return list.listIterator(index);
    }

    public List<{entryClass}> subList(int fromIndex, int toIndex) {
        return list.subList(fromIndex, toIndex);
    }

    @Override
    public boolean equals(Object o) {
        return list.equals(o);
    }

    @Override
    public int hashCode() {
        return list.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + "{" + list + '}';
    }
}
#end

#foreach (method in behaviour.asMethods)
  #prepareCollection(outputDir, outDir)

  #if (!processedArrayLists.contains(arrayListClass))
    #processedArrayLists.add(arrayListClass)
    #if (!directoryExists(collectionOutputDir))
      #createDirectoryPath(collectionOutputDir)
    #end
    #set (filename = "{collectionOutputDir}/{arrayListClass}.java")
    #generateFile(filename, fileContent())
  #end
#end