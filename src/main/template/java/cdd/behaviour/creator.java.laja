
#set (mandatoryAttributes = new java.util.ArrayList())
#foreach (attribute in template.attributes where attribute.isMandatory && !attribute.isHidden)
  #mandatoryAttributes.add(attribute)
#end

#macro class()
public class {creatorClass} {
    private final {stateBuilderClass} builder = {stateImplClass}.build();
  #set (iterator = mandatoryAttributes.iterator())
  #set (hasNext = iterator.hasNext)
  #if (hasNext)
    #set (attribute = iterator.next)
    #set (currentClass = "{strings.capitalize(attribute.variable)}_")
  #end
  #while (hasNext)
    #set (hasNext = iterator.hasNext)
    #if (hasNext)
      #set (nextAttribute = iterator.next)
      #set (nextClass = "{strings.capitalize(nextAttribute.variable)}_")

    public class {currentClass} {
      #if (attribute.isStateSet)
        public {nextClass} {attribute.variable}() {
            return new {nextClass}();
        }

        public {nextClass} {attribute.variable}({attribute.setEncapsulator} {attribute.variable}) {
            builder.{attribute.withMethod}({attribute.variable}.stateSetBuilder);
            return new {nextClass}();
        }
      #else if (attribute.isStateList)
        public {nextClass} {attribute.variable}() {
            return new {nextClass}();
        }

        public {nextClass} {attribute.variable}({attribute.listEncapsulator} {attribute.variable}) {
            builder.{attribute.withMethod}({attribute.variable}.stateListBuilder);
            return new {nextClass}();
        }
      #else if (attribute.isState)
        public {nextClass} {attribute.variable}({attribute.encapsulator} {attribute.variable}) {
            builder.{attribute.withMethod}({attribute.variable}.builder);
            return new {nextClass}();
        }
      #else
        public {nextClass} {attribute.variable}({attribute.type} {attribute.variable}) {
            builder.{attribute.withMethod}({attribute.variable});
            return new {nextClass}();
        }
      #end
      #set (attribute = nextAttribute)
      #set (currentClass = nextClass)
    #else

    public class {currentClass} {
      #if (attribute.isStateSet)
        public {encapsulatorClass} {attribute.variable}({attribute.encapsulator}... {attribute.variable}) {
            {attribute.setEncapsulator} encapsulator = new {attribute.setEncapsulator}({attribute.variable});
            builder.{attribute.withMethod}(encapsulator.stateSetBuilder);
            return create();
        }
      #else if (attribute.isStateList)
        public {encapsulatorClass} {attribute.variable}({attribute.encapsulator}... {attribute.variable}) {
            {attribute.listEncapsulator} encapsulator = new {attribute.listEncapsulator}({attribute.variable});
            builder.{attribute.withMethod}(encapsulator.stateListBuilder);
            return create();
        }
      #else if (attribute.isState)
        #set (behaviourFactory = behavioursFactories.get(attribute.cleanedStateType))
        public {encapsulatorClass} {attribute.variable}({behaviourFactory.encapsulatorClass} {attribute.variable}) {
            builder.{attribute.withMethod}({attribute.variable}.builder);
            return create();
        }
      #else
        public {encapsulatorClass} {attribute.variable}({attribute.type} {attribute.variable}) {
            builder.{attribute.withMethod}({attribute.variable});
            return create();
        }
      #end
    #end
    }
  #end

    public {encapsulatorClass} create() {
        return new {encapsulatorClass}(builder);
     }
}
#end

#macro importsEncapsulatorRef()
  #foreach (attribute in template.attributes where attribute.isMandatory && attribute.isState && !attribute.isHidden)
    #set (behaviourRef = behavioursFactories.get(attribute.cleanedStateType))
    #if (behaviour.packagename != behaviourRef.packagename)
import {behaviourRef.packagename}.{attribute.getEncapsulator};
    #end
  #end
#end

#macro fileContent()
package {behaviour.packagename};

    #importsBegin()
    #importsEncapsulator()
    #importsEncapsulatorRef()
    #importsListEncapsulator()
    #importsEnd()
    #class()
#end

#if (behaviour.isFactory)
  #set (filename = "{outputDir}/{creatorClass}.java")
  #generateFile(filename, fileContent())
#end
