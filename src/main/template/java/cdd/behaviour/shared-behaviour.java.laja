
#set (srcDir = behaviour.srcDir)
#set (sourceDir = behaviour.sourceDir)
#set (outDir = behaviour.outDir)
#set (outputDir = behaviour.outputDir)
#set (behaviourFile = behaviour.srcFilename)
#set (behaviourClass = behaviour.classname)
#set (behaviourInterface = behaviour.interfacename)
#set (builderClass = behaviour.builderClass)
#set (factoryClass = behaviour.factoryClass)
#set (constructorClass = "{behaviourClass}Constructor")
#set (creatorClass = "{behaviour.classname}Creator")
#set (encapsulatorClass = "{behaviour.classname}Encapsulator")
#set (setEncapsulatorClass = "{behaviour.classname}SetEncapsulator")
#set (listEncapsulatorClass = "{behaviour.classname}ListEncapsulator")

#set (stateClass = behaviour.stateClass)
#set (stateImplClass = behaviour.stateImplClass)
#set (stateComparable = behaviour.stateComparable)
#set (stateSetClass = "{stateClass}Set")
#set (stateListClass = "{stateClass}List")
#set (stateArrayListClass = "{stateClass}ArrayList")

#set (stateBuilderClass = "{stateClass}Builder")
#set (stateBuilderImplClass = "{stateBuilderClass}Impl")
#set (stateBehaviourClass = "{behaviour.cleanedStateClass}Behaviour")
#set (stateSetBuilder = "{stateClass}SetBuilder")
#set (stateListBuilder = "{stateClass}ListBuilder")

#set (template = templates.get(behaviour.cleanedStateClass))
#if (template == null)
  #error ("Could not find the state object '{behaviour.cleanedStateClass}' referenced from '{behaviourClass}'. Valid state classes are: {templates.keySet()}")
#end

#macro setArgumentsAndParameters(m, isNextArgument)
  #setArgumentsAndParametersWithExclusion(m, isNextArgument, null)
#end

#macro setArgumentsAndParametersWithExclusion(m, isNextArgument, excludedParameters)
  #set (parameters = "")
  #set (arguments = "")
  #set (extraArguments = "")
  #set (delimiter = "")
  #foreach (parameter in m.parameters)
    #set (exclude = false)
    #if (excludedParameters != null)
      #foreach (ep in excludedParameters where !exclude && ep.type == parameter.type && ep.variable == ep.variable)
        #set (exclude = true)
      #end
    #end
    #if (!exclude)
      #set (parameters = "{parameters}{delimiter}{parameter.type} {parameter.variable}")
      #set (arguments = "{arguments}{delimiter}{parameter.variable}")
      #set (delimiter = ", ")
      #set (extraArguments = "{extraArguments}{delimiter}{parameter.variable}")
    #end
  #end
  #if (isNextArgument)
    #if (parameters.length > 0)
      #set (parameters = ", {parameters}")
      #set (arguments = ", {arguments}")
    #end
  #end
#end

#macro prepareCollection(outputDirArg, outDirArg)
  #set (entryClass = method.returnclass)
  #set (setInterface = method.setInterface)
  #set (listInterface = method.listInterface)
  #set (hashSetClass = method.hashSetClass)
  #set (arrayListClass = method.arrayListClass)
  #set (packagename = behaviour.packagename)
  #set (collectionOutputDir = outputDirArg)
  #set (asBehaviour = behaviours.get(entryClass))
  #if (asBehaviour == null)
    #set (asBehaviour = behaviour)
  #end
  #set (statePackagename = templates.get(asBehaviour.cleanedStateClass).packagename)
  #set (stateClass = asBehaviour.stateClass)
  #set (stateSetClass = "{stateClass}Set")
  #set (stateHashSetClass = "{stateClass}HashSet")
  #set (stateListClass = "{stateClass}List")
  #set (stateBuilderClass = "{stateClass}Builder")
  #set (stateBuilderImplClass = "{stateBuilderClass}Impl")
  #foreach (import in behaviour.imports where import.endsWithType(method.returnclass))
    #set (packagename = statementConverter.asPackageName(import.fullclassname))
    #set (collectionOutputDir = directoryConverter.asDirectory(outDirArg, import.fullclassname))
  #end
#end

#macro importsBegin()
import {template.packagename}.*;
  #foreach (import in behaviour.imports)
{import.statement}
  #end
  #foreach (import in template.imports)
{import.statement}
  #end
#end

#macro importsEncapsulator()
  #set (imports = new java.util.HashSet())
  #foreach (attribute in template.attributes where attribute.isState && attribute.isOptional && attribute.isBuilderMethod)
    #set (factory = factories.get(attribute.cleanedStateType))
    #if (behaviour.packagename != factory.packagename)
      #imports.add("{factory.packagename}.{factory.encapsulatorClass}")
    #end
  #end
  #foreach (import in imports)
import {import};
  #end
#end

#macro importsSetEncapsulator()
  #foreach (attribute in template.attributes where attribute.isBuilderMethod && attribute.isStateSet)
    #set (factory = factories.get(attribute.cleanedStateType))
    #if (factory == null)
      #error("Could not find behaviour class '{attribute.cleanedStateType}' in {factories.keySet()}")
    #end
    #if (behaviour.packagename != factory.packagename)
import {factory.packagename}.{factory.setEncapsulator};
    #end
  #end
#end

#macro importsListEncapsulator()
  #foreach (attribute in template.attributes where attribute.isBuilderMethod && attribute.isStateList)
    #set (factory = factories.get(attribute.cleanedStateType))
    #if (factory == null)
      #error("Could not find behaviour class '{attribute.cleanedStateType}' in {behaviours.keySet()}")
    #end
    #if (behaviour.packagename != factory.packagename)
import {factory.packagename}.{factory.listEncapsulator};
    #end
  #end
#end

#macro importsEnd()

#end

#macro collectionImports(isList)
  #foreach (m in asBehaviour.asMethods where m.methodName != method.methodName)
    #set (behaviourRef = behaviours.get(m.returnclass))
    #if (behaviourRef == null)
      #error ("Could not find behaviour class {m.returnclass}")
    #end
    #if (behaviourRef.packagename != packagename)

import {behaviourRef.packagename}.{m.returnclass};
      #if (isList)
import {behaviourRef.packagename}.{m.listInterface};
import {behaviourRef.packagename}.{m.arrayListClass};
      #else
import {behaviourRef.packagename}.{m.setInterface};
import {behaviourRef.packagename}.{m.hashSetClass};
      #end
    #end
  #end
  #if (!method.isFactory)
    #set (first = true)
    #foreach (m in behaviour.asMethods where m.isFactory && first)
      #set (behaviourRef = behaviours.get(m.returnclass))
      #if (behaviourRef.packagename != packagename)

import {behaviourRef.packagename}.{m.returnclass};
import {behaviourRef.packagename}.{m.returnclass}Factory;
      #end
      #set (first = false)
    #end
  #end
#end

#macro setImports()
  #collectionImports(false)
#end

#macro listImports()
  #collectionImports(true)
#end
