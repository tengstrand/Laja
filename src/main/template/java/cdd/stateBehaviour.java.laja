#macro class()
  #header()
public class {stateBehaviourClass} implements {stateComparable} {
    protected final {stateClass} state;

    public {stateBehaviourClass}({stateClass} state) {
        this.state = state;
        state.setEncapsulator(this);
    }

    public {stateClass} getState(Certificate certificate) {
        if (certificate == null) {
            throw new IllegalArgumentException("Certificate can not be null!");
        }
        return state;
    }
#*
    // TODO: fix!
    public boolean equalsState({stateClass} state) {
        return this.state.equalsState(state);
    }
*#
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof {stateComparable})) return false;
        return state.equals(obj);
    }

    @Override
    public int hashCode() {
        return state.hashCode();
    }

    @Override
    public String toString() {
        return getClass().getSimpleName() + state;
    }
}
#end

#macro fileContent()
    #package()
    #importBegin()
    #importCertificate()
    #importEnd()
    #class()
#end

#set (filename = "{outputDir}/{stateBehaviourClass}.java")
#generateFile(filename, fileContent())
