
#macro import()
  #foreach (template in templates.values())
import {template.packagename}.{template.stateImplClass};
import {template.packagename}.{template.stateClass}ListImpl;
import {template.packagename}.{template.stateClass}BuilderImpl;
  #end

#end

#macro class()
/**
 * Code generated by Laja - Do not change!
 * Version: {lajaVersion}
 *
 *   http://laja.tengstrand.nu
 */
public class {certificateClass} {
    Certificate() {
    }

    private static Certificate certificate(Object state) {
        if (state == null) {
            throw new IllegalArgumentException();
        }
        return new Certificate();
    }
  #foreach (template in templates.values())

    public static Certificate get({template.stateImplClass} state) { return certificate(state); }
    public static Certificate get({template.stateClass}ListImpl state) { return certificate(state); }
    public static Certificate get({template.stateClass}BuilderImpl state) { return certificate(state); }
  #end
}
#end

#if (!directoryExists(certificatePath))
  #createDirectoryPath(certificatePath)
#end

#macro fileContent()
package {certificatePackage};

  #import()
  #class()
#end

#set (filename = "{certificatePath}/{certificateClass}.java")
#generateFile(filename, fileContent())
