#namespace map

#macro classHeader()
  #if (version < 1)
    @State(type = "map")
  #else
    @State(version = {version}, type = "map")
  #end
    public static class {mapClass} extends MapState {
#end

#macro emptyConstructor()

        public {mapClass}() {
  #foreach (attribute in attributes)
    #if (attribute.isOptional && attribute.optional.valueFor("defaultValue") != null)
            put("{attribute.name}", {attribute.optional.valueFor("defaultValue")});
    #else
      #if (attribute.isSet)
            put("{attribute.name}", new Hash{attribute.type}());
      #else if (attribute.isList)
            put("{attribute.name}", new Array{attribute.type}());
      #else if (attribute.isMap)
            put("{attribute.name}", new HashMap<{attribute.type.mapType.key},{attribute.type.mapType.entry}>());
      #end
    #end
  #end
        }
#end

#macro getters(tab)

  #foreach (attribute in attributes)
{tab}public {attribute.type} get{attribute.nameAsClass}() { return ({attribute.type}) get("{attribute.name}"); }
  #end
#end

#macro setters()

  #foreach (attribute in attributes)
        public void set{attribute.nameAsClass}({attribute.type} {attribute.name}) { put("{attribute.name}", {attribute.name}); }
  #end
#end

#macro withMethods()

  #foreach (attribute in attributes)
        public {mapClass} with{attribute.nameAsClass}({attribute.type} {attribute.name}) { put("{attribute.name}", {attribute.name}); return this; }
  #end
#end


#macro mapState()
  #set ($.attributes = state.mutableAttributes)
  #set (tab = "        ")

  #classHeader()
  #emptyConstructor()
  #constructor(true, mapClass, false, tab)
  #getters(tab)
  #setters()
  #withMethods()
    }
#end
