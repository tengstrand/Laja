#macro class()
  #header()
public class {stateProjectionClass} {

    {stateProjectionClass}() {
    }

  #initChainedCreator($, false)
  #if (chainedReturnClass == null)
    public static {stateProjectionClass} {firstChainedAttribute.variable}({firstChainedAttribute.type} {firstChainedAttribute.variable}) {
        return new {stateProjectionClass}();
    }
  #else
    public static {stateProjectionClass}.{chainedReturnClass} {firstChainedAttribute.variable}({firstChainedAttribute.type} {firstChainedAttribute.variable}) {
        return new {stateProjectionClass}().new {chainedReturnClass}();
    }
    #set (iterator = attributes.iterator())
    #set (hasNext = iterator.hasNext)
    #if (hasNext)
      #set (attribute = iterator.next)
      #set (currentClass = "{strings.capitalize(attribute.variable)}_")
    #end
    #while (hasNext)
      #set (hasNext = iterator.hasNext)
      #if (hasNext)
        #set (nextAttribute = iterator.next)
        #set (nextClass = "{strings.capitalize(nextAttribute.variable)}_")

    public class {currentClass} {
        public {nextClass} {attribute.variable}({attribute.type} {attribute.variable}) {
            return new {nextClass}();
        }
        #set (attribute = nextAttribute)
        #set (currentClass = nextClass)
      #else

    public class {currentClass} {
        public {stateProjectionClass} {attribute.variable}({attribute.type} {attribute.variable}) {
            return {stateProjectionClass}.this;
        }
      #end
    }
    #end
  #end
}
#end

#macro fileContent()
  #package()
  #importBegin(false)
  #importState()
  #importStateArrayList()
  #importEnd()
  #class()
#end

#set (filename = "{outputDir}/{stateProjectionClass}.java")
#generateFile(filename, fileContent())
