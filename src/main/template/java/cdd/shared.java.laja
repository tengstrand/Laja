
#set (certificateClass = "Certificate")
#set (stateClass = "{classname}State")
#set (stateListClass = "{stateClass}List")
#set (stateClassTemplate = "{stateClass}Template")
#set (stateListClass = "{stateClass}List")
#set (stateListImplClass = "{stateClass}ListImpl")
#set (builderClass = "{stateClass}Builder")
#set (builderImplClass = "{stateClass}BuilderImpl")
#set (stateProjectionClass = "{stateClass}Projection")
#set (stateListBuilder = "{stateListClass}Builder")
#set (valueClass = "{classname}Value")
#set (entityClass = "{classname}Entity")
#set (elementClass = "{classname}Element")
#set (stateBehaviourFactoryClass = "{stateClass}BehaviourFactory")

#macro oldFileContent(filename)
  #import "{filename}" as text
#end

#macro generateFile(filename, content)
  #if (fileExists(filename))
    #set (oldContent = oldFileContent(filename))
    #set (status = "unchanged")
    #if (oldContent != content)
      #set (status = "changed")
    #end
  #else
    #set (status = "new")
  #end
  #if (status != "unchanged")
    #write "{filename}"
{content}##
    #end
  #end
  #processedFiles.add(filename, status)
#end

#function setter(attribute)
  #return "{attribute.setter}({attribute.type} {attribute.variable})"
#end

#set (mandatoryAttributes = new java.util.ArrayList())
#foreach (attribute in attributes where attribute.isMandatory)
  #mandatoryAttributes.add(attribute)
#end

#macro initChainedCreator(template, mandatory)
  #set (firstChainedAttribute = null)
  #set (chainedReturnClass = null)
  #foreach (attribute in template.attributes where chainedReturnClass == null)
    #if (!mandatory || (attribute.isMandatory && !attribute.isHidden))
      #if (firstChainedAttribute == null)
        #set (firstChainedAttribute = attribute)
        #set (firstChainedParameterClass = "{strings.capitalize(attribute.variable)}_")
        #set (firstChainedIsConverter = false)
        #foreach (convertMethod in template.convertMethods where convertMethod.variable == attribute.variable)
          #set (firstChainedIsConverter = true)
        #end
      #else
        #set (chainedReturnClass = "{strings.capitalize(attribute.variable)}_")
      #end
    #end
  #end
#end

#macro header()
/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.sf.net
 */
#end

#macro package()
package {package};

#end

#macro importBegin(importExpanded)
  #set (hasImports = false)
  #if (importExpanded)
    #foreach (importstatement in allImports)
{importstatement.statement}
      #set (hasImports = true)
    #end
  #else
    #foreach (importstatement in imports)
{importstatement.statement}
      #set (hasImports = true)
    #end
  #end
  #foreach (method in stateMethods)
    #foreach (template in templates.values() where template.classname == method.classname)
import {template.packagename}.{template.classname}State;
      #set (hasImports = true)
    #end
  #end
#end

#macro importExpandedType(expandedTypeSuffix)
  #foreach (expandedType in allExpandedTypes)
    #foreach (suffix in expandedTypeSuffix.split(","))
import {expandedType.importStatement}{suffix};
      #set (hasImports = true)
    #end
  #end
#end

#macro importState()
  #foreach (attribute in attributes where attribute.isState)
    #foreach (key in templates.keySet() where key == attribute.cleanedStateType)
      #set (template = templates.get(key))
import {template.packagename}.{attribute.type};
      #set (hasImports = true)
    #end
  #end
#end

#macro importStateListImpl()
  #foreach (attribute in attributes where attribute.isStateList)
    #foreach (key in templates.keySet() where key == attribute.cleanedStateType)
      #set (template = templates.get(key))
import {template.packagename}.{template.stateClass}ListImpl;
      #set (hasImports = true)
    #end
  #end
#end

#macro importStateBuilder()
  #foreach (attribute in attributes where attribute.isState && !attribute.isExpand)
    #set (template = templates.get(attribute.cleanedStateType))
    #if (template != null)
      #stateImports.add("import {template.packagename}.{attribute.stateBuilder}")
      #set (hasImports = true)
    #end
  #end
#end

#macro prepareStateImports()
  #set (stateImports = new java.util.LinkedHashSet())
#end

#macro importStates()
  #foreach (import in stateImports)
{import};
  #end
#end

#macro importStateBuilderImpl()
  #foreach (attribute in attributes where attribute.isState && !attribute.isExpand)
    #set (template = templates.get(attribute.cleanedStateType))
    #if (template != null)
      #stateImports.add("import {template.packagename}.{attribute.stateBuilderImpl}")
      #set (hasImports = true)
    #end
  #end
  #foreach (method in stateMethods)
    #foreach (template in templates.values() where template.classname == method.classname)
      #stateImports.add("import {template.packagename}.{method.stateBuilderImplClass}")
      #set (hasImports = true)
    #end
  #end
#end

#macro importProjectedStateBuilder()
  #foreach (method in stateMethods)
    #foreach (template in templates.values() where template.classname == method.classname)
import {template.packagename}.{method.stateBuilderClass};
      #set (hasImports = true)
    #end
  #end
#end

#macro importCertificate()
import {certificatePackage}.{certificateClass};
    #set (hasImports = true)
#end

#macro importEnd()
  #if (hasImports)

  #end
#end

#macro declareAttributes()
  #foreach (attribute in attributes)
    protected {attribute.type} {attribute.variable}{attribute.initialStatement};{attribute.comment}
  #end
#end

#function arguments()
  #set (result = "")
  #set (delimiter = "")
  #foreach (attribute in mandatoryAttributes)
    #set (result = "{result}{delimiter}{attribute.variable}")
    #set (delimiter = ", ")
  #end
  #return result
#end

#function parameters()
  #set (result = "")
  #set (delimiter = "")
  #foreach (attribute in mandatoryAttributes)
    #set (result = "{result}{delimiter}{attribute.type} {attribute.variable}")
    #set (delimiter = ", ")
  #end
  #return result
#end

#function interfaceImports(suffix)
  #set (extends = "")
  #if (expandedTypes.size > 0)
    #set (extends = " extends ")
    #set (delimiter = "")
    #foreach (expandedType in expandedTypes)
      #set (extends = "{extends}{delimiter}{expandedType.type}{suffix}")
      #set (delimiter = ", ")
    #end
  #end
  #return extends
#end

#function stateReferences(refClass)
  #set (types = new java.util.HashSet())
  #foreach (template in templates.values() where template.classname != classname)
    #foreach (attribute in template.attributes)
      #if (attribute.type == refClass)
        #types.add(template.classname)
      #end
    #end
  #end
  #return types
#end

#function isFactory(theclassname)
  #return behavioursFactories.containsKey(theclassname)
#end

#macro elementMethods()
    public boolean contains({stateListClass} stateList) {
        return stateList.contains(state);
    }

    public {stateClass} getState(Certificate certificate) {
        return state;
    }

    public {stateClass} getState({stateListClass} stateList) {
        return state;
    }

    public void addToList({stateListClass} stateList) {
        stateList.add(state);
    }
#end
