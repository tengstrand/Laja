
#set (certificateClass = "Certificate")
#set (stateClass = "{classname}State")
#set (stateSetClass = "{stateClass}Set")
#set (stateListClass = "{stateClass}List")
#set (stateHashSetClass = "{stateClass}HashSet")
#set (stateArrayListClass = "{stateClass}ArrayList")
#set (stateClassTemplate = "{stateClass}Template")
#set (stateComparable = "{stateClass}Comparable")
#set (builderClass = "{stateClass}Builder")
#set (builderImplClass = "{stateClass}BuilderImpl")
#set (stateSetBuilder = "{stateSetClass}Builder")
#set (stateListBuilder = "{stateListClass}Builder")
#set (stateBehaviourClass = "{classname}Behaviour")
#set (stateBehaviourFactoryClass = "{classname}BehaviourFactory")

#macro oldFileContent(filename)
  #import "{filename}" as text
#end

#macro generateFile(filename, content)
  #if (fileExists(filename))
    #set (oldContent = oldFileContent(filename))
    #set (status = "unchanged")
    #if (oldContent != content)
      #set (status = "changed")
    #end
  #else
    #set (status = "new")
  #end
  #if (status != "unchanged")
    #write "{filename}"
{content}##
    #end
  #end
  #processedFiles.add(filename, status)
#end

#function setter(attribute)
  #return "{attribute.setter}({attribute.type} {attribute.variable}, Object mutator)"
#end

#set (mandatoryAttributes = new java.util.ArrayList())
#foreach (attribute in attributes where attribute.isMandatory)
  #mandatoryAttributes.add(attribute)
#end

#macro header()
/**
 * Code generated by Laja - Do not change!
 *
 *   http://laja.tengstrand.nu
 */
#end

#macro package()
package {package};

#end

#macro importBegin()
  #set (importStatements = new java.util.TreeSet())
#end

#macro addImport(statement)
  #importStatements.add(statement)
#end

#macro importState()
  #foreach (attribute in attributes where attribute.isState)
    #foreach (key in templates.keySet() where key == attribute.cleanedStateType)
      #set (template = templates.get(key))
      #if (template.packagename != package)
        #importStatements.add("import {template.packagename}.{attribute.type};")
      #end
    #end
  #end
#end

#macro importStateComparable()
// {classname}
#end

#macro importStateHashSet()
  #foreach (attribute in attributes where attribute.isStateSet)
    #foreach (key in templates.keySet() where key == attribute.cleanedStateType)
      #set (template = templates.get(key))
      #if (template.packagename != package)
        #importStatements.add("import {template.packagename}.{template.stateClass}HashSet;")
      #end
    #end
  #end
#end

#macro importStateArrayList()
  #foreach (attribute in attributes where attribute.isStateList)
    #foreach (key in templates.keySet() where key == attribute.cleanedStateType)
      #set (template = templates.get(key))
      #if (template.packagename != package)
        #importStatements.add("import {template.packagename}.{template.stateClass}ArrayList;")
      #end
    #end
  #end
#end

#macro importStateBuilder()
  #foreach (attribute in attributes where attribute.isState)
    #set (template = templates.get(attribute.cleanedStateType))
    #if (template.packagename != package)
      #importStatements.add("import {template.packagename}.{attribute.stateBuilder};")
    #end
  #end
#end

#macro importStateBuilderImpl()
  #foreach (attribute in attributes where attribute.isState)
    #set (template = templates.get(attribute.cleanedStateType))
    #if (template.packagename != package)
      #importStatements.add("import {template.packagename}.{attribute.stateBuilderImpl};")
    #end
  #end
#end

#macro importCertificate()
  #if (certificatePackage != package)
    #importStatements.add("import {certificatePackage}.{certificateClass};")
  #end
#end

#macro importEnd()
  #if (importStatements.size() > 0)
    #foreach (importStatement in importStatements)
{importStatement}
    #end

  #end
#end

#macro declareAttributes()
  #foreach (attribute in attributes)
    protected {attribute.type} {attribute.variable}{attribute.initialStatement};{attribute.comment}
  #end
#end

#function arguments()
  #set (result = "")
  #set (delimiter = "")
  #foreach (attribute in mandatoryAttributes)
    #set (result = "{result}{delimiter}{attribute.variable}")
    #set (delimiter = ", ")
  #end
  #return result
#end

#function parameters()
  #set (result = "")
  #set (delimiter = "")
  #foreach (attribute in mandatoryAttributes)
    #set (result = "{result}{delimiter}{attribute.type} {attribute.variable}")
    #set (delimiter = ", ")
  #end
  #return result
#end

#function stateReferences(refClass)
  #set (types = new java.util.HashSet())
  #foreach (template in templates.values() where template.classname != classname)
    #foreach (attribute in template.attributes)
      #if (attribute.type == refClass)
        #types.add(template.classname)
      #end
    #end
  #end
  #return types
#end

#function isFactory(theclassname)
  #return factories.containsKey(theclassname)
#end
