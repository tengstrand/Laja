#namespace creator

#macro builder()
    // --- Builder ---

    public static class {builder} implements {maker} {
        private final {mutableState} state;

        public {builder}() {
            this.state = new {mutableState}();
        }

        public {builder}({mutableState} state) {
            this.state = state;
        }

        #foreach (attribute in attributes)
        public {builder} {attribute.withMethod}({attribute.type.asMutable} {attribute.name}) { state.{attribute.name} = {attribute.name}; return this; }
          #if (attribute.isState)
        public {builder} {attribute.withMethod}({attribute.builder} {attribute.name}) { state.{attribute.name} = {attribute.name}.asMutableState(); return this; }
          #else if (attribute.isDate)
        public {builder} {attribute.withMethod}(int year, int monthOfYear, int dayOfMonth) { state.{attribute.name} = new {attribute.type}(year, monthOfYear, dayOfMonth); return this; }
          #else if (attribute.type.isStateList)
        public {builder} {attribute.withMethod}({attribute.type.leafState}ListBuilder {attribute.name}) { state.{attribute.name} = {attribute.name}.asMutableStateList(); return this; }
          #else if (attribute.type.isStateSet)
        public {builder} {attribute.withMethod}({attribute.type.leafState}SetBuilder {attribute.name}) { state.{attribute.name} = {attribute.name}.asMutableStateSet(); return this; }
          #end
        #end

        #foreach (method in asMethods)
        public {method.returnclass} {method.methodName}({method.parameters}) {
{method.tabbedBody("    ")}##
        }

        #end
        public {immutableState} asState() {
            return state.asImmutable();
        }

        public {mutableState} asMutableState() {
            return state;
        }

        public Map asMap() {
            return state.asMap();
        }

        public {stringState} asStringState() {
            return state.asStringState();
        }

        public {stringState} asStringState(StringStateConverter stateConverter) {
            return state.asStringState(stateConverter);
        }

        public void assertIsValid() {
            state.assertIsValid();
        }

        public boolean isValid() {
            return state.isValid();
        }

        public ValidationErrors validate() {
            return state.validate();
        }

        @Override public int hashCode() {
            return state.hashCode();
        }

        @Override public boolean equals(Object that) {
            if (this == that) return true;
            if (that == null || !(that instanceof {builder})) return false;

            return state.equals((({builder})that).state);
        }

        @Override public String toString() {
            return "{builder}" + state;
        }
    }

#end
