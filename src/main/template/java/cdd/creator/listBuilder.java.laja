#namespace creator

#macro listBuilder()
    // --- ListBuilder ---

    public static class {listBuilder} implements Iterable<{creator}> {
        private List<{creator}> creators;

        public {listBuilder}({creator}... creators) {
            this.creators = Arrays.asList(creators);
        }

        public {listBuilder}(Collection<{creator}> creators) {
            this.creators = new ArrayList<{creator}>();
            this.creators.addAll(creators);
        }

  #foreach (method in asMethods)
        // {method.methodName}List({method.parameters}) : ImmutableList<{method.returnclass}>

        public ImmutableList<{method.returnclass}> {method.methodName}List({method.parameters}) {
            ImmutableList.Builder<{method.returnclass}> builder = ImmutableList.builder();

            for ({creator} creator : creators) {
                builder.add(creator.{method.methodName}({method.arguments}));
            }
            return builder.build();
        }

        // {method.methodName}MutableList({method.parameters}) : List<{method.returnclass}>

        public List<{method.returnclass}> {method.methodName}MutableList({method.parameters}) {
            List<{method.returnclass}> result = new ArrayList<{method.returnclass}>();

            for ({creator} creator : creators) {
                result.add(creator.{method.methodName}({method.arguments}));
            }
            return result;
        }

  #end
        // asStateList() : ImmutableList<{immutableState}>

        public ImmutableList<{immutableState}> asStateList() {
            ImmutableList.Builder<{immutableState}> builder = ImmutableList.builder();

            for ({creator} creator : creators) {
                builder.add(creator.asState());
            }
            return builder.build();
        }

        // asMutableStateList() : List<{mutableState}>

        public List<{mutableState}> asMutableStateList() {
            List<{mutableState}> result = new ArrayList<{mutableState}>();

            for ({creator} creator : creators) {
                result.add(creator.asMutableState());
            }
            return result;
        }

        public Iterator<{creator}> iterator() {
            return creators.iterator();
        }
    }

#end
