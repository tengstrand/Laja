#namespace creator

#macro initializeCreator()
  #set (filename = creator.filename)
  #set (packagename = creator.packagename)
  #set (packageStatement = creator.packageStatement)
  #set (imports = creator.imports)
  #set (classname = creator.classname)
  #set (createMethod = creator.createMethod)
  #set (entryMethod = "{createMethod}Entry")
  #set (buildMethod = creator.buildMethod)
  #set (statevariable = creator.statevariable)
  #set (asMethods = creator.asMethods)
  #set (parameters = creator.parameters)
  #set (newParameters = creator.newParameters)
  #set (isGeneratedCode = creator.isGeneratedCode)
  #set (state = creator.state)
  #set (parameterClasses = creator.parameterClasses)
  #set (immutableState = "{state}State")
  #set (mutableState = "{state}MutableState")
  #set (stringState = "{state}StringState")
  #set (factory = "{state}Factory")
  #set (manualCode = creator.manualCode)
  #set (builder = creator.builder)
  #set (stringBuilder = creator.stringBuilder)
  #set (maker = "{creator.maker}")
  #set (creator = "{creator.classname}")
  #set (listBuilder = "{state}ListBuilder")
  #set (setBuilder = "{state}SetBuilder")
  #set (mapBuilder = "{state}MapBuilder")
  #set (mapEntryBuilder = "{state}MapEntryBuilder")
  #set (behaviour = "{state}Behaviour")
  #set (mutableBehaviour = "{state}MutableBehaviour")

  #set (firstMandatory = null)
  #set (secondMandatory = null)
  #set (mandatoryAttributes = new java.util.ArrayList())
  #foreach (attribute in attributes where attribute.isMandatory)
    #if (firstMandatory != null && secondMandatory == null)
      #set (secondMandatory = attribute)
    #end
    #mandatoryAttributes.add(attribute)
    #if (firstMandatory == null)
      #set (firstMandatory = attribute)
    #end
  #end
  #set (hasMandatoryAttributes = mandatoryAttributes.size > 0)
#end

#macro imports()
  #if (!isGeneratedCode)
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import net.sf.laja.cdd.annotation.Creator;
import net.sf.laja.cdd.validator.ValidationErrors;
import net.sf.laja.cdd.validator.Validator;
import org.joda.time.*;
import java.util.*;

    #set (stateImports = new java.util.TreeSet())
    #set (staticStateImports = new java.util.TreeSet())
    #stateImports.add("{statePackagename}.{immutableState}")
    #stateImports.add("{statePackagename}.{immutableState}.{mutableState}")
    #foreach (attribute in attributes where attribute.isState)
      #stateImports.add("{attribute.stateObject.packagename}.{attribute.asImmutable.type}.{attribute.asMutable.type}")
      #if (attribute.creator != null)
        #staticStateImports.add("{attribute.creator.packagename}.{attribute.creator.classname}.*")
      #end
    #end
    #foreach (import in stateImports)
import {import};
    #end

    #foreach (import in staticStateImports)
import static {import};
    #end

  #end
{imports}##
#end

#macro generatedCode()
  #if (!isGeneratedCode)

    // ===== Generated code =====
  #else
// ===== Generated code =====
  #end

#end

#macro parameters()
  #if (!newParameters.isEmpty)
    /*
    #if (parameters.isEmpty)
import net.sf.laja.cdd.annotation.Parameter;
import net.sf.laja.cdd.annotation.Parameters;

    @Parameters({
    #end
    #foreach (p in newParameters)
      #set (method = "")
      #if (!p.isParameterMethod)
        #set (method = ", method = \"{p.method}\"")
      #end
        @Parameter(attribute = "{p.attribute}"{method}, methodSignature = "{p.methodSignature}", value = "{p.value}")
    #end
    #if (parameters.isEmpty)
    })
    #end
    */

  #end
#end

#macro create()
  #if (hasMandatoryAttributes)
    public static {factory} {createMethod}() {
        return new {creator}(new {mutableState}()).new {factory}();
    }
  #else
    public static {creator} {createMethod}() {
        return new {creator}(new {mutableState}());
    }
  #end

#end

#macro build()
    public static {builder} {buildMethod}() {
        return new {builder}();
    }

#end

#macro createList()
    public static {listBuilder} {createMethod}List({creator}... creators) {
        return new {listBuilder}(creators);
    }

#end

#macro createSet()
    public static {setBuilder} {createMethod}Set({creator}... creators) {
        return new {setBuilder}(creators);
    }

#end

#macro createMap()
    public static {mapBuilder} {createMethod}Map({mapEntryBuilder}... builders) {
        return new {mapBuilder}(builders);
    }

#end

#macro mapCreatorEntry()
    public static {mapEntryBuilder} {entryMethod}(Object key, {creator} creator) {
        return new {mapEntryBuilder}(key, creator);
    }

#end

#macro mapBuilderEntry()
    public static {mapEntryBuilder} {entryMethod}(Object key, {builder} builder) {
        return new {mapEntryBuilder}(key, builder);
    }

#end

#macro constructor()

    // --- Constructor ---

    public {creator}({mutableState} state) {
        this.state = state;
    }

#end

#macro asState()
    public {immutableState} asState() {
        return state.asImmutable();
    }

#end

#macro asMutableState()
    public {mutableState} asMutableState() {
        return state;
    }

#end

#macro withMethods()
  #if (!attributes.isEmpty)
    // --- With methods ---

  #end
  #foreach (attribute in attributes where attribute.isOptionalOrId)
    public {creator} {attribute.withMethod}({attribute.type.asMutable} {attribute.name}) {
        state.{attribute.name} = {attribute.name};
        return this;
    }

    #if (attribute.isDate)
    public {creator} {attribute.withMethod}(int year, int monthOfYear, int dayOfMonth) {
        state.{attribute.name} = new {attribute.type}(year, monthOfYear, dayOfMonth);
        return this;
    }

    #end
    #if (attribute.isCollectionOrMapWithState)
      #set (leafState = attribute.leafState)
      #set (type = attribute.collectionOrMapType)
    public {creator} {attribute.withMethod}({leafState}{type}Builder {attribute.name}) {
        state.{attribute.name} = {attribute.name}.asMutableState{type}();
        return this;
    }

    #end
    #foreach (parameter in parameters where parameter.attribute == attribute.name && parameter.isParameterMethod && !parameter.value.isEmpty && parameter.useNext)
    public {creator} {attribute.withMethod}({parameter.methodSignature}) {
        state.{attribute.name} = {parameter.value};
        return this;
    }

    #end
  #end
#end

#macro assertIsValid()
    // --- Validate ---

    public void assertIsValid() {
        state.assertIsValid();
    }

#end

#macro isValid()
    public boolean isValid() {
        return state.isValid();
    }

#end

#macro validate()
    public ValidationErrors validate(Validator... validators) {
        return state.validate(validators);
    }

#end

#macro hashCodeEqualsToString()
    @Override public int hashCode() {
        return state.hashCode();
    }

    @Override public boolean equals(Object that) {
        if (this == that) return true;
        if (that == null || !(that instanceof {creator})) return false;

        return state.equals((({creator})that).state);
    }

    @Override public String toString() {
        return "{creator}" + state;
    }

#end

#import "{.}/factory.java.laja"
#import "{.}/behaviour.java.laja"
#import "{.}/mutableBehaviour.java.laja"
#import "{.}/builder.java.laja"
#import "{.}/stringBuilder.java.laja"
#import "{.}/listBuilder.java.laja"
#import "{.}/setBuilder.java.laja"
#import "{.}/mapBuilder.java.laja"
#import "{.}/mapEntryBuilder.java.laja"
#import "{.}/maker.java.laja"

#macro creatorContent()
package {packagename};

    #imports()
@Creator
public class {classname} implements {maker} {
    private final {mutableState} state;##
    #foreach (method in asMethods)
{method.spaces}public {method.returnclass} {method.methodName}({method.parameters}) {method.body}##
    #end
{parameters.content}##
{manualCode}##
    #generatedCode()
    #parameters()
    #create()
    #build()
    #createList()
    #createSet()
    #createMap()
    #mapCreatorEntry()
    #mapBuilderEntry()
    #factory()
    #constructor()
    #asState()
    #asMutableState()
    #withMethods()
    #assertIsValid()
    #isValid()
    #validate()
    #hashCodeEqualsToString()
    #behaviour()
    #mutableBehaviour()
    #builder()
    #stringBuilder()
    #listBuilder()
    #setBuilder()
    #mapEntryBuilder()
    #mapBuilder()
}
    #maker()
#end

#macro generateCreator(c)
  #set (creator = c)
  #initializeCreator()

  #generateFile(filename, creatorContent())
#end
