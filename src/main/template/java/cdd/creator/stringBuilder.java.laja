#namespace creator

#macro stringBuilder()
    // --- String builder ---

    public static class {stringBuilder} {
        private final {stringState} state;

        public {stringBuilder}() {
            this.state = new {stringState}();
        }

        public {stringBuilder}({stringState} state) {
            this.state = state;
        }

        #foreach (attribute in attributes)
          #if (attribute.type.isStateList)
        public {stringBuilder} {attribute.withMethod}() { state.{attribute.name} = new ArrayList<{attribute.type.collectionType.type.asMutableString}>(); return this; }
          #else if (attribute.type.isStateSet)
        public {stringBuilder} {attribute.withMethod}() { state.{attribute.name} = new HashSet<{attribute.type.collectionType.type.asMutableString}>(); return this; }
          #else if (attribute.type.isStateMap)
        public {stringBuilder} {attribute.withMethod}() { state.{attribute.name} = new HashMap<{attribute.type.mapType.key},{attribute.type.mapType.entry.asMutableString}>(); return this; }
          #end
        public {stringBuilder} {attribute.withMethod}({attribute.type.asMutableString} {attribute.name}) { state.{attribute.name} = {attribute.name}; return this; }
          #if (attribute.isState)
        public {stringBuilder} {attribute.withMethod}({attribute.stringBuilder} {attribute.name}) { state.{attribute.name} = {attribute.name}.asStringState(); return this; }
          #end
        #end

        #foreach (method in asMethods)
        public {method.returnclass} {method.methodName}({method.parameters}) {
            return new {builder}(state.asMutable()).{method.methodName}({method.arguments});
        }

        #end
        public {immutableState} asState() {
            return state.asImmutable();
        }

        public {mutableState} asMutableState() {
            return state.asMutable();
        }

        public {stringState} asStringState() {
            return state;
        }

        @Override public int hashCode() {
            return state.hashCode();
        }

        @Override public boolean equals(Object that) {
            if (this == that) return true;
            if (that == null || !(that instanceof {stringBuilder})) return false;

            return state.equals((({stringBuilder})that).state);
        }

        @Override public String toString() {
            return "{stringBuilder}" + state;
        }
    }

#end
