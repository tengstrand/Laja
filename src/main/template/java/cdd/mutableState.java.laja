#namespace mutable

#macro classHeader()
  #if (version < 1)
    @State(type = "mutable")
  #else
    @State(version = {version}, type = "mutable")
  #end
    public static class {mutableClass} implements MutableState {
#end

#macro emptyConstructor(emptyConstructoryClass)

        public {emptyConstructoryClass}() {
  #foreach (attribute in attributes)
    #if (attribute.isOptional && attribute.optional.valueFor("defaultValue") != null)
            {attribute.name} = {attribute.optional.valueFor("defaultValue")};
    #else
      #if (attribute.isState)
            {attribute.name} = new {attribute.type}();
      #else if (attribute.isSet)
            {attribute.name} = new Hash{attribute.type}();
      #else if (attribute.isList)
            {attribute.name} = new Array{attribute.type}();
      #else if (attribute.isMap)
            {attribute.name} = new HashMap<{attribute.type.mapType.key},{attribute.type.mapType.entry}>();
      #end
    #end
  #end
        }
#end

#macro setters()

  #foreach (attribute in attributes)
        public void set{attribute.nameAsClass}({attribute.type} {attribute.name}) { this.{attribute.name} = {attribute.name}; }
  #end
#end

#macro withMethods()

  #foreach (attribute in attributes)
        public {mutableClass} with{attribute.nameAsClass}({attribute.type} {attribute.name}) { this.{attribute.name} = {attribute.name}; return this; }
  #end
#end

#macro userValidate()
  #if (validateMethod == null)

        /**
         * Put validations here (this comment can be removed or modified).
         */
        private void validate(Object rootElement, String parent, ValidationErrors.Builder errors) {
        }
  #else
{validateMethod}
  #end
#end

#macro assertIsValid()

        public void assertIsValid(Validator... validators) {
            ValidationErrors errors = validate(validators);

            if (errors.isInvalid()) {
                throw new {stateException}(errors);
            }
        }
#end

#macro isValid()

        public boolean isValid() {
            return validate().isValid();
        }
#end

#macro rootValidate()

        public ValidationErrors validate(Validator... validators) {
            ValidationErrors.Builder errors = ValidationErrors.builder();
            validate(this, "", errors, validators);
            return errors.build();
        }
#end

#function hasStateOrCollectionOrMap()
  #foreach (attribute in attributes where attribute.isState || attribute.isCollection || attribute.isMap)
    #return true
  #end
  #return false
#end

#macro validate()

        public void validate(Object rootElement, String parent, ValidationErrors.Builder errors, Validator... validators) {
  #if (state.hasMandatoryObjectAttribute)
    #foreach (attribute in attributes where attribute.isMandatory && !attribute.isPrimitive)
            if ({attribute.name} == null) errors.addIsNullError(rootElement, parent, "{attribute.name}");
    #end

  #end
  #if (hasStateOrCollectionOrMap())
    #foreach (attribute in attributes where !attribute.isPrimitive)
      #if (attribute.isState)
            if ({attribute.name} != null) {attribute.name}.validate(rootElement, concatenate(parent, "{attribute.name}"), errors);
      #else if (attribute.isCollection && attribute.isLeafState)
            if ({attribute.name} != null) collectionValidator().validate(rootElement, {attribute.name}, parent, "{attribute.name}", errors, 0);
      #else if (attribute.isMap && attribute.isLeafState)
            if ({attribute.name} != null) mapValidator().validate(rootElement, {attribute.name}, parent, "{attribute.name}", errors, 0);
      #end
    #end

  #end
            validate(rootElement, parent, errors);

            for (Validator validator : validators) {
                validator.validate(rootElement, this, parent, "", errors);
            }
        }
#end

#macro immutableConverters(type)
  #if (type.isState)
, toImmutable##
  #else if (type.isMap)
, toImmutableMap{immutableConverters(type.mapType.entry)}##
  #else if (type.isList)
, toImmutableList{immutableConverters(type.collectionType.type)}##
  #else if (type.isSet)
, toImmutableSet{immutableConverters(type.collectionType.type)}##
  #end
#end

#macro immutableStateAttribute()
  #if (attribute.type.isMap)
asImmutableMap({attribute.name}{immutableConverters(attribute.type.mapType.entry)})##
  #else if (attribute.type.isList)
asImmutableList({attribute.name}{immutableConverters(attribute.type.collectionType.type)})##
  #else if (attribute.type.isSet)
asImmutableSet({attribute.name}{immutableConverters(attribute.type.collectionType.type)})##
  #else if (attribute.type.isState)
{attribute.name} != null ? {attribute.name}.asImmutable() : null##
  #else
{attribute.name}##
  #end
#end

#macro asImmutable()

  #if (attributes.size == 1)
    #singleAsImmutable()
  #else
    #multipleAsImmutable()
  #end
#end

#macro singleAsImmutable()
  #set (attribute = attributes.iterator.next)
        public {classname} asImmutable(Validator... validators) {
            assertIsValid(validators);

            return new {classname}({immutableStateAttribute()});
        }
#end

#macro multipleAsImmutable()
        public {classname} asImmutable(Validator... validators) {
            assertIsValid(validators);

            return new {classname}(
  #set (iterator = attributes.iterator)
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
                    {immutableStateAttribute()},
    #else
                    {immutableStateAttribute()});
    #end
  #end
        }
#end

#macro mutableState()
  #set ($.attributes = state.mutableAttributes)
  #set (tab = "        ")

  #classHeader()
  #attributes(tab, "")
  #emptyConstructor("{mutableClass}")
  #constructor("{mutableClass}", false, tab)
  #userValidate()
  #getters(tab)
  #setters()
  #withMethods()
  #assertIsValid()
  #isValid()
  #rootValidate()
  #validate()
  #asImmutable()
  #hashCode(tab)
  #equals(mutableClass, tab)
  #toString(tab)
    }
#end
