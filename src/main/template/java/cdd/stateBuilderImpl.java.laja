#macro class()
  #header()
public class {builderImplClass} implements {builderClass} {
    private boolean encapsulated;
    private Object encapsulator;
    private {stateClass} state;
    private final {certificateClass} certificate;
    private boolean trusted;
  #foreach (attribute in attributes where attribute.isState)
    private {attribute.stateBuilder} {attribute.stateBuilderVariable};
  #end

    {builderImplClass}() {
        state = new {stateImplClass}();
        certificate = Certificate.get(this);
    }

    public {builderImplClass}({stateClass} state) {
        this.state = state;
        certificate = Certificate.get(this);
        trusted = true;
    }

    public {builderImplClass}({stateClass} state, Object encapsulator) {
        this(state);
        this.encapsulator = encapsulator;
    }
  #foreach (method in stateMethods)

    public {method.stateBuilderClass} {method.stateBuilderVariable}() {
        return new {method.stateBuilderImplClass}(state.{method.getter}());
    }
  #end
  #foreach (attribute in attributes)

    #if (attribute.isStateList)
      #set (template = templates.get(attribute.cleanedStateType))
    public void {attribute.withMethod}({template.packagename}.{attribute.stateBuilder} listBuilder) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.{attribute.setter}(listBuilder.getStateList(certificate), encapsulator);
    #else if (attribute.isState)
    public void {attribute.withMethod}({attribute.stateBuilder} {attribute.variable}) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.{attribute.setter}({attribute.variable}.{attribute.stateMethod}(certificate), encapsulator);
    #else
    public void {attribute.withMethod}({attribute.type} {attribute.variable}) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.{attribute.setter}({attribute.variable}, encapsulator);
    #end
    }
    #foreach (method in allConvertMethods where method.variable == attribute.variable)

    public void {attribute.withMethod}({method.type} {method.variable}) {
        if (!trusted && encapsulated) throwEncapsulationException();
        state.{attribute.setter}({method.statement}, encapsulator);
    }
    #end
  #end
  #foreach (attribute in attributes where attribute.isState)

    public {attribute.stateBuilder} {attribute.stateBuilderGetter}() {
        if ({attribute.stateBuilderVariable} == null) {
            {attribute.stateBuilderVariable} = new {attribute.stateBuilderImpl}(state.{attribute.getter}());
        }
        return {attribute.stateBuilderVariable};
    }
  #end

    private void throwEncapsulationException() {
        throw new IllegalStateException("The state has been encapsulated and can only be changed from within behaviour classes of type \"{classname}\"");
    }

    public boolean isValid() {
        return state.isValid();
    }

    public Object as({stateBehaviourFactoryClass} factory, Object... args) {
        Object encapsulatedObject = factory.create(state, args);
        if (!trusted) {
            encapsulated = true;
        }
        return encapsulatedObject;
    }
  #foreach (expandedType in allExpandedTypes)

    public Object as({expandedType.type}StateBehaviourFactory factory, Object... args) {
        Object encapsulatedObject = factory.create(state, args);
        if (!trusted) {
            encapsulated = true;
        }
        return encapsulatedObject;
    }
  #end

    public {stateClass} get{stateClass}({certificatePackage}.{certificateClass} certificate) {
        return state;
    }
  #foreach (expandedType in allExpandedTypes)
    #set (type = expandedType.type)

    public {type}State get{type}State(Certificate certificate) {
        return state;
    }
  #end
}
#end

#macro fileContent()
  #package()
  #importBegin(true)
  #importExpandedType("StateBehaviourFactory,State")
  #prepareStateImports()
  #importStateBuilder()
  #importStateBuilderImpl()
  #importStates()
  #importProjectedStateBuilder()
  #importCertificate()
  #importEnd()
  #class()
#end

#set (filename = "{outputDir}/{builderImplClass}.java")
#generateFile(filename, fileContent())
