#macro class()
  #header()
public class {builderImplClass} implements {builderClass} {
    private Object encapsulator;
    private {stateClass} state;
    private final {certificateClass} certificate;
  #foreach (attribute in attributes where attribute.isState)
    private {attribute.stateBuilder} {attribute.stateBuilderVariable};
  #end

    {builderImplClass}() {
        state = new {stateImplClass}();
        certificate = Certificate.get(this);
    }

    public {builderImplClass}({stateClass} state) {
        this.state = state;
        certificate = Certificate.get(this);
    }

    public {builderImplClass}({stateClass} state, Object encapsulator) {
        this(state);
        this.encapsulator = encapsulator;
    }
  #foreach (attribute in expandedAttributes)

    public {attribute.stateBuilder} get{attribute.variableAsClass}StateBuilder() {
        return new {attribute.stateBuilder}Impl(state.get{attribute.variableAsClass}State());
    }
  #end
  #foreach (attribute in attributes)

    #if (attribute.isStateSet)
      #set (template = templates.get(attribute.cleanedStateType))
    public void {attribute.withMethod}({template.packagename}.{attribute.stateBuilder} listBuilder) {
        state.{attribute.setter}(listBuilder.getStateSet(certificate), encapsulator);
    #else if (attribute.isStateList)
      #set (template = templates.get(attribute.cleanedStateType))
    public void {attribute.withMethod}({template.packagename}.{attribute.stateBuilder} listBuilder) {
        state.{attribute.setter}(listBuilder.getStateList(certificate), encapsulator);
    #else if (attribute.isState)
    public void {attribute.withMethod}({attribute.stateBuilder} {attribute.variable}) {
        state.{attribute.setter}({attribute.variable}.{attribute.stateMethod}(certificate), encapsulator);
    #else
    public void {attribute.withMethod}({attribute.type} {attribute.variable}) {
        state.{attribute.setter}({attribute.variable}, encapsulator);
    #end
    }
    #foreach (method in allConvertMethods where method.variable == attribute.variable)

    public void {attribute.withMethod}({method.type} {method.variable}) {
        state.{attribute.setter}({method.statement}, encapsulator);
    }
    #end
  #end
  #foreach (attribute in attributes where attribute.isState)

    public {attribute.stateBuilder} {attribute.stateBuilderGetter}() {
        if ({attribute.stateBuilderVariable} == null) {
            {attribute.stateBuilderVariable} = new {attribute.stateBuilderImpl}(state.{attribute.getter}());
        }
        return {attribute.stateBuilderVariable};
    }
  #end

    public boolean isValid() {
        return state.isValid();
    }

    public Object as({stateBehaviourFactoryClass} factory, Object... args) {
        return factory.create(state, args);
    }

    public {stateClass} get{stateClass}({certificatePackage}.{certificateClass} certificate) {
        return state;
    }

    @Override
    public int hashCode() {
        return state.hashCode();
    }
#*
    // TODO: fix!
    public boolean equalsState({stateClass} state) {
        return this.state.equalsState(state);
    }
*#
    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof {stateComparable})) return false;

        return true;
## TODO: fix!
##        return (({stateComparable})obj).equalsState(state);
    }

    @Override
    public String toString() {
        return state.toString();
    }
}
#end

#macro fileContent()
  #package()
  #importBegin(true)
  #importExpandedType("BehaviourFactory,State,StateBuilder,StateBuilderImpl")
  #prepareStateImports()
  #importStateBuilder()
  #importStateBuilderImpl()
  #importStates()
  #importCertificate()
  #importEnd()
  #class()
#end

#set (filename = "{outputDir}/{builderImplClass}.java")
#generateFile(filename, fileContent())
