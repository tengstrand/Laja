#namespace mapState

#macro mapStateConverters(type)
  #if (type.isState)
, mapTo{type.state}Converter##
  #else if (type.isMap)
, toMutableMap{mapStateConverters(type.mapType.entry)}##
  #else if (type.isList)
, toMutableList{mapStateConverters(type.collectionType.type)}##
  #else if (type.isSet)
, toMutableSet{mapStateConverters(type.collectionType.type)}##
  #end
#end

#macro mapStateAttribute()
  #if (attribute.type.isMap)
asMutableMap({attribute.name}{mapStateConverters(attribute.type.mapType.entry)})##
  #else if (attribute.type.isList)
asMutableList({attribute.name}{mapStateConverters(attribute.type.collectionType.type)})##
  #else if (attribute.type.isSet)
asMutableSet({attribute.name}{mapStateConverters(attribute.type.collectionType.type)})##
  #else if (attribute.isLeafState)
{attribute.name} != null ? to{attribute.leafState}MutableState({attribute.name}) : null##
  #else
{attribute.name}##
  #end
#end

#macro mapStateConverter()

    public static {mapConverterClass} {mapConverterVariable} = new {mapConverterClass}();

    public static {mutableClass} to{mutableClass}(Map map) {
        return {mapConverterVariable}.convert(map, 0);
    }

    public static class {mapConverterClass} implements StateConverter {

        public {mutableClass} convert(Object from, int index, StateConverter... converters) {
            Map map = (Map)from;

  #foreach (attribute in attributes)
            {attribute.type.mapName} {attribute.name} = ({attribute.type.mapObjectName}) map.get("{attribute.name}");
  #end

            return new {mutableClass}(
  #set (iterator = attributes.iterator)
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
                    {mapStateAttribute()},
    #else
                    {mapStateAttribute()}
            );
    #end
  #end
        }
    }
#end
