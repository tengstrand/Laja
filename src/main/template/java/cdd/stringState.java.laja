#namespace string

#macro classHeader()
  #if (version < 1)
    @State(type = "string")
  #else
    @State(version = {version}, type = "string")
  #end
    public static class {stringClass} {
#end

#macro attributes()
  #foreach (attribute in attributes)
        {attribute.annotationsContent}public {attribute.type} {attribute.name};
  #end
#end

#macro asState()

        public {classname} asImmutable() {
            return asMutable().asImmutable();
        }

        public {mutableClass} asMutable() {
            return asMutable(new {stringConverterClass}());
        }

        public {mutableClass} asMutable({stringConverterClass} converter) {
            return new {mutableClass}(
  #set (iterator = attributes.iterator)
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
                    converter.to{attribute.nameAsClass}({attribute.name}),
    #else
                    converter.to{attribute.nameAsClass}({attribute.name}));
    #end
  #end
        }
#end

#macro assertIsValid()

        public void assertIsValid(Validator... validators) {
            assertIsValid(new {stringConverterClass}(), validators);
        }

        public void assertIsValid({stringConverterClass} stateConverter, Validator... validators) {
            ValidationErrors errors = validate(stateConverter, validators);

            if (errors.isInvalid()) {
                throw new {stateException}(errors);
            }
        }
#end

#macro isValid()

        public boolean isValid(Validator... validators) {
            return validate(validators).isValid();
        }
#end

#macro validate()

        public ValidationErrors validate(Validator... validators) {
            return validate(new {stringConverterClass}(), validators);
        }

        public ValidationErrors validate({stringConverterClass} stateConverter, Validator... validators) {
            ValidationErrors.Builder errors = ValidationErrors.builder();
            validate(stateConverter, this, "", errors, validators);
            return errors.build();
        }

        public void validate({stringConverterClass} stateConverter, Object rootElement, String parent, ValidationErrors.Builder errors, Validator... validators) {
  #foreach (attribute in attributes)
            stateConverter.validate{attribute.nameAsClass}({attribute.name}, rootElement, parent, errors);
  #end

            asMutable().validate(rootElement, parent, errors, validators);
        }
#end

#macro stringState()
  #set ($.attributes = state.mutableStringAttributes)
  #set ($.convertPrimitives = true)
  #set (tab = "        ")

  #classHeader()
  #attributes()
  #$mutable.emptyConstructor(stringClass)
  #constructor(stringClass, false, tab)
  #$mutable.getters(tab)
  #$mutable.setters()
  #$mutable.withMethods(stringClass)
  #asState()
  #isValid()
  #validate()
  #assertIsValid()
  #hashCode(tab)
  #equals(stringClass, tab)
  #toString(tab)
    }
#end
