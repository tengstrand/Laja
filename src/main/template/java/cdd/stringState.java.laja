#namespace string

#macro classHeader()
  #if (version < 1)
    @State(type = "string")
  #else
    @State(version = {version}, type = "string")
  #end
    public static class {stringClass} implements StringState {
#end

#macro attributes()
  #foreach (attribute in attributes)
        {attribute.annotationsContent}public {attribute.type} {attribute.name};
  #end
#end

#macro asState()
  #set (converter = suffix("converter"))

        public {classname} asImmutable() {
            return asMutable().asImmutable();
        }

        public {classname} asImmutable({stringConverterClass} {converter}) {
            return asMutable(converter).asImmutable();
        }

        public {mutableClass} asMutable() {
            return asMutable(new {stringConverterClass}());
        }

        public {mutableClass} asMutable({stringConverterClass} {converter}) {
            return new {mutableClass}(
  #set (iterator = attributes.iterator)
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
                    {converter}.to{attribute.nameAsClass}({attribute.name}),
    #else
                    {converter}.to{attribute.nameAsClass}({attribute.name})
            );
    #end
  #end
        }

        public Map asMap() {
            return asMutable().asMap();
        }
#end

#macro assertIsValid()

        public void assertIsValid() {
            assertIsValid(new {stringValidatorClass}());
        }

        public void assertIsValid({stringValidatorClass} stateValidator) {
            ValidationErrors errors = validate(stateValidator);

            if (errors.isInvalid()) {
                throw new {stateException}(errors);
            }
        }
#end

#macro isValid()

        public boolean isValid() {
            return validate().isValid();
        }
#end

#macro validate()
  #set (parent = suffix("parent"))
  #set (errors = suffix("errors"))
  #set (rootElement = suffix("rootElement"))
  #set (stateValidator = suffix("stateValidator"))

        public ValidationErrors validate() {
            return validate(new {stringValidatorClass}());
        }

        public ValidationErrors validate({stringValidatorClass} stateValidator) {
            ValidationErrors.Builder errors = ValidationErrors.builder();
            validate(stateValidator, this, "", errors);
            return errors.build();
        }

        public void validate({stringValidatorClass} {stateValidator}, Object {rootElement}, String {parent}, ValidationErrors.Builder {errors}) {
  #foreach (attribute in attributes)
            {stateValidator}.validate{attribute.nameAsClass}({attribute.name}, {rootElement}, {parent}, {errors});
  #end

            asMutable().validate({rootElement}, {parent}, {errors});
        }
#end

#macro withMethods()

  #foreach (attribute in attributes)
          #if (attribute.type.isStateList)
        public {stringClass} {attribute.withMethod}() { this.{attribute.name} = new ArrayList<{attribute.type.collectionType.type.asMutableString}>(); return this; } // 1
          #else if (attribute.type.isStateSet)
        public {stringClass} {attribute.withMethod}() { this.{attribute.name} = new HashSet<{attribute.type.collectionType.type.asMutableString}>(); return this; }
          #else if (attribute.type.isStateMap)
        public {stringClass} {attribute.withMethod}() { this.{attribute.name} = new HashMap<{attribute.type.mapType.key},{attribute.type.mapType.entry.asMutableString}>(); return this; }
          #end
        public {stringClass} with{attribute.nameAsClass}({attribute.type} {attribute.name}) { this.{attribute.name} = {attribute.name}; return this; }
  #end
#end

#macro stringState()
  #set ($.attributes = state.mutableStringAttributes)
  #set ($.convertPrimitives = true)
  #set (tab = "        ")

  #classHeader()
  #attributes()
  #$mutable.emptyConstructor(stringClass)
  #constructor(false, stringClass, false, tab)
  #$mutable.getters(tab)
  #$mutable.setters()
  #withMethods()
  #asState()
  #isValid()
  #validate()
  #assertIsValid()
  #hashCode(tab)
  #equals(stringClass, tab)
  #toString(tab)
    }
#end
