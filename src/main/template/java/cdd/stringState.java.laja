#namespace string

#macro classHeader()
  #if (version < 1)
    @State(type = "string")
  #else
    @State(version = {version}, type = "string")
  #end
    public static class {stringClass} {
#end

#macro attributes()
  #foreach (attribute in attributes)
        {attribute.annotationsContent}public {attribute.type} {attribute.name};
  #end
#end

#macro asState()

        public {classname} asImmutable() {
            return asMutable().asImmutable();
        }

        public {mutableClass} asMutable() {
            return asMutable(new {stringConverterClass}());
        }

        public {mutableClass} asMutable({stringConverterClass} converter) {
            return new {mutableClass}(
  #set (iterator = attributes.iterator)
  #while (iterator.hasNext)
    #set (attribute = iterator.next)
    #if (iterator.hasNext)
                    converter.to{attribute.nameAsClass}({attribute.name}),
    #else
                    converter.to{attribute.nameAsClass}({attribute.name}));
    #end
  #end
        }
#end

#macro stringState()
  #set ($.attributes = state.mutableStringAttributes)
  #set (tab = "        ")

  #classHeader()
  #attributes()
  #$mutable.emptyConstructor(stringClass)
  #constructor(stringClass, false, tab)
  #$mutable.getters(tab)
  #$mutable.setters()
  #$mutable.withMethods(stringClass)
  #asState()
    }
#end
