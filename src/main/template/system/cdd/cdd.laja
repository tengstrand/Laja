
#macro lazyDefineCdd()
  #if ($laja.isCddImported == null)
    #set ($laja.isCddImported = true)
    #set (cddParser = new net.sf.laja.parser.cdd.CddParser())
    #set (fileReader = new net.sf.laja.parser.cdd.FileReader())
  #end
#end

#macro generateCdd(parameters)
  #lazyDefineCdd()
  #set (errors = new java.util.ArrayList())
  #set (processedFiles = new net.sf.laja.parser.cdd.OutputDirectoryReader$Result())

  #if (parameters.class().simpleName != "LinkedHashMap")
    #errors.add("The argument must be a list of maps, e.g: #generateCdd({srcDir: \"{.}/main\"})")
  #end

  #$.putAll(parameters)

  #if (srcDir == null)
    #println("Missing parameter: 'srcDir'")
  #else
    #set (states = parseStates())
    #set (creators = parseCreators())
    #findInvalidTypes()
    #if (errors.isEmpty)
      #updateStateAndCreatorReferences()
      #generateStatesAndCreators()
      #printResult()
    #else
      #println("Errors found:")
      #foreach (error in errors)
        #println("  {error}")
      #end
    #end
  #end
#end

#macro findInvalidTypes()
  #set (unknownTypeFound = false)
  #foreach (state in states)
    #foreach (attribute in state.attributes)
      #if (!attribute.isValidType)
        #set (unknownTypeFound = true)
        #errors.add("Unsupported type '{attribute.type}' for attribute '{attribute.name}' in class '{state.classname}', file '{state.filename}'.")
      #end
    #end
  #end
  #if (unknownTypeFound)
    #set (message = loadClass("net.sf.laja.parser.cdd.Type").typesAsString)
    #errors.add("Valid types are states (types that ends with 'State') and: {message}.")
  #end
#endo

#macro updateStateAndCreatorReferences()
  #foreach (state in states)
    #foreach (creator in creators where creator.state == state.name)
      #set (state.creator = creator)
    #end
    #foreach (attribute in state.attributes where attribute.isState)
      #foreach (s in states where s.classname == attribute.type.name)
        #set (attribute.state = s)
      #end
    #end
  #end
#end

#macro generateStatesAndCreators()
  #import "{..}/../java/cdd2/state.java.laja"
  #import "{..}/../java/cdd2/creator/creator.java.laja"

  #foreach (s in states)
    #set (state = s)
    #generateState()
    #foreach (c in creators where c.state == state.name)
      #$creator.generateCreator(c)
    #end
  #end
#end

#macro printResult()
  #if (verbose == null)
    #set (verbose = false)
  #end
  #processedFiles.printProcessedMessage(verbose)
#end

#function parseStates()
  #set (states = new java.util.ArrayList())
  #set (stateFiles = fileReader.readFiles(srcDir, "State.java"))

  #foreach (file in stateFiles)
    #if (!file.endsWith("ImmutableState.java") && !file.endsWith("MutableState.java"))
      #set (state = cddParser.parseState(file))
      #if (state != null)
        #set (state.filename = file)
        #states.add(state)
      #end
    #end
  #end
  #return states
#end

#function parseCreators()
  #set (creators = new java.util.ArrayList())
  #set (creatorFiles = fileReader.readFiles(srcDir, "Creator.java"))

  #foreach (file in creatorFiles)
    #set (creator = cddParser.parseCreator(file))
    #if (creator != null)
      #set (creator.filename = file)
      #creators.add(creator)
    #end
  #end
  #return creators
#end

#macro oldFileContent(filename)
  #import "{filename}" as text
#end

#macro generateFile(filename, content)
  #set (oldContent = oldFileContent(filename))
  #set (status = "unchanged")
  #if (oldContent != content)
    #set (status = "changed")
  #end
  #if (status != "unchanged")
    #write "{filename}"
{content}##
    #end
  #end
  #processedFiles.add(filename, status)
#end
