
#macro lazyDefineCdd()
  #if ($laja.isCddImported == null)
    #set ($laja.isCddImported = true)
    #set (cddParser = new net.sf.laja.parser.cdd.CddParser())
    #set (fileReader = new net.sf.laja.parser.cdd.FileReader())
  #end
#end

#macro generateCdd(parameters)
  #lazyDefineCdd()

  #if (parameters.class().simpleName != "LinkedHashMap")
    #error("The argument must be a list of maps, e.g: #generateCdd({srcDir: \"{.}/main\"})")
  #end

  #$.putAll(parameters)

  #if (srcDir == null)
    #println("Missing parameter: 'srcDir'")
  #else
    #set (states = parseStates())
    #set (creators = parseCreators())
    #generateStatesAndCreators()
  #end
#end

#macro generateStatesAndCreators()
  #foreach (state in states)
    #import "{..}/../java/cdd2/state.java.laja"
    #foreach (creator in creators where creator.state == state.name)
      #import "{..}/../java/cdd2/creator/creator.java.laja"
    #end
  #end
#end

#function parseStates()
  #set (states = new java.util.ArrayList())
  #set (stateFiles = fileReader.readFiles(srcDir, "State.java"))

  #foreach (file in stateFiles)
    #if (!file.endsWith("ImmutableState.java") && !file.endsWith("MutableState.java"))
      #set (state = cddParser.parseState(file))
      #if (state != null)
        #set (state.filename = file)
        #states.add(state)
      #end
    #end
  #end
  #return states
#end

#function parseCreators()
  #set (creators = new java.util.ArrayList())
  #set (creatorFiles = fileReader.readFiles(srcDir, "Creator.java"))

  #foreach (file in creatorFiles)
    #if (!file.endsWith("DbPersonCreator.java"))
      #set (creator = cddParser.parseCreator(file))
      #if (creator != null)
        #set (creator.filename = file)
        #creators.add(creator)
      #end
    #end
  #end
  #return creators
#end

#macro validateStates()
  ## Validate attributes in templates
  #foreach (template in templates.values())
    #set (cnt = counter(0))
    #foreach (attribute in template.attributes)
      #if (attribute.isId)
        #cnt.increase()
      #end
      #if (!attribute.isValidType)
        #attributeError("Unsupported type '{attribute.type}'")
      #end
      #if (attribute.isState)
        #set (factory = factories.get(attribute.cleanedStateType))
        #if (factory == null)
          #attributeError("Could not find state '{attribute.cleanedStateType}'")
        #end
      #end
    #end
    #if (cnt.isGreaterThan(1))
      #errors.addMessage("Max one attribute can be marked as surrogate key (id). Error in {template.classname}StateTemplate.")
    #end
  #end
#end

#macro generateState()
  #foreach (stateTemplate in templates.values())
    #set (sourceDir = stateTemplate.sourceDir)
    #set (outputDir = stateTemplate.outputDir)
    #set (classname = stateTemplate.classname)
    #set (classvariable = stateTemplate.classvariable)
    #set (stateClass = stateTemplate.stateClass)
    #set (stateImplClass = stateTemplate.stateImplClass)
    #set (package = stateTemplate.packagename)
    #set (imports = stateTemplate.imports)
    #set (allImports = stateTemplate.allImports)
    #set (attributes = stateTemplate.attributes)
    #set (isValidStatement = stateTemplate.isValidStatement)
    #set (asMethods = stateTemplate.asMethods)
    #set (stateMethods = stateTemplate.stateMethods)
    #set (convertMethods = stateTemplate.convertMethods)
    #set (errors = stateTemplate.errors)

    #if (!directoryExists(outputDir))
      #createDirectoryPath(outputDir)
    #end

    #import "{..}/../java/cdd/shared.java.laja"
    #import "{..}/../java/cdd/state.java.laja"
    #import "{..}/../java/cdd/stateImpl.java.laja"
    #import "{..}/../java/cdd/stateComparable.java.laja"
    #import "{..}/../java/cdd/stateSet.java.laja"
    #import "{..}/../java/cdd/stateList.java.laja"
    #import "{..}/../java/cdd/stateHashSet.java.laja"
    #import "{..}/../java/cdd/stateArrayList.java.laja"
    #import "{..}/../java/cdd/stateBuilder.java.laja"
    #import "{..}/../java/cdd/stateBuilderImpl.java.laja"
    #import "{..}/../java/cdd/stateSetBuilder.java.laja"
    #import "{..}/../java/cdd/stateListBuilder.java.laja"
    #import "{..}/../java/cdd/stateBehaviour.java.laja"
    #import "{..}/../java/cdd/stateBehaviourFactory.java.laja"
  #end
#end

#macro generateBehaviour()
  #set (processedSets = new java.util.HashSet())
  #set (processedLists = new java.util.HashSet())
  #set (processedHashSets = new java.util.HashSet())
  #set (processedArrayLists = new java.util.HashSet())
  #foreach (behaviour in behaviours.values())
    #if (!directoryExists(behaviour.outputDir))
      #createDirectoryPath(behaviour.outputDir)
    #end
    #import "{..}/../java/cdd/behaviour/shared-behaviour.java.laja"
    #import "{..}/../java/cdd/behaviour/interface.java.laja"
    #import "{..}/../java/cdd/behaviour/behaviour.java.laja"
    #import "{..}/../java/cdd/behaviour/factory.java.laja"
    #import "{..}/../java/cdd/behaviour/builder.java.laja"
    #import "{..}/../java/cdd/behaviour/creator.java.laja"
    #import "{..}/../java/cdd/behaviour/encapsulator.java.laja"
    #import "{..}/../java/cdd/behaviour/set.java.laja"
    #import "{..}/../java/cdd/behaviour/list.java.laja"
    #import "{..}/../java/cdd/behaviour/hashSet.java.laja"
    #import "{..}/../java/cdd/behaviour/arrayList.java.laja"
    #import "{..}/../java/cdd/behaviour/setEncapsulator.java.laja"
    #import "{..}/../java/cdd/behaviour/listEncapsulator.java.laja"
  #end
#end

#macro createMissingBehaviours()
  #foreach (template in templates.values())
    #set (found = false)
    #foreach (behaviour in behaviours.values() where !found && behaviour.cleanedStateClass == template.classname)
      #set (found = true);
    #end
    #if (!found)
      ## Create missing behaviour!
      #set (behaviour = behaviourCreator.asBehaviour(template, _i))
      #if (!directoryExists(behaviour.sourceDir))
        #createDirectoryPath(behaviour.sourceDir)
      #end
      #addBehaviour(template.classname)
    #end
  #end
#end
